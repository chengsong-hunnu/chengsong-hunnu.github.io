<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typescript+vue3简单学习</title>
      <link href="/2021/03/08/typescript-vue3%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/03/08/typescript-vue3%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>就是对之前学习的typescript的简单回顾和对vue3的配合使用</p><p>首先感谢一下我学习的博客 jspang.com 和其作者技术胖</p><p><a href="https://www.bilibili.com/video/BV1qV41167VD?p=1" target="_blank" rel="noopener">ts视频教程</a></p><p><a href="https://www.jspang.com/detailed?id=64" target="_blank" rel="noopener">基础文章地址</a></p><h2 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h2><p>有些久没用过ts了，之前的知识点都忘了，现在再简单的学一遍吧</p><p>首先安装</p><pre><code>npm install typescript -g</code></pre><p>可使用 <strong>tsc</strong> 命令查看是否安装完成</p><p>可使用</p><pre><code>tsc demo.ts</code></pre><p>编译ts程序，生成js程序，再使用node跑js程序，但效率太低，可安装 <strong>ts-node</strong> 使用</p><pre><code>ts-node demo.ts</code></pre><p>直接跑ts程序</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a><a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener">类型</a></h3><p>就是定义了一个类型后，就只能对这个变量赋这个类型的值，当类型不匹配的时候，就会报错。并且这个变量也继承了这个类型上面的属性和方法</p><h4 id="静态类型"><a href="#静态类型" class="headerlink" title="静态类型"></a>静态类型</h4><pre class=" language-tsx"><code class="language-tsx">let isDone: boolean = false;let name: string = `Gene`;let age: number = 37;</code></pre><p>其声明类型的方式就如上面所示</p><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><pre class=" language-tsx"><code class="language-tsx">let test1: { name: string, age: number } = {    name: 'test1',    age: 20}</code></pre><h4 id="类-类型"><a href="#类-类型" class="headerlink" title="类 类型"></a>类 类型</h4><pre class=" language-tsx"><code class="language-tsx">class Person {    say() {        console.log('person');    }}let my:Person = new Person()</code></pre><p>以一个类为一个变量的类型，则这个变量只能是这个 类的实例</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组：</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> list1<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cs'</span><span class="token punctuation">,</span><span class="token string">'j'</span><span class="token punctuation">]</span></code></pre><p>第二种方式是使用数组泛型，<code>Array&lt;元素类型&gt;</code>：</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h4><pre class=" language-tsx"><code class="language-tsx">let test2: () => string = () => { return 'string' }</code></pre><p>只能是一个函数，并且还确定了函数的返回值必须是一个string类型</p><h4 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h4><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code>和<code>number</code>类型的元组。把数组中的每个元素类型的位置给固定住了，这就叫做元组，虽然一般只会在csv数据格式的时候用到</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error，不能越界，只能有两个值</span></code></pre><p>当访问一个越界的元素，会使用联合类型替代：</p><pre class=" language-ts"><code class="language-ts">x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK, 字符串可以赋值给(string | number)类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK, 'string' 和 'number' 都有 toString</span>x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error, 布尔不是(string | number)类型</span></code></pre><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p><code>enum</code>类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre><p>其里面的值默认从0开始，同时也可以对第一个值赋1，让其从1开始</p><p>enum里面的值都可以赋值，当然最好赋同一类型的值，防止奇怪的错误</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> en <span class="token punctuation">{</span> book <span class="token operator">=</span> <span class="token string">'cs'</span><span class="token punctuation">,</span> water <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> app <span class="token operator">=</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token keyword">let</span> entest<span class="token punctuation">:</span> en <span class="token operator">=</span> en<span class="token punctuation">.</span>book    <span class="token comment" spellcheck="true">// cs</span></code></pre><h4 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h4><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code>类型来标记这些变量：</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token string">"maybe a string instead"</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span></code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>可以当做一个自定义静态类型，用来规范类型</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">cs</span> <span class="token punctuation">{</span>    uname<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">let</span> jcs<span class="token punctuation">:</span> cs <span class="token operator">=</span> <span class="token punctuation">{</span>    uname<span class="token punctuation">:</span> <span class="token string">'蒋晟松'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token keyword">let</span> sc<span class="token punctuation">:</span> cs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>uname<span class="token punctuation">:</span><span class="token string">'cs'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'jcs: '</span><span class="token punctuation">,</span> jcs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// jcs:  { uname: '蒋晟松', age: 15 }</span></code></pre><p>还可对一个接口里面的属性可选，因为有些属性不全是必须的</p><p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加一个?号</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> SquareConfig<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> area<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span> area<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>color<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newSquare<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">"black"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可使用 redonly 进行指定变量不能变化</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    readonly x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    readonly y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span>et p1<span class="token punctuation">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p>当然在我们的对象里面出现接口里面没有定义的属性的时候，会提示错误，所以可以在接口里面添加一个any类型的值</p><p>同时接口里面也能存一个<strong>方法</strong>，所以相应的对象也需要有一个方法</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">gril</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>    height<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>propname<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span>    <span class="token comment" spellcheck="true">// 属性的名字是字符串类型，属性的值可以是任何类型。</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> my4<span class="token punctuation">:</span> gril <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'cs'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    cs<span class="token punctuation">:</span> <span class="token string">'323'</span><span class="token punctuation">,</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">'21'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>同时接口也可以<strong>与类结合</strong>，注意这几个属性的写法，特别是name和age是使用 <strong>=</strong> 进行赋值的，之后可以在实例中使用</p><pre class=" language-tsx"><code class="language-tsx">class my5 implements gril {    name = 'cs'        age = 45    say() {        console.log(this.name);        return '78'    }}// 类还可以实现多个接口class Car2 implements gril, boy {    name = 'cs'        age = 45    say() {        console.log(this.name);        return '78'    }    boy(){        return 'boy'    }}</code></pre><p>接口之间也可进行继承</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span>  <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="类型注解、类型推断"><a href="#类型注解、类型推断" class="headerlink" title="类型注解、类型推断"></a>类型注解、类型推断</h3><p>类型注解其实就是对一个变量定义了一个类型，当我们需要这个变量的类型的时候，编译器就会提示我们这个变量是什么类型</p><p>类型推断就是不对一个变量声明类型，直接进行赋值，ts会自动推断这个变量应该是什么类型</p><p>这两个的用处就是，当ts能分辨一个变量的类型是什么的时候，我们就不要声明类型；当不能分辨的时候，就需要我们进行类型注解</p><h3 id="函数参数和返回类型注解"><a href="#函数参数和返回类型注解" class="headerlink" title="函数参数和返回类型注解"></a>函数参数和返回类型注解</h3><p>可对函数里面的参数指定类型和默认值</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'21'</span><span class="token punctuation">,</span> b<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'32'</span>    <span class="token keyword">let</span> k<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'14'</span>    <span class="token keyword">return</span> s <span class="token operator">+</span> k <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token string">'cs'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span></code></pre><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><p>在 TypeScript 里，你可以把所有参数收集到一个变量里：<br>剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ <code>...</code>）后面给定的名字，你可以在函数体内使用这个数组。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">info</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span></code></pre><p>当函数<strong>没有返回值</strong>的时候，可指定一个void类型，当函数里面有return语句的时候就会报错</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'void'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当函数<strong>无法返回</strong>的时候，即抛出错误或者出现死循环，可指定一个never类型</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">errfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>当函数的参数是对象的时候，如果需要对类型进行注解，需要</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token keyword">let</span> test4 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">65</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>虽然这样写会很麻烦，但有一定的规则还是好一些的</p><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>函数重载: 函数名相同, 而形参不同的多个函数</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 重载函数声明</span><span class="token keyword">function</span> add <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token keyword">function</span> add <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token comment" spellcheck="true">// 定义函数实现</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 x + y</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> y <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> y <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="特殊类型数组"><a href="#特殊类型数组" class="headerlink" title="特殊类型数组"></a>特殊类型数组</h3><p>当数组里面有多种类型的时候</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> arr1<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'cdl'</span><span class="token punctuation">]</span></code></pre><p>当数组中有对象类型的时候，直接进行定义就会看着很麻烦，所以有一个东西叫 <strong>类型别名：type</strong>  </p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> xiaoJieJies<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> Number <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"刘英"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"谢大脚"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>type Lady <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> Number <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> xiaoJieJies<span class="token punctuation">:</span> Lady<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"刘英"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"谢大脚"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>当然使用类进行定义也可以</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Madam</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> xiaoJieJies<span class="token punctuation">:</span> Madam<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"刘英"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"谢大脚"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="类型别名与接口"><a href="#类型别名与接口" class="headerlink" title="类型别名与接口"></a>类型别名与接口</h3><blockquote><p>类型别名可以直接给类型，比如<code>string</code>，而接口必须代表对象。</p></blockquote><p>比如我们的<code>类型别名</code>可以写出下面的代码：</p><pre class=" language-ts"><code class="language-ts">type Girl1 <span class="token operator">=</span> stirng<span class="token punctuation">;</span></code></pre><p>但是接口就不能这样写，它必须代表的是一个对象，也就是说，你初始化<code>girl</code>的时候，必须写出下面的形式.</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Girl</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  bust<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> girl <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"cs"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  bust<span class="token punctuation">:</span> <span class="token number">94</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>感觉没多大差别</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">greet</span> <span class="token punctuation">{</span>    hei <span class="token operator">=</span> <span class="token string">'cas'</span>    wid<span class="token punctuation">:</span> <span class="token keyword">string</span>    <span class="token comment" spellcheck="true">// 在ts里面可以先指定一个属性的类型，但不确认其值是否应该在实例里存在</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wid <span class="token operator">=</span> width    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hei<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> my8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">greet</span><span class="token punctuation">(</span><span class="token string">'87'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my8: '</span><span class="token punctuation">,</span> my8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// my8:  greet { hei: 'cas', wid: '87' }</span></code></pre><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>ts里面类的继承感觉跟js里面的差别不大，依旧使用 <strong>extends</strong> 关键字</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注意这里重写了父类的move方法</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Slithering..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Galloping..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> sam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token string">"Sammy the Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 父类型引用指向子类型的实例 ==> 多态</span><span class="token keyword">let</span> tom<span class="token punctuation">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token string">"Tommy the Palomino"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sam<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tom<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>其实上面的代码继承就已经使用了重写了，就是对父类的方法的重新定义</p><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>同时ts里面的类的属性也具有 <strong>public、private、protect</strong>  这种修饰符，同时<strong>readonly</strong>也是可以在上面使用的。默认所有属性都是public</p><blockquote><p>public 允许在类的内部和外部被调用.</p><p>private 访问属性的意思是，只允许在类的内部被调用，外部不允许调用</p><p>protected 允许在类内及继承的子类中使用</p></blockquote><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    readonly age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误: 'name' 是私有的.</span></code></pre><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">greet</span> <span class="token punctuation">{</span>    hei <span class="token operator">=</span> <span class="token string">'cas'</span>    <span class="token keyword">private</span> wid<span class="token punctuation">:</span> <span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wid <span class="token operator">=</span> width <span class="token operator">||</span> <span class="token string">'s'</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hei<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">78</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> my8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">greet</span><span class="token punctuation">(</span><span class="token string">'87'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">greet1</span> <span class="token keyword">extends</span> <span class="token class-name">greet</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">'99'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 依旧要符合规则的使用super调用父类的构造函数，这里就是里面的参数必须是一个string类型</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this.wid:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">12</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h4><p>主要是配合private修饰符进行使用，先将一个属性标位private，然后暴露一个getter和setter方法，之后就能预先进行处理或者做些其他的东西</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">greet1</span> <span class="token keyword">extends</span> <span class="token class-name">greet</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> _hello<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>_hello<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this.wid:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">12</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这只是一个属性，不是一个方法</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_hello<span class="token operator">+</span><span class="token string">'2'</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">hello</span><span class="token punctuation">(</span>hello<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_hello <span class="token operator">=</span> hello    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> my9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">greet1</span><span class="token punctuation">(</span><span class="token string">'hello1'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my9: '</span><span class="token punctuation">,</span> my9<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hello12 ，注意这里的调用方式</span></code></pre><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 <code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><pre class=" language-ts"><code class="language-ts">abstract <span class="token keyword">class</span> <span class="token class-name">abs</span> <span class="token punctuation">{</span>    abstract <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">abs1</span> <span class="token keyword">extends</span> <span class="token class-name">abs</span> <span class="token punctuation">{</span>    <span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'78'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> my10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">abs1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my10: '</span><span class="token punctuation">,</span> my10<span class="token punctuation">.</span><span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 78</span></code></pre><h4 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h4><p>类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> point3d<span class="token punctuation">:</span> Point3d <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="联合类型和类型保护"><a href="#联合类型和类型保护" class="headerlink" title="联合类型和类型保护"></a>联合类型和类型保护</h3><p>联合类型，可以认为一个变量可能有两种或两种以上的类型</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Waiter</span> <span class="token punctuation">{</span>  anjiao<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>  say<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>  anjiao<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>  skill<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">judgeWho</span><span class="token punctuation">(</span>animal<span class="token punctuation">:</span> Waiter <span class="token operator">|</span> Teacher<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>但有时候在一个函数里面不能判断这个变量是哪种类型，该用那些方法，所以就需要类型断言</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言就是通过断言的方式确定传递过来的准确值。通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">judgeWho</span><span class="token punctuation">(</span>animal<span class="token punctuation">:</span> Waiter <span class="token operator">|</span> Teacher<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>animal<span class="token punctuation">.</span>anjiao<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>animal as Teacher<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span>animal as Waiter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>还有一些其他的方式，比如 *<em>in/ typeof/ instanseof/  *</em></p><h3 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a><a href="https://www.jspang.com/detailed?id=63#toc380" target="_blank" rel="noopener">函数泛型</a></h3><p>一种对代码的重用方式</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">join</span><span class="token punctuation">(</span>first<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">,</span> second<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"chengsong"</span><span class="token punctuation">,</span> <span class="token string">".info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当我们需要第一个参数的类型为string的时候，第二个参数的类型也要是string，这就需要泛型了</p><p>泛型的定义使用 <code>&lt;&gt;</code>（尖角号）进行定义，使用也需要使用带上<code>&lt;&gt;</code></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> join<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>first<span class="token punctuation">:</span> T<span class="token punctuation">,</span> second<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>join<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"chengsong"</span><span class="token punctuation">,</span> <span class="token string">".info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> al<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>params<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'params: '</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>al<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="多泛型定义"><a href="#多泛型定义" class="headerlink" title="多泛型定义"></a>多泛型定义</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> al<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> P<span class="token operator">></span><span class="token punctuation">(</span>params<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> param2<span class="token punctuation">:</span> P<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'params: '</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>al<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'43'</span><span class="token punctuation">)</span></code></pre><p>当然，泛型也可以进行推断，但一般不进行使用，因为代码的可读性和健壮性都会降低</p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>在定义接口时, 为接口中的属性或方法定义泛型类型<br>在使用接口时, 再指定具体的泛型类型</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IbaseCRUD</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span>  add<span class="token punctuation">:</span> <span class="token punctuation">(</span>t<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span>  getById<span class="token punctuation">:</span> <span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  id<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//id主键自增</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//姓名</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//年龄</span>  <span class="token keyword">constructor</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用接口</span><span class="token keyword">class</span> <span class="token class-name">UserCRUD</span> <span class="token keyword">implements</span> <span class="token class-name">IbaseCRUD</span> <span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>user<span class="token punctuation">,</span> id<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存user'</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> User <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id<span class="token operator">===</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> userCRUD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserCRUD</span><span class="token punctuation">(</span><span class="token punctuation">)</span>userCRUD<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>userCRUD<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">'tom2'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userCRUD<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><h3 id="类中泛型"><a href="#类中泛型" class="headerlink" title="类中泛型"></a>类中泛型</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">SelectGirl</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> girls<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">getGirl</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>girls<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> selectGirl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectGirl</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"大脚"</span><span class="token punctuation">,</span> <span class="token string">"刘英"</span><span class="token punctuation">,</span> <span class="token string">"晓红"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">gril3</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">segr</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">gril3</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> girls<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token function">getGirl</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>girls<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> selectgr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">segr</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'cs'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'js'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>这段代码的意思，就是我们在<code>SelectGirl</code>类中使用了泛型，意思是我不知道我以后要用什么类型，但是我有一个约束条件，这个类型，必须要有一个<code>name</code>属性</p><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>当一个泛型只能是number或string的时候，就需要对这个泛型进行约束，就是继承所需要的几种类型</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">SelectGirl2</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> girls<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token function">getGirl</span><span class="token punctuation">(</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>girls<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间 namespace"></a>命名空间 namespace</h3><p>简单的说，这个就是减少了全局变量的可能带来的错误</p><p>一般可以使用 <strong>export</strong> 导出模块，这样就只有导出的那一个名字是全局的</p><pre class=" language-ts"><code class="language-ts">namespace Shapes <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用namespace进行定义</span>    <span class="token keyword">export</span> namespace Polygons <span class="token punctuation">{</span>        <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这一部分好像需要对comonjs和amd这两个规范进行区分，</p><h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><p>差不多就是对一个外部引入的文件的类型的提示</p><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a><a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html" target="_blank" rel="noopener">tsconfig.json</a></h3><p>用来配置如何对<code>ts</code>文件进行编译</p><p>可使用<code>tsc --init</code> 生成配置文件</p><p>配置了配置文件之后，可通过 <code>tsc</code> 命令运行配置文件和此目录里面的ts文件</p><h4 id="选择编译文件"><a href="#选择编译文件" class="headerlink" title="选择编译文件"></a>选择编译文件</h4><p><code>&quot;files&quot;</code>指定一个包含相对或绝对文件路径的列表。<code>&quot;include&quot;</code>和<code>&quot;exclude&quot;</code>属性指定一个文件glob匹配模式列表。 支持的glob通配符有：</p><ul><li><code>*</code> 匹配0或多个字符（不包括目录分隔符）</li><li><code>?</code> 匹配一个任意字符（不包括目录分隔符）</li><li><code>**/</code> 递归匹配任意子目录</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"demo1.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    // 包含的文件            <span class="token string">"src/**/*"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    // 不包含的文件            <span class="token string">"node_modules"</span><span class="token punctuation">,</span>            <span class="token string">"**/*.spec.ts"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>使用<code>&quot;include&quot;</code>引入的文件可以使用<code>&quot;exclude&quot;</code>属性过滤。 然而，通过 <code>&quot;files&quot;</code>属性明确指定的文件却总是会被包含在内，不管<code>&quot;exclude&quot;</code>如何设置</p><h4 id="compilerOptions属性"><a href="#compilerOptions属性" class="headerlink" title="compilerOptions属性"></a>compilerOptions属性</h4><p>这个就是这个配置文件里面的配置属性</p><blockquote><p>ts-node命令遵循此配置文件</p></blockquote><p><strong>removeComments</strong> 表示是否删除文件里面的注释</p><p><strong>strict</strong> 是都使用严格模式</p><p><strong>noImplicitAny</strong>属性的作用是，允许你的注解类型 any 不用特意表明，即可以隐去any，在严格模式下也不会报错</p><p><strong>strictNullChecks</strong>设置为<code>false</code>,它的意思就是，<strong>不强制检查 NULL 类型。</strong></p><p><strong>outDir</strong> 指定编译后的js文件存放的位置</p><hr><h2 id="vue3-ts"><a href="#vue3-ts" class="headerlink" title="vue3+ts"></a>vue3+ts</h2><p>这一部分就用来记录vue3+ts如何简单的创建和开发一个项目，之前看见了这样做的一个项目，<a href="https://gitee.com/cheng_song/shirakami-haruka-button" target="_blank" rel="noopener">地址</a>，虽然比较简单，但还是简单的知道了如何的进行使用。</p><p><a href="https://www.bilibili.com/video/BV1CK411u75G?from=search&seid=17254476489215804631" target="_blank" rel="noopener">学习地址</a></p><p><a href="https://24kcs.github.io/vue3_study/chapter2/1_type.html#%E6%9E%9A%E4%B8%BE" target="_blank" rel="noopener">视频笔记</a></p><p><a href="https://v3.vuejs.org/guide/typescript-support.html" target="_blank" rel="noopener">vue3官方TS支持</a></p><p>一个建议，如果项目开发团队没有超过3个人，基本没有必要使用ts进行开发</p><h3 id="props参数类型"><a href="#props参数类型" class="headerlink" title="props参数类型"></a><a href="https://vue3js.cn/docs/zh/guide/typescript-support.html#%E6%B3%A8%E9%87%8A%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">props参数类型</a></h3><p>Vue 对定义了 <code>type</code> 的 prop 执行运行时验证。要将这些类型提供给 TypeScript，我们需要使用 <code>PropType</code> 强制转换构造函数</p><p>在组件的props里面传入的参数有时候需要指定其类型，对于这个类型，如果不是默认的几个基本类型，就需要断言进行指定</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> PropType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> string  author<span class="token punctuation">:</span> string  year<span class="token punctuation">:</span> number<span class="token punctuation">}</span><span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String <span class="token punctuation">}</span><span class="token punctuation">,</span>    callback<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Function <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    book<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Object <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>Book<span class="token operator">></span><span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h3><p>有时我们可能需要为 ref 的内部值指定复杂类型。我们可以在调用 ref 重写默认推理时简单地传递一个泛型参数：</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> year <span class="token operator">=</span> ref<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'2020'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// year's type: Ref&lt;string | number></span>year<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2020</span> <span class="token comment" spellcheck="true">// ok!</span></code></pre><p>同理 reactive 也可以，不过一般是一个interface类型定义的数据</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Todos</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    iscomplete<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> todos <span class="token operator">=</span> reactive<span class="token operator">&lt;</span><span class="token punctuation">{</span> todos<span class="token punctuation">:</span> Todos<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>      todos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"cs"</span><span class="token punctuation">,</span> iscomplete<span class="token punctuation">:</span> <span class="token keyword">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> todos1 <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>Todos<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>       id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"cs"</span><span class="token punctuation">,</span> iscomplete<span class="token punctuation">:</span> <span class="token keyword">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or这种方式，我感觉这样更好一点</span><span class="token keyword">let</span> todos3<span class="token punctuation">:</span>Todos <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"cs"</span><span class="token punctuation">,</span> iscomplete<span class="token punctuation">:</span> <span class="token keyword">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="vuex里的使用"><a href="#vuex里的使用" class="headerlink" title="vuex里的使用"></a>vuex里的使用</h3><p>在vuex里面的action或者mutation需要state参数，如果不想将这个参数指定为any的话，就需要从vuex里面导入一些类型进行使用</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> ActionContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>  async <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">:</span> ActionContext<span class="token operator">&lt;</span>UserState<span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> LoginParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> msg <span class="token punctuation">}</span> <span class="token operator">=</span> await <span class="token function">userLogin</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> ERR_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先将token存在storage里面，然后再存在vuex里</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>types<span class="token punctuation">.</span>SET_TOKEN<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token function">setToken</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="vue-router里的使用"><a href="#vue-router里的使用" class="headerlink" title="vue-router里的使用"></a>vue-router里的使用</h3><p>基础的所有路由对象都会有一个类型，需要按照这个类型进行规范</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">,</span> RouteRecordRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> basicRoutes<span class="token punctuation">:</span> AppRouteRecordRaw<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/home/index.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/home/index.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/login/index.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'登陆'</span><span class="token punctuation">,</span>      hideFooter<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      hideHeader<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      hideSidebar<span class="token punctuation">:</span> <span class="token keyword">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>还有一个关于记录滚动的位置的滚动行为 scrollBehavior ，这个方法里面的参数也需要指定类型</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> RouteLocation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">export</span> <span class="token keyword">function</span> scrollBehavior <span class="token punctuation">(</span>to<span class="token punctuation">:</span> RouteLocation<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">:</span> RouteLocation<span class="token punctuation">,</span> savedPosition<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> savedPosition  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> top<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  history<span class="token punctuation">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  scrollBehavior<span class="token punctuation">:</span> scrollBehavior<span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> routes<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ts vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3视频简单记录</title>
      <link href="/2021/02/15/vue3%E8%A7%86%E9%A2%91%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/02/15/vue3%E8%A7%86%E9%A2%91%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>就是对一个vue3的教程视频的简单记录</p><p><a href="https://www.bilibili.com/video/BV14k4y117LL?p=1" target="_blank" rel="noopener">B站视频地址</a></p><h4 id="vue3-diff算法优化"><a href="#vue3-diff算法优化" class="headerlink" title="vue3 diff算法优化"></a>vue3 diff算法优化</h4><p>vue3新增对节点进行patchFlag，当与上次虚拟节点对比的时候，只需要对比带有patchFlag的节点</p><p>还有一些其他的优化方面</p><p>里面的那一个网址是vue3 Template explore的网址</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210215111309144.png" alt="image-20210215111309144" style="zoom:80%;" /><h4 id="vue3组合式api使用"><a href="#vue3组合式api使用" class="headerlink" title="vue3组合式api使用"></a>vue3组合式api使用</h4><p>1.直接在setup里面将所有的逻辑都写在里面，很垃圾</p><p>2.将同一个逻辑所需的数据，方法都写在一个函数里面，并都return出来，然后在setup里面调用这个函数并解构出前面return出的数据、方法。最后统一在setup里面再return出来，之前的一个博客 <a href="https://chengsong.info/2020/10/29/vue3%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/#toc-heading-4">vue3简单使用</a> 里面的最后面有简单记录</p><p>3.类似于2所说，但同一个逻辑的所有数据方法都写在一个外部的js文件里面（记得导入那些需要的组合式api），并使用export default xxx 导出，然后在需要的.vue文件里面使用import导入，然后在setup里面使用，其他的就跟2差不多。这样做主要是更好的具有维护性和扩展性</p><p><strong>记住composition api 和 option api 是可以混在一起使用的</strong> </p><p>比如 可使用 <strong>data</strong> 定义一些响应式数据，也可以使用ref和reactive定义响应式数据</p><p><strong>setup函数是在 beforeCreate钩子之前执行的</strong> ，所以在setup里面不能访问vue2的<strong>this</strong></p><p>setup函数必须是同步的，不能是异步的，即不能在setup的前面加上 <strong>async</strong>，可以在里面调用函数的时候，将那些函数变成异步的</p><h4 id="组合api本质"><a href="#组合api本质" class="headerlink" title="组合api本质"></a>组合api本质</h4><p>可以将这个当做一个 <strong>注入</strong> 的过程，你在setup里面return出去的数据和方法，都会被注入到原来的option api里面，该是data里面的就注入到data里面，该是methods里面的，就注入到methods里面 …… </p><h4 id="reactive和ref"><a href="#reactive和ref" class="headerlink" title="reactive和ref"></a>reactive和ref</h4><h5 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h5><p>vue3使用proxy实现响应式数据    reactive的参数必须是一个自定义的对象或数组，不能是其他的对象，比如说通过 new Data() 创建出一个时间对象参数，默认情况下，修改这个对象，界面不会自动刷新，只能通过重新赋值的方式属性</p><p>可在return的时候通过 <strong>toRefs</strong> api将对象中的每一个属性都转为ref形式</p><h5 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h5><p>一般使用来对简单值的监听，比如number、string这些，在js里面访问的时候需要使用 .value访问，在template里面不需要，因为vue会自动添加.value</p><p>ref的本质还是reactive，当我们给ref传一个值的时候，ref底层会在会自动将ref转为reactive，所以需要 .value进行访问和修改</p><pre><code>ref(18)  -&gt;     reactive({value:18})</code></pre><h5 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h5><p>其实将ref出来的数据和reactive出来的数据简单console一下就会发现这两者其实不同，在ref创建出的数据里面会有一个 <strong>__v_isRef</strong> 的属性进行判断是否为ref，在template里面就是vue通过这个来判断是否添加 .value </p><p>在composition api里面还有 isRef和isRactive两个api判断数据的所属</p><h4 id="递归监听"><a href="#递归监听" class="headerlink" title="递归监听"></a>递归监听</h4><p>默认ref和reactive创造出来的数据都是递归监听（即对象里面包含对象（引用值），里面的对象修改之后也能被监听）</p><p>但递归监听当数据量非常大的时候就会非常消耗性能，因为vue3为了能实现响应式监听，会递归将里面的每一层都包装成proxy对象来实现响应式监听</p><h4 id="非递归监听"><a href="#非递归监听" class="headerlink" title="非递归监听"></a>非递归监听</h4><p>就是只监听第一层，不监听下面的层，即下面的层不会被包装成proxy对象，当下面的对象被修改，而第一层的属性没有修改，就不会触发响应式来修改ui，重新渲染(<strong>记住</strong>，如果第一层的属性被修改了，而下面层的属性也改变了，因为第一层的修改触发ui的修改，所以下面层的修改也会被体现到ui上面来，而不是保持原来的ui渲染不变) </p><p><a href="https://www.bilibili.com/video/BV14k4y117LL?p=16&spm_id_from=pageDriver" target="_blank" rel="noopener">具体看这个视频</a></p><p>主要是通过两个api    <strong>shallowReactive</strong> <strong>shallowRef</strong>     用法跟ref和reactive一样 主要用于数据量比较大的时候才使用</p><p>注意使用<strong>shallowRef</strong> 的时候，vue监听的是.value的变化，并不是第一层的数据变化，所以可以</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>       d<span class="token punctuation">:</span><span class="token punctuation">{</span>        e<span class="token punctuation">:</span><span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>state<span class="token punctuation">.</span>value<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">21</span>    <span class="token comment" spellcheck="true">// 这样的修改不会触发响应式</span>state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 这样的才会</span></code></pre><p>shallowRef 本质上还是调用了shallowRactive</p><p>此外还有一个 <strong>triggerRef</strong> 的api根据传入的数据主动的更新界面</p><pre><code>state.value.b.c = 22triggerRef(state) // 使用方式</code></pre><p>注意没有提供 triggerRactive 这个api</p><h4 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h4><ul><li>使用Vue3的组合API封装的可复用的功能函数</li><li>自定义hook的作用类似于vue2中的mixin技术</li><li>自定义Hook的优势: 很清楚复用功能代码的来源, 更清楚易懂</li></ul><h4 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h4><p>官网说法：返回由 <code>reactive</code> 或 <code>readonly</code> 方法转换成响应式代理的普通对象。这是一个还原方法，可用于临时读取，访问不会被代理/跟踪，写入时也不会触发更改</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">}</span><span class="token keyword">const</span> reactiveFoo <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// reactiveFoo本质上是一个proxy对象，在这个proxy对象引用了foo对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">toRaw</span><span class="token punctuation">(</span>reactiveFoo<span class="token punctuation">)</span> <span class="token operator">===</span> foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 注意使用ref的话，需要使用    toRaw(reactiveFoo.value)</span></code></pre><p>如果这里通过reactiveFoo修改里面的属性，会响应式的变化，但当通过foo修改属性的时候，虽然reactiveFoo的proxy对象里面的数据发生了变化，但界面不会发生变化</p><p>ref/reactive数据类型的特点:<br>每次修改都会被追踪，都会更新UI界面，但是这样其实是非常消耗性能的所以如果我们有一些操作不需要追踪，不需要更新UI界面，那么这个时候，我们就可以通过toRaw方法拿到它的原始数据，对原始数据进行修改，这样就不会被追踪,这样就不会更新UI界面，这样性能就优化了</p><h4 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a>markRaw</h4><p>显式标记一个对象为“永远不会转为响应式代理”，函数返回这个对象本身。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span><span class="token function">reactive</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 如果被 markRaw 标记了，即使在响应式对象中作属性，也依然不是响应式的</span><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h4 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h4><p><code>toRef</code> 可以用来为一个 reactive 对象的属性创建一个 ref。这个 ref 可以被传递并且能够保持响应性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> fooRef <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">)</span>fooRef<span class="token punctuation">.</span>value<span class="token operator">++</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span>state<span class="token punctuation">.</span>foo<span class="token operator">++</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>当您要将一个 prop 中的属性作为 ref 传给组合逻辑函数时，<code>toRef</code> 就派上了用场：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">useSomeFeature</span><span class="token punctuation">(</span><span class="token function">toRef</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h4 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h4><p>把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref ，和响应式对象 property 一一对应。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> stateAsRefs <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*stateAsRefs 的类型如下:{  foo: Ref&lt;number>,  bar: Ref&lt;number>}*/</span><span class="token comment" spellcheck="true">// ref 对象 与 原属性的引用是 "链接" 上的</span>state<span class="token punctuation">.</span>foo<span class="token operator">++</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stateAsRefs<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 注意下面 .value的位置</span>stateAsRefs<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>value<span class="token operator">++</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>当想要从一个组合逻辑函数中返回响应式对象时，用 <code>toRefs</code> 是很有效的，该 API 让消费组件可以 解构 / 扩展（使用 <code>...</code> 操作符）返回的对象，并不会丢失响应性：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useFeatureX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    bar<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 对 state 的逻辑操作</span>  <span class="token comment" spellcheck="true">// 返回时将属性都转为 ref</span>  <span class="token keyword">return</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 可以解构，不会丢失响应性</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFeatureX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      foo<span class="token punctuation">,</span>      bar<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h4 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h4><p><code>customRef</code> 用于自定义一个 <code>ref</code>，可以显式地控制依赖追踪和触发响应，接受一个工厂函数，两个参数分别是用于追踪的 <code>track</code> 与用于触发响应的 <code>trigger</code>，并返回一个一个带有 <code>get</code> 和 <code>set</code> 属性的对象</p><p>在get里面不能发送网络请求，因为请求到数据之后，界面就要刷新，刷新就会又调用get，然后又会刷新，然后无限循环；可以在return的前面发送网络请求，这样就不会循环发送请求</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myRef</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timeout  <span class="token comment" spellcheck="true">// 这里接收一个回调函数，同时track和trigger是实现响应式的关键</span>  <span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 告诉vue需要追踪这个值</span>        <span class="token keyword">return</span> value      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          value <span class="token operator">=</span> newValue          <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 告诉vue触发页面更新，会调用一次上面的get方法</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token function">myRef</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>感觉这个用法虽然高级，但有些麻烦了</p><h4 id="dom-ref"><a href="#dom-ref" class="headerlink" title="dom-ref"></a>dom-ref</h4><p>这里的ref是vue2里面的那个控制dom元素的ref，这里只是记录一下用法</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> box <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里的box就是上面的box，实际上还是 reactive({value:null})</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在渲染完成后, 这个 div DOM 会被赋值给 root ref 对象</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;div/></span>        box<span class="token punctuation">.</span>value<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'fff'</span> <span class="token comment" spellcheck="true">// 使用方式</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>传入一个对象（响应式或普通）或 ref，返回一个原始对象的<strong>只读</strong>代理。一个只读的代理是“深层的”，对象内部任何嵌套的属性也都是只读的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 依赖追踪</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// original 上的修改会触发 copy 上的侦听</span>original<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token comment" spellcheck="true">// 无法修改 copy 并会被警告</span>copy<span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment" spellcheck="true">// warning!</span></code></pre><p>注意const和readonly的区别</p><p>const: 赋值保护，不能变量重新赋值</p><p>readonly: 属性保护，不能属性重新赋值，即对象里面的属性也没法赋值，但const里面的对象属性可以赋值</p><p>还有 <code>isReadonly</code> <code>shallowReadonly</code> 这两个api，作用、用法与上面类似，就不记录了</p><h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h4><p>立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。<a href=""></a></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 也可以停止监听</span><span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 之后</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>感觉vue3的watch用法有了一些改变，当观测的数据是reactive的时候，需要传递一个箭头函数，返回这个reactive里面的值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 这里需要一个箭头函数</span>  <span class="token punctuation">(</span>count<span class="token punctuation">,</span> prevCount<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ... */</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 直接侦听一个ref</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> prevCount<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>后面的主要是关于一些原理的手写实现，现在就不记录了，等后面除了新的东西再记录吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt进一步学习</title>
      <link href="/2021/02/06/Nuxt%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/02/06/Nuxt%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>主要是对B站一个nuxt的学习视频的简单学习记录，记录一下上一个文章里面有些没有说到的点</p><p><a href="https://www.bilibili.com/video/BV13Z4y1T74J?p=5&spm_id_from=pageDriver" target="_blank" rel="noopener">B站视频教程</a></p><h4 id="扩展路由"><a href="#扩展路由" class="headerlink" title="扩展路由"></a>扩展路由</h4><p>nuxt的路由一般是在pages目录里面约定式的生成的，比如pages里面的index.vue文件就会被当成 <strong>/</strong> 路由匹配的组件，但我们也可以使用扩展路由，即在nuxt.config.js文件的router属性里面对路由进行扩展</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">:</span> <span class="token punctuation">{</span>    middleware<span class="token punctuation">:</span> <span class="token string">'auth'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 扩展路由</span>    extendRoutes <span class="token punctuation">(</span>routes<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span>      routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span> <span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 这里的路由就是 /index </span>        component<span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'pages/index.vue'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这里就是pages目录里面的index.vue文件</span>        <span class="token comment" spellcheck="true">// 上面的component引用方式是node的方式，也可使用es的方式 component: ()=>import("@/pages/index.vue")</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><h5 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h5><p>依赖于nuxt的中间件</p><p>有全局中间件（nuxt.config配置middleware ；layout配置；插件配置）和特定中间件（组件独享守卫 middleware ）</p><p>特定中间件</p><pre class=" language-js"><code class="language-js"><span class="token function">middleware</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'middleware pages'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>插件的方式</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span>js<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> app<span class="token punctuation">,</span> redirect <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'插件前置路由守卫'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// app是vue的实例</span>  <span class="token comment" spellcheck="true">// redirect是路由跳转函数</span>  <span class="token comment" spellcheck="true">// 下面的这两个都是全局的路由守卫</span>  app<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 全局前置的守卫</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'vue的钩子进行路由守卫'</span><span class="token punctuation">,</span>to<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 注意这里的跳转只能由redirect进行，不能由next进行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'login'</span> <span class="token operator">||</span> to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'reg'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 这里的name属性是路由文件的别名，nuxt里面就是文件名，嵌套路由的话需要带目录名 如 home-set</span>       <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'login'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 或者 redirect('/login')</span>    <span class="token punctuation">}</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'插件全局后置守卫'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意插件的方式的话，需要在nuxt.config里面的plugin属性里面引入这个插件文件</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'~plugins/router.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><h5 id="后置"><a href="#后置" class="headerlink" title="后置"></a>后置</h5><p>依赖于vue的beforeRouterLeave钩子（这个东西是在组件内部使用）</p><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">vue-router官方网址</a></p><p>可以在路由组件内直接定义以下路由导航守卫：</p><ul><li><code>beforeRouteEnter</code></li><li><code>beforeRouteUpdate</code> (2.2 新增)</li><li><code>beforeRouteLeave</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> bl <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'是否离开'</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span>bl<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h4 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h4><p>就是使用axios进行数据请求，有时候可能需要使用proxy代理一下防止跨域</p><p><a href="https://axios.nuxtjs.org/setup" target="_blank" rel="noopener">nuxt-axios官网</a></p><p>一般直接使用nuxt自己集成的axios模块，有时候可能需要安装一下</p><p><strong>@nuxtjs/axios    @nuxtjs/proxy</strong></p><p>在nuxt.confgi里面的modules里面添加axios</p><pre class=" language-js"><code class="language-js">modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'@nuxtjs/axios'</span><span class="token punctuation">,</span>    <span class="token string">'@nuxtjs/proxy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axios<span class="token punctuation">:</span> <span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启跨域行为</span>    <span class="token comment" spellcheck="true">// prefix: '/api', //baseUrl</span><span class="token punctuation">}</span><span class="token punctuation">,</span>proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 代理</span><span class="token comment" spellcheck="true">// 注意这里是 /api/ 这是nuxt-axios自己规定的方式，有些跟vue-axios不同</span><span class="token string">'/api/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      target<span class="token punctuation">:</span> <span class="token string">'http://example.com'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//代理转发地址</span>      changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>         <span class="token string">'^/api/'</span><span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>代理后的使用方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$axios<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注意使用的时候也要 使用 /api/ </span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> $axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> $axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://api.chengsong.info'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 或者这里直接使用import引入axios进行使用,这里使用了proxy代理</span>    <span class="token comment" spellcheck="true">// const data1 = await axios.get('/api/post', {</span>    <span class="token comment" spellcheck="true">//   params: { id: 2 },</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">// const data2 = await axios({</span>    <span class="token comment" spellcheck="true">//   url: '/api/post',</span>    <span class="token comment" spellcheck="true">//   params: {</span>    <span class="token comment" spellcheck="true">//     id: 1,</span>    <span class="token comment" spellcheck="true">//   },</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> res<span class="token punctuation">:</span>res<span class="token punctuation">,</span>info1<span class="token punctuation">:</span> data<span class="token punctuation">,</span> info2<span class="token punctuation">:</span> data1<span class="token punctuation">.</span>data <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="axios拦截配置"><a href="#axios拦截配置" class="headerlink" title="axios拦截配置"></a>axios拦截配置</h5><p>这里的话主要是通过插件的方式进行使用</p><p>在pugins目录里面创建axios拦截文件，这些具体的api都是nuxt-axios自己有的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 拦截器</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> $axios<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> route<span class="token punctuation">,</span> store <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 基本配置</span>  $axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">10000</span>  <span class="token comment" spellcheck="true">// 请求时拦截</span>  $axios<span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发送请求时的拦截'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// config.header.token = '加token'</span>    <span class="token comment" spellcheck="true">// config.headers.token = store.state.user.token</span>    <span class="token comment" spellcheck="true">// return config</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 响应拦截</span>  $axios<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'响应时的拦截'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// if (res.data.err === 2 &amp;&amp; route.fullPath !== '/login') {</span>    <span class="token comment" spellcheck="true">//   redirect('/login?path=' + route.fullPath)</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token keyword">return</span> res  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 错误处理</span>  $axios<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出现错误'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 处理</span>    <span class="token keyword">return</span> error  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>然后在nuxt.config里面的plugins属性里面引入（注意这里的 <strong>~</strong> 在nuxt默认代表根目录，可在 <a href="https://www.nuxtjs.cn/guide/assets" target="_blank" rel="noopener">资源文件</a> 里面看一下使用方式）</p><pre class=" language-js"><code class="language-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'~plugins/router'</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      src<span class="token punctuation">:</span> <span class="token string">'~plugins/axios'</span><span class="token punctuation">,</span>      ssr<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 开启服务端渲染，不要这个也没啥大事</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><h4 id="loading"><a href="#loading" class="headerlink" title="loading"></a><a href="https://www.nuxtjs.cn/api/configuration-loading" target="_blank" rel="noopener">loading</a></h4><p>默认情况下，Nuxt.js 使用自己的组件来显示路由跳转之间的进度条。</p><p>您可以通过<a href="https://www.nuxtjs.cn/api/configuration-loading" target="_blank" rel="noopener">Configuration 的加载选项</a>全局禁用或自定义它，但也可以通过将 <code>loading</code> 属性设置为 <code>false</code> 来禁用特定页面：</p><p>也可以在nuxt.config里面配置loading，可以配置其颜色，也可以配置成一个特定的组件（这个组件也提供了一下方法进行修改）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 可以设置loading 也可以指定自己的组件</span><span class="token comment" spellcheck="true">// loading: {</span><span class="token comment" spellcheck="true">//   color: 'red',</span><span class="token comment" spellcheck="true">//   height: '3px'</span><span class="token comment" spellcheck="true">// },</span>loading<span class="token punctuation">:</span> <span class="token string">'~components/loading.vue'</span><span class="token punctuation">,</span></code></pre><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a><a href="https://www.nuxtjs.cn/guide/vuex-store" target="_blank" rel="noopener">vuex</a></h4><p>其实感觉吧，这个vuex并没有太多的东西可讲，就一个fetch()方法可能是新的，其他的感觉跟vue-vuex基本没啥大的区别，就简单写一些感觉新的东西吧</p><p>1.使用模块的方式 store目录里面的每个js文件都会转换成状态树，index是主模块，其他的就在modules里面</p><p><strong>state</strong>必须暴露为一个函数，其他的可以是一个对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  counter<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">increment</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>counter<span class="token operator">++</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// todos.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'默认'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      text<span class="token punctuation">,</span>      done<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">remove</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> todo <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 外部使用</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span>list<span class="token comment" spellcheck="true">// 使用子模块的方法</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'todos/add'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code></pre><h4 id="状态持久化和token校验"><a href="#状态持久化和token校验" class="headerlink" title="状态持久化和token校验"></a>状态持久化和token校验</h4><p>持久化的话，如果使用cookie，需要安装一个包<strong>cookie-universal-nuxt</strong> ，并在nuxt.config的modules里面引入</p><pre><code>modules: [        &#39;cookie-universal-nuxt&#39;,],</code></pre><p>然后使用的方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token string">"love_home_token"</span><span class="token comment" spellcheck="true">// 这里的app是vue实例</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setToken</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getToken</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> app<span class="token punctuation">.</span>$cookies<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>token验证的话</p><p>一般登录时同步vuex和cookie，如果用户刷新了，nuxtServerInit钩子会被调用，取出cookie，同步vuex，axios拦截器读取vuex（因为vuex存在内存中，所以速度会比存在磁盘的cookie快），设置token</p><h4 id="ui组件库的使用"><a href="#ui组件库的使用" class="headerlink" title="ui组件库的使用"></a><a href="https://www.cnblogs.com/jofun/p/13234973.html" target="_blank" rel="noopener">ui组件库的使用</a></h4><p>这里以element-ui为例，其实目前nuxt在创建项目的时候就会让你选择一个UI组件库，如果在创建的时候选了，那就直接用就是了，如果没有的话，就使用npm安装一下，在plugins目录里面创建element.js文件（这里是全局引入）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Element <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> locale <span class="token keyword">from</span> <span class="token string">'element-ui/lib/locale/lang/en'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Element<span class="token punctuation">,</span> <span class="token punctuation">{</span> locale <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后在nuxt.config里面的plugins里面引入这个文件并在css里面引入element的css文件</p><pre class=" language-js"><code class="language-js">css<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>  <span class="token comment" spellcheck="true">// 引入全局样式</span><span class="token punctuation">]</span><span class="token punctuation">,</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{</span>src<span class="token punctuation">:</span> <span class="token string">'~plugins/element'</span><span class="token punctuation">,</span> ssr<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ssr:true代表在服务端渲染,客户端不渲染</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><p>如果需要按需引入的话，需要先安装一个插件 <strong>babel-plugin-component</strong> 然后在上面的element.js文件里面按需引入</p><p>同时如果需要在客户端的时候不引入element，则需要对build进行配置</p><pre><code>// nuxt.config.jsbuild: {    transpile: [/^element-ui/],  },</code></pre><h4 id="plugins混入"><a href="#plugins混入" class="headerlink" title="plugins混入"></a>plugins混入</h4><p>就是提一下这个用处，当在对vue实例进行插入的时候，既然我们都拿到Vue实例了，那所有的vue自己的关于全局的东西都能被使用，如全局过滤器（Vue.filter），全局指令（Vue.directive），全局组件（Vue.component），混入mixin（Vue.mixin）这些都能被使用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 全局方法</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">let</span> show <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'全局方法'</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$show <span class="token operator">=</span> show <span class="token comment" spellcheck="true">// 服务端钩子内部不可以使用  服务端this不会指向vue实例</span><span class="token comment" spellcheck="true">// 全局过滤器</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> filters <span class="token keyword">from</span> <span class="token string">'../assets/js/filter.js'</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token operator">></span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> filters<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 全局指令</span><span class="token keyword">import</span> direc1 <span class="token keyword">from</span> <span class="token string">'../assets/js/directives/directive1.js'</span><span class="token keyword">import</span> direc2 <span class="token keyword">from</span> <span class="token string">'../assets/js/directives/directive2.js'</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'direc1'</span><span class="token punctuation">,</span> direc1<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'direc2'</span><span class="token punctuation">,</span> direc2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 全局组件</span><span class="token keyword">import</span> UcButton <span class="token keyword">from</span> <span class="token string">'../components/global/uc-button.vue'</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'uc-button'</span><span class="token punctuation">,</span> UcButton<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 混入methods</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 都会有这个</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">$seo</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">,</span> payload<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        title<span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>          hid<span class="token punctuation">:</span> <span class="token string">'descript'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'keywords'</span><span class="token punctuation">,</span>          content        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="meta信息注入"><a href="#meta信息注入" class="headerlink" title="meta信息注入"></a><a href="https://www.nuxtjs.cn/api/configuration-head" target="_blank" rel="noopener">meta信息注入</a></h4><p>meta简单的说就是一个关于这个网站的主要信息的总结，是说这个网站是在干什么的</p><p>为了爬虫爬取到更多的网页的信息，需要自己定义一下meta里面的内容</p><p>实际上nuxtjs是使用了<a href="https://github.com/nuxt/vue-meta" target="_blank" rel="noopener"><code>vue-meta</code></a> <em>更新应用的</em> <code>头部标签(Head)</code> <em>和</em> <code>html 属性</code></p><p>对于head可以在nuxt.config里面进行统一配置，也可以在一个单独的页面进行特定的配置</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件内部方式</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'晟松'</span><span class="token punctuation">,</span>      meta<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          hid<span class="token punctuation">:</span> <span class="token string">'cs'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'晟松'</span><span class="token punctuation">,</span>          content<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// nuxt.config</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  head<span class="token punctuation">:</span> <span class="token punctuation">{</span>    titleTemplate<span class="token punctuation">:</span> <span class="token string">'同一标题'</span><span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> charset<span class="token punctuation">:</span> <span class="token string">'utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'viewport'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'width=device-width, initial-scale=1'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> hid<span class="token punctuation">:</span> <span class="token string">'description'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'description'</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">'Meta description'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 还可以在这里引入一些js脚本，字体文件之类的</span>      link<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> rel<span class="token punctuation">:</span> <span class="token string">'icon'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'image/x-icon'</span><span class="token punctuation">,</span> href<span class="token punctuation">:</span> <span class="token string">'/favicon.ico'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    script<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>src<span class="token punctuation">:</span> <span class="token string">'外部链接'</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="资源路径"><a href="#资源路径" class="headerlink" title="资源路径"></a>资源路径</h4><p>主要是有时候比如 img 或者其他的什么东西，可能需要找到本地的一个资源，这个时候就需要对路径进行指定</p><p>相对路径 找到一些需要压缩资源 assets目录 &lt;img src=”../assets/xxx.png” alt=””&gt;</p><p>绝对路径 找到无需压缩的资源 static目录 &lt;img src=”/static/bg.jpg” alt=””&gt;    注意这里使用 <strong>/</strong> 开头</p><p>~assets ~代表根</p><p>@代表 src</p><h4 id="typescript支持"><a href="#typescript支持" class="headerlink" title="typescript支持"></a><a href="https://typescript.nuxtjs.org/zh-Hant/guide/introduction" target="_blank" rel="noopener">typescript支持</a></h4><p>可以在使用nuxt项目创建的时候就选择使用typescript，也可以其他方式</p><p>先安装 <strong>@nuxt/typescript-build</strong> 然后在nuxt.config里面的引入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  buildModules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@nuxt/typescript-build'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>之后再建立<strong><code>tsconfig.json</code></strong> 文件</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">"ES2018"</span><span class="token punctuation">,</span>    <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"ESNext"</span><span class="token punctuation">,</span>    <span class="token string">"moduleResolution"</span><span class="token punctuation">:</span> <span class="token string">"Node"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 下面的skip.. 是在一个项目里面新使用ts的时候才需要配置的</span>     <span class="token string">"skipLibCheck"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"lib"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"ESNext"</span><span class="token punctuation">,</span>      <span class="token string">"ESNext.AsyncIterable"</span><span class="token punctuation">,</span>      <span class="token string">"DOM"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>后面还需要创建一个文件，具体的就到官网上去看吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> nuxt B站 axios proxy router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs express koa2初学习</title>
      <link href="/2021/02/05/Nodejs-express-koa2%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/02/05/Nodejs-express-koa2%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>这个文章主要记录一下对nodejs的一个框架express的学习，虽然其实node目前有很多框架，但目前我主要的是在学习前端，后端目前只是写一些简单的接口，为前端进行使用，目前想要学习的框架有两个，一个是目前的express，下一步应该是koa2，为什么目前要先学习express呐，主要是express的社区比较完善，比较完善的能找到一些学习资料和视频，而koa看着好像社区还不太繁荣，所以目前先学着express，等学完之后，再去学习koa2</p><p><a href="https://www.bilibili.com/video/BV1Hz4y1U7i7?from=search&seid=5221341051997279262" target="_blank" rel="noopener">node+express教程</a></p><p><a href="https://www.jspang.com/detailed?id=34" target="_blank" rel="noopener">koa2教程1</a></p><p><a href="https://www.bilibili.com/video/BV11t411k79h?p=43" target="_blank" rel="noopener">koa2教程2</a></p><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>跟着上面的node——express的视频线简单学一些node常用的重要内容，然后看一下express的东西</p><p><strong>模块化</strong> ：nodejs基于commonjs模块化开发的规范，其定义一个js文件就是一个模块</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导出</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>func_name<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 导入</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module_name"</span><span class="token punctuation">)</span></code></pre><p>node的模块类型:</p><ul><li>核心(内置）模块-安装nodejs自带的模块</li><li>第三方模块–需要手动通过(npmlyarn)来进行安装</li><li>自定义模块-开发者自己编写开发</li></ul><p><strong>执行</strong></p><pre><code>node name.js</code></pre><p>注意一下文件路径</p><p><strong>全局变量</strong></p><p>常用的有这下面3个，可以直接在node环境中进行使用</p><ul><li>global:全局变量的宿主(类似于浏览器js中的window对象)，这是一个特殊的对象，称为全局对象(Global Object)，它及其所有属性都可以在程序的任何地方访问</li><li>__filename:当前正在执行的脚本的文件名(完整路径)</li><li>__dirname:当前执行脚本所在的目录绝对路径</li></ul><p>还有一个<a href="http://nodejs.cn/api/process.html#process_process_env" target="_blank" rel="noopener">process</a>的全局变量</p><p>特别是里面的 <strong>process.env</strong> 属性，会返回包含用户环境的对象。常在vue的js文件里面出现进行一些判断</p><h3 id="常用内置模块"><a href="#常用内置模块" class="headerlink" title="常用内置模块"></a>常用内置模块</h3><p><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">官网api介绍</a></p><h4 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span>EOL <span class="token comment" spellcheck="true">// 根据操作系统特定的行末标志。在 LINUX 上是 \n。在 Windows 上是 \r\n。</span>os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查看cpu相关信息</span>os<span class="token punctuation">.</span><span class="token function">hostname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 以字符串的形式返回操作系统的主机名。</span>os<span class="token punctuation">.</span><span class="token function">totalmem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查看总内存</span>os<span class="token punctuation">.</span><span class="token function">freemem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查看空闲内存</span>os<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回一样的操作系统名字。 例如，在 Linux 上返回 'Linux'，在 macOS 上返回 'Darwin'，在 Windows 上返回 'Windows_NT'。</span><span class="token operator">...</span><span class="token punctuation">.</span></code></pre><p>ELO     end of line</p><p>ELF      end of file</p><h4 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h4><p>用于处理文件和目录的路径</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取路径最后一部内容，一般用它来获取文件名称</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span> <span class="token string">'c:/a/b/c/d.htm1 '</span><span class="token punctuation">)</span>l<span class="token operator">/</span> d<span class="token punctuation">.</span>html<span class="token comment" spellcheck="true">//获取目录名，路径最后分隔符部分被忽略</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">'c:/a/b/c/d.html'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// c:/a/b/c</span><span class="token comment" spellcheck="true">//获取路径中文件扩展名</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'c:/a/b/c/d.htm1 '</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// .htm1</span><span class="token comment" spellcheck="true">//给定的路径连接在一起</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// /a/b/c </span><span class="token comment" spellcheck="true">// resolve:模拟cd（切换目录）操作的同时拼接路径,按照参数顺序执行(正反斜杠由node根据系统自动判断)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"a"</span>，<span class="token string">"b"</span>，<span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a/b/c</span>console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">reso1ve</span><span class="token punctuation">(</span><span class="token string">"a"</span>，<span class="token string">"../b"</span>，<span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b/c</span>conso1e<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"/a"</span>，<span class="token string">"b"</span>，<span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// c:/a/b/c</span>……</code></pre><h4 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h4><p><code>url</code> 模块用于处理与解析 UR</p><pre class=" language-text"><code class="language-text">┌────────────────────────────────────────────────────────────────────────────────────────────────┐│                                              href                                              │├──────────┬──┬─────────────────────┬────────────────────────┬───────────────────────────┬───────┤│ protocol │  │        auth         │          host          │           path            │ hash  ││          │  │                     ├─────────────────┬──────┼──────────┬────────────────┤       ││          │  │                     │    hostname     │ port │ pathname │     search     │       ││          │  │                     │                 │      │          ├─┬──────────────┤       ││          │  │                     │                 │      │          │ │    query     │       │"  https:   //    user   :   pass   @ sub.example.com : 8080   /p/a/t/h  ?  query=string   #hash "│          │  │          │          │    hostname     │ port │          │                │       ││          │  │          │          ├─────────────────┴──────┤          │                │       ││ protocol │  │ username │ password │          host          │          │                │       │├──────────┴──┼──────────┴──────────┼────────────────────────┤          │                │       ││   origin    │                     │         origin         │ pathname │     search     │ hash  │├─────────────┴─────────────────────┴────────────────────────┴──────────┴────────────────┴───────┤│                                              href                                              │└────────────────────────────────────────────────────────────────────────────────────────────────┘</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> href <span class="token operator">=</span> <span class="token string">'http://api.chengsong.info?id=1'</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>href<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 解析网址，返回url对象，所以可以直接new一个url对象，后面的true是node自动将后面的query参数转换成对象的形式，方便拿到，如果没有这个true的话就是一个字符串</span><span class="token comment" spellcheck="true">// 结果</span>Url <span class="token punctuation">{</span>  protocol<span class="token punctuation">:</span> <span class="token string">'http:'</span><span class="token punctuation">,</span>  slashes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  auth<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  host<span class="token punctuation">:</span> <span class="token string">'api.chengsong.info'</span><span class="token punctuation">,</span>  port<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  hostname<span class="token punctuation">:</span> <span class="token string">'api.chengsong.info'</span><span class="token punctuation">,</span>  hash<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  search<span class="token punctuation">:</span> <span class="token string">'?id=1'</span><span class="token punctuation">,</span>  query<span class="token punctuation">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">:</span> <span class="token keyword">null</span> prototype<span class="token punctuation">]</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'1'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  pathname<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  href<span class="token punctuation">:</span> <span class="token string">'http://api.chengsong.info/'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将多个地址拼接成一个新的url，还是要注意路径规则,前面的根目录是在端口号后面的那一个斜杠</span>ur1<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> href <span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// http://api.chengsong.info/bar</span></code></pre><h4 id="querystring模块"><a href="#querystring模块" class="headerlink" title="querystring模块"></a>querystring模块</h4><p><code>querystring</code> 模块提供用于解析和格式化 URL 查询字符串的实用工具。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// query字符串转换为对象</span>querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'id=1&amp;name=cs'</span><span class="token punctuation">)</span>querystring<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">'id=1&amp;name=cs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 对象转为query字符串,注意下面的 1 是上面会转成字符串</span>querystring<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'cs'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>querystring<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'cs'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h4><p>对文件进行操作，提供了同步和异步两种对文件的操作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注意读取的数据是Buffer类型的，需要一些转换，或者直接指定读取的类型 如 utf-8</span><span class="token comment" spellcheck="true">// 异步读取</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"异步读取: "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同步读取</span><span class="token keyword">var</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写入数据（覆盖） 追加写 fs.appendFile    如果文件不存在会自动创建</span>fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span> <span class="token string">'要写入的数据'</span><span class="token punctuation">,</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 检测文件是否存在</span><span class="token keyword">let</span> res <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 删除文件</span>fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>获取文件信息</strong></p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">stats.isFile()</td><td align="left">如果是文件返回 true，否则返回 false。</td></tr><tr><td align="left">stats.isDirectory()</td><td align="left">如果是目录返回 true，否则返回 false。</td></tr><tr><td align="left">stats.isBlockDevice()</td><td align="left">如果是块设备返回 true，否则返回 false。</td></tr><tr><td align="left">stats.isCharacterDevice()</td><td align="left">如果是字符设备返回 true，否则返回 false。</td></tr><tr><td align="left">stats.isSymbolicLink()</td><td align="left">如果是软链接返回 true，否则返回 false。</td></tr><tr><td align="left">stats.isFIFO()</td><td align="left">如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。</td></tr><tr><td align="left">stats.isSocket()</td><td align="left">如果是 Socket 返回 true，否则返回 false。</td></tr></tbody></table><h4 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h4><p>这个模块就是用来创建一个web服务器</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">==</span> <span class="token string">'/cs'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cs'</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'蒋晟松'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// express框架提供了 res.send('data') 这个api</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里的req就是客户端请求对象，包含url，query这些的东西</span>    <span class="token comment" spellcheck="true">// 这里的res就是服务器对客户端的响应对象，</span>    <span class="token comment" spellcheck="true">// 设置响应头信息，用于解决响应时中文乱码的问题    res.setHeader('Content-Type','text/html;charset=utf-8')</span>    <span class="token comment" spellcheck="true">// 设置状态码    res.statusCode = 200</span>    <span class="token comment" spellcheck="true">// 发送数据 res.end()</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 启动服务，需要给一个端口</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务启动'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>res.end() 传递的数据只能是字符串，res.send() 可传递对象这些，express会自动将其转为json返回</p><h5 id="静态资源服务器"><a href="#静态资源服务器" class="headerlink" title="静态资源服务器"></a>静态资源服务器</h5><p>客户端请求的每个资源uri地址，作为在本机服务器指定目录中的文件。通过相关模块进行读取文件中数据进行响应给客户端，从而实现静态服务器。</p><pre class=" language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span>    <span class="token keyword">var</span> pathname <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname    <span class="token comment" spellcheck="true">//真的读取这个文件</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'../public'</span> <span class="token operator">+</span> pathname<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注意这个header的设置不能设置到图片数据上面，会出现格式错误</span>            res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html;charset=utf-8'</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'不存在'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>默认情况下，浏览器访问网站的时候会请求一个 /favicon.ico 的图标文件，这就是你的网页的标签里面的小图标，可直接将你的图标放在public目录下面</p><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// get</span><span class="token comment" spellcheck="true">// 主要是使用 query 这个属性</span><span class="token keyword">var</span> <span class="token punctuation">{</span>query<span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><h5 id="post"><a href="#post" class="headerlink" title="post"></a>post</h5><p>表单数据多数为post进行提交到服务器端。需要监听req对象的data事件来获取客户端发送到服务器的数据。如果数据量比较大，无法一次性发送完毕，则客户端会把数据切割后分批次发送给服务器。所以data事件可能会被触发多次，每次触发data事件时，收到的数据只是全部数据的一部分，因此需要做数据的拼接才能得到完整的数据</p><p><strong>特别需要</strong>：注意传来的请求头的格式 是formdata，还是applicationlx-www-form-urlencoded等等</p><pre class=" language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拼接所有数据</span>    body <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 解析参数</span>    body <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置响应头部信息及编码</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html; charset=utf8'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> body<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 输出提交的数据</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"网站名："</span> <span class="token operator">+</span> body<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"网站 URL："</span> <span class="token operator">+</span> body<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 输出表单</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>postHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>nodejs是js的后端运行环境，所以无法使用浏览器的DOM和BOM这些内置api</p><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><h3 id="简单介绍-1"><a href="#简单介绍-1" class="headerlink" title="简单介绍"></a>简单介绍</h3><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>使用express开发的时候需要先在本地安装这个环境</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express -g<span class="token function">npm</span> insatll -g express-generator <span class="token comment" spellcheck="true"># 这一步是4.x版本的问题</span>express --version <span class="token comment" spellcheck="true"># 检测是否安装好了</span><span class="token comment" spellcheck="true"># 创建项目</span>express projectName <span class="token comment" spellcheck="true"># 使用express框架自动创建项目</span><span class="token function">cd</span> projectName<span class="token function">npm</span> <span class="token function">install</span> <span class="token comment" spellcheck="true"># 安装package.json里面的依赖</span><span class="token function">npm</span> start <span class="token comment" spellcheck="true"># 运行项目 实际上是运行 bin目录里面的 www 文件里的http模块</span></code></pre><p>其实也可以将bin目录里面的www文件里的内容直接复制到<strong>app.js</strong>文件里面（主要是里面关于 http模块 的一些代码），然后使用</p><pre class=" language-bash"><code class="language-bash">nodemon app.js <span class="token comment" spellcheck="true"># 可能需要安装nodemon</span></code></pre><p>来方便开发（因为nodemon会自动根据你的更新重新运行项目，npm satrt 试了下没有这个功能） </p><h3 id="创建web服务"><a href="#创建web服务" class="headerlink" title="创建web服务"></a>创建web服务</h3><p>步骤：导入需要使用的包；创建一个web实例；定义运行访问的路由；启动服务</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注意这个路径是可以重复的，但极其不推荐</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里可直接传入对象</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'蒋晟松'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 对页面 abcd, abxcd, ab123cd, 等响应 GET 请求</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/ab*cd'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"/ab*cd GET 请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'正则匹配'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/post'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 其他的put，delete这些都差不多</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>访问地址的匹配规则，代码从上往下执行，只有请求类型和请求路径都匹配上，才会执行对于回调函数</p><h4 id="获取query"><a href="#获取query" class="headerlink" title="获取query"></a>获取query</h4><p>直接通过 <strong>req,query</strong> 这个对象就可获取url里面的query数据</p><h4 id="动态参数传递"><a href="#动态参数传递" class="headerlink" title="动态参数传递"></a>动态参数传递</h4><p>express也支持vue中 <strong>动态路由</strong> 的形式传递参数，传递的参数通过req.params对象获取到</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 必须的路由参数，不传就匹配不上</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// http://localhost:8000/2     { id: '2' }</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可选的路由参数，传不传都行    </span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/:id?'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="静态资源托管"><a href="#静态资源托管" class="headerlink" title="静态资源托管"></a>静态资源托管</h4><p>Express 提供了内置的中间件 <strong>express.static</strong> 来设置静态文件如：图片， CSS, JavaScript 等。</p><p>你可以使用 <strong>express.static</strong> 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：</p><pre><code>app.use(&#39;/images&#39;, express.static(&#39;public/img&#39;));</code></pre><p>前面的 <strong>/images</strong> 是匹配的路径（或称虚拟前缀），后面的public是对应的目录</p><p>访问：<a href="http://localhost:8000/images/1.jpg" target="_blank" rel="noopener">http://localhost:8000/images/1.jpg</a>     得到 public/img目录下面的1.jpg文件</p><p>app.use()    一般写在监听端口之前</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>路由的形式就跟上面的形式差不多</p><h4 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a><a href="https://gitee.com/cheng_song/node-express" target="_blank" rel="noopener">路由模块化</a></h4><p>在使用express创建的项目里面的routes目录里面的就是分开的各种路由并导出</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const dbconfig = require('../util/dbconfig');</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里引入了回调函数</span><span class="token keyword">const</span> cate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controllers/cateController'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* GET home page. */</span><span class="token comment" spellcheck="true">// 对相应路由进行数据请求，并返回,将对应的方法封装到了其他的js文件里面</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> cate<span class="token punctuation">.</span>getcate<span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/post'</span><span class="token punctuation">,</span>cate<span class="token punctuation">.</span>getPostCate<span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>然后在app.js里面require，然后使用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入路由文件</span><span class="token keyword">var</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token keyword">var</span> usersRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/users'</span><span class="token comment" spellcheck="true">// 这里也支持前缀</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> indexRouter<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> usersRouter<span class="token punctuation">)</span></code></pre><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>express中，当一个请求到达的服务器之后，可以在给客户响应之前连续调用<strong>多个</strong>中间件，来对本次请求和返回响应数据进行处理。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>内置中间件    无需npm安装 如 express.static()</li><li>第三方中间件 通过npm安装 如 body-parser</li><li>自定义中间件</li></ul><p>也可分为：</p><ul><li>应用中间件<ul><li>全局使用 app.use()    所有路由都生效</li><li>局部使用 app.请求方法(地址,[中间件…],回调函数)  当前路由生效</li></ul></li><li>路由级别中间件,只是绑定在router上<ul><li>router.use(中间件)</li><li>router.请求方法(地址,[中间件…],回调函数)</li></ul></li></ul><h4 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h4><p><strong>express.static()</strong>    静态资源管理</p><p><strong>express.json</strong>    接收json格式提交的数据</p><pre><code>app.use(express.json())</code></pre><p>其在接收完数据之后，会将数据的对象形式挂载到请求对象的body属性上</p><p><strong>express.urlencoded</strong>    处理post表单提交的数据</p><pre><code>app.use(express.urlencoded({ extended: false }))</code></pre><p>其在接收完数据之后，也会将数据的对象形式挂载到请求对象的body属性上</p><p>上面两个需要的express版本需要&gt;=4.16.0    所以会有一些兼容性的问题</p><p>上面两个不会出现覆盖的问题，因为传递的数据只会是一种格式</p><ul><li><code>extended: false</code>：表示使用系统模块querystring来处理，会剔除传递过来的方法和对象，也是官方推荐的</li><li><code>extended: true</code>：表示使用第三方模块qs来处理</li></ul><hr><h4 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h4><p>以body-parser为例</p><p>使用前需要安装</p><pre><code>npm install -S body-parser</code></pre><p>然后在要使用的文件里面引入，并使用app.use()调用，然后就行了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><hr><h4 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h4><p>自定义中间件，其本质就是定义一个处理请求的函数，只是此函数中除了有request和response参数外还必须包含一个next参数，此参数作用让中间件能够让流程向下执行下去直到匹配到的路由中发送响应给客户端。也可以通过给request对象添加属性来进行中间件数据的向下传递</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myfn</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next    ……    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 中间件最后一句必须执行此语句，进行放行</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>myfn<span class="token punctuation">)</span></code></pre><p>在整个请求链路中，所有中间件与最终路由共用一份req和res</p><p>注意上面的next() 有可能与异步代码发生冲突，所以注意位置</p><h4 id="异常中间件"><a href="#异常中间件" class="headerlink" title="异常中间件"></a>异常中间件</h4><p>作用:专门用来捕获整个项目发生的异常错误，从而防止项目异常崩溃的问题产生(友好显示异常)。</p><p>格式:错误级别中间件的函数参数中，必须有四个形参，分别是(err,req,res , next)</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/err'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'发生错误'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'error:'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// error:发生错误</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="404中间件"><a href="#404中间件" class="headerlink" title="404中间件"></a>404中间件</h4><p>如果所有的路由都匹配不上，即转到这个页面</p><pre><code>app.use((req, res, next) =&gt; {    res.status(404).send(&#39;404&#39;)})</code></pre><p>上面两个中间件的app.use() 都需要放在代码最下面，不然会使代码产生错误</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>使用 <strong>cookie-parser</strong> 这个中间件向 Node.js 服务器发送 cookie 信息，需要先安装</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 服务端通过req获取cookie信息</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Cookies: "</span> <span class="token operator">+</span> util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置cookie，并包括过期时间。如果没有设置时间，则默认在会话期间有效</span>    res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>maxAge<span class="token punctuation">:</span><span class="token number">86400</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>因为cookie是存放在客户端里的，所以会有被修改的风险，所以需要存放在服务端的session，然后在cookie里面存一个session的id</p><p>使用 <strong>cookie-session</strong> 这个中间件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-session'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'sessionId'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 这就是存在cookie里的cookie名</span>    secret<span class="token punctuation">:</span><span class="token string">'cscscscsca'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 这的secret是对sessionid进行加密，防止伪造</span>    maxAge<span class="token punctuation">:</span><span class="token number">20</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span>    rolling<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 让时间滚动刷新</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        req<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">// 这里就获取到session值</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> cookie<span class="token punctuation">:</span> <span class="token string">'cookie页面'</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'no cookie of count'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 这里就创建一个session值</span>        req<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>数据库的类型这里就先记录一个mysql吧</p><p>需要安装一个mysql的中间件，然后进行连接，进行crud</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//连接mysql数据库的文件</span><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//数据库配置</span>    config<span class="token punctuation">:</span> <span class="token punctuation">{</span>        host<span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 数据库的域名和端口</span>        port<span class="token punctuation">:</span> <span class="token string">"3306"</span><span class="token punctuation">,</span>        user<span class="token punctuation">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">,</span>        database<span class="token punctuation">:</span> <span class="token string">"exapp"</span>    <span class="token comment" spellcheck="true">// 数据库名</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 连接数据库，使用mysql的连接池</span>    <span class="token comment" spellcheck="true">// 连接池的对象</span>    sqlConnect<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>sql<span class="token punctuation">,</span> sqlArr<span class="token punctuation">,</span> callBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每一次连接查询完后都需要关闭连接</span>        pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> conn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 事件驱动回调,执行数据库操作</span>            conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> sqlArr<span class="token punctuation">,</span> callBack<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 释放连接</span>            conn<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 操纵user信息的promise回调</span>    asyncSqlconnect<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>asyncSql<span class="token punctuation">,</span> sqlArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> conn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库连接"</span><span class="token punctuation">,</span> asyncSql<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>asyncSql<span class="token punctuation">,</span> sqlArr<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 将异步操作的结果作为参数传递出去</span>                            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 释放连接</span>                    conn<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"catch"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> dbconfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../util/dbconfig'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token string">"select * from post where cate_id=?"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从res里面的query参数里传入的查询参数,这里的sqlArr是要去数据库里面进行查询的</span><span class="token keyword">let</span> sqlArr <span class="token operator">=</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> callBack <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"查询出错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 发送到页面</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                list<span class="token punctuation">:</span> data<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>dbconfig<span class="token punctuation">.</span><span class="token function">sqlConnect</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> sqlArr<span class="token punctuation">,</span> callBack<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>需要用到 <a href="https://blog.csdn.net/kaelyn_X/article/details/78822006?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=c4312e53-ba8d-4a0e-a632-cb3429f8bd82&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" target="_blank" rel="noopener"><strong>multer</strong></a> 中间件，需要安装</p><p><a href="https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md" target="_blank" rel="noopener">multer-github</a></p><p>Multer 会添加一个 <code>body</code> 对象 以及 <code>file</code> 或 <code>files</code> 对象 到 express 的 <code>request</code> 对象中。 <code>body</code> 对象包含表单的文本域信息，<code>file</code> 或 <code>files</code> 对象包含对象表单上传的文件信息</p><p><strong>注意</strong>: Multer 不会处理任何非 <code>multipart/form-data</code> 类型的表单数据。所以xxx-urlencode这些还是使用body-parser吧</p><p>前端使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。</p><p>每个文件具有下面的信息:</p><table><thead><tr><th>Key</th><th>Description</th><th>Note</th></tr></thead><tbody><tr><td><code>fieldname</code></td><td>Field name 由表单指定</td><td></td></tr><tr><td><code>originalname</code></td><td>用户计算机上的文件的名称</td><td></td></tr><tr><td><code>encoding</code></td><td>文件编码</td><td></td></tr><tr><td><code>mimetype</code></td><td>文件的 MIME 类型</td><td></td></tr><tr><td><code>size</code></td><td>文件大小（字节单位）</td><td></td></tr><tr><td><code>destination</code></td><td>保存路径</td><td><code>DiskStorage</code></td></tr><tr><td><code>filename</code></td><td>保存在 <code>destination</code> 中的文件名</td><td><code>DiskStorage</code></td></tr><tr><td><code>path</code></td><td>已上传文件的完整路径</td><td><code>DiskStorage</code></td></tr><tr><td><code>buffer</code></td><td>一个存放了整个文件的 <code>Buffer</code></td><td><code>MemoryStorage</code></td></tr></tbody></table><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// upload.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// dest: 'uploads/' 最简单的方式，只指定一下存储的位置</span>    <span class="token comment" spellcheck="true">// 这里的storage是控制文件存储在哪里，这里是存在磁盘上，还有存在内存里的，但不使用</span>    storage<span class="token punctuation">:</span> multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        destination<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里是地址</span>            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'./uploads/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 用于确定存储在上面目录里的文件的文件名</span>        filename<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里对图片名加上时间戳</span>            <span class="token keyword">var</span> changedName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">;</span>            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> changedName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单个文件上传，注意在这里使用了中间件</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/single'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">'singleFile'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// req.file 是 `singleFile` 文件的信息</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        code<span class="token punctuation">:</span> <span class="token string">'0000'</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">'single'</span><span class="token punctuation">,</span>        originalname<span class="token punctuation">:</span> req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>originalname<span class="token punctuation">,</span>        path<span class="token punctuation">:</span> req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>path    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多个文件上传，注意在这里使用了中间件</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/multer'</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">'multerFile'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// req.files 是 `multerFile` 文件数组的信息</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        fileList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            originalname<span class="token punctuation">:</span> elem<span class="token punctuation">.</span>originalname        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        code<span class="token punctuation">:</span> <span class="token string">'0000'</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">'multer'</span><span class="token punctuation">,</span>        fileList<span class="token punctuation">:</span> fileList    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//app.js引入路由</span><span class="token keyword">const</span> multerUpload <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用路由</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> multerUpload<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果你需要处理一个只有文本域的表单，你应当使用 <code>.none()</code>:</p><pre><code>var express = require(&#39;express&#39;)var app = express()var multer  = require(&#39;multer&#39;)var upload = multer()app.post(&#39;/profile&#39;, upload.none(), function (req, res, next) {  // req.body 包含文本域})</code></pre><p>还有一些其他的东西就不记录了，需要的时候看文档就行</p><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>前后端分离式开发需要进行数据交互，传输的数据被偷窥、被抓包、被伪造时有发生，需要设计一套比较安全的API接口方案</p><p>并不是所有的接口都需要考虑安全的，有些接口是公开的，任何人只要知道地址都可以调用，对于一些项目中需要用户登录才能访问的接口才需要考虑安全问题。</p><p>一般解决的方案有以下几类:</p><ul><li>token令牌认证[jwt   json web token]</li><li>AK (app key)&amp;SK (secret key)【用户名&amp;密码】</li><li>时间戳超时验证+签名算法字符串</li><li>URL签名(算法，非对称算法)·数据脱敏(防范数据库数据泄露)</li><li>HTTPS<ul><li>数字证书(防运营商)</li></ul></li><li>iP黑/白名单(服务器层面的限制，apache、nginx)</li><li>oAuth2.0</li></ul><p>以jwt为例</p><h4 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h4><p>使用JWT进行鉴权的工作流程如下(重点):</p><ul><li>用户使用用户名密码来请求服务器</li><li>服务器进行验证用户的信息(查数据库)</li><li>服务器通过验证发送给用户一个token(令牌)</li><li>客户端存储token (Vuex+localStorage)，并在每次请求时附送上这个token值</li><li>服务端验证token值，并返回数据</li></ul><p>jwt由 头部、载荷、签名三部分构成</p><p>在nodejs里面使用jwt的话，需要安装一个中间件</p><pre><code>npm install jsonwebtoken -S</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> secret <span class="token operator">=</span> <span class="token string">'token'</span><span class="token keyword">const</span> Token <span class="token operator">=</span> <span class="token punctuation">{</span>  encrypt<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//data需加密数据，time到期时间</span>    <span class="token comment" spellcheck="true">// secret加密密钥，expiresIn到期时间，issuer发行人</span>    <span class="token keyword">return</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">{</span>expiresIn<span class="token punctuation">:</span>time<span class="token punctuation">,</span>issuer<span class="token punctuation">:</span><span class="token string">'cs'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  decrypt<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        token<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        id<span class="token punctuation">:</span>data<span class="token punctuation">.</span>id      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        token<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span>e      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Token<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Token <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/token'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//code……</span><span class="token keyword">const</span> token <span class="token operator">=</span> Token<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'15d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将user.id加密，设置有效期15天，返回token</span><span class="token comment" spellcheck="true">//code……</span><span class="token comment" spellcheck="true">//解密</span><span class="token keyword">let</span> data <span class="token operator">=</span> Token<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>authorization<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将请求头的token取出解密</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//有效token</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无效token</span><span class="token punctuation">}</span></code></pre><p>注意前端网络请求的请求头需要包含一个属性 <strong>authorization</strong> 来存储token</p><hr><h2 id="koa2"><a href="#koa2" class="headerlink" title="koa2"></a>koa2</h2><p>主要是对B站的一个koa2的教程的简单记录</p><p><a href="https://www.koajs.com.cn/" target="_blank" rel="noopener">koa2官网</a></p><p>主要是前面的express都是使用回调函数来进行开发，写多了是在是有一些难受，同时还有回调嵌套，同步调用callback返回的数据，带来不一致性等，所以出现了koa框架，此外还有一个阿里的基于koa的企业级框架<a href="https://eggjs.org/zh-cn/intro/egg-and-koa.html" target="_blank" rel="noopener">egg</a>，但目前不去管</p><h3 id="简单介绍-2"><a href="#简单介绍-2" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>因为koa里面使用了async/await 所以node的版本需要高于8</p><h4 id="初始化项目-1"><a href="#初始化项目-1" class="headerlink" title="初始化项目"></a>初始化项目</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 需要先自己创建一个目录，然后在这个目录里面进行创建koa项目</span><span class="token function">npm</span> init -y <span class="token comment" spellcheck="true"># 创建pakcage.json</span><span class="token function">npm</span> <span class="token function">install</span> koa --save</code></pre><p>然后在里面创建 <strong>app.js</strong> 文件，其实可以在 <strong>pakcage.json</strong> 里面的main属性里看见</p><p>之后我们的代码就是在app.js里面写的了</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 代码示例</span><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在ctx里面包含了express的req和res</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用body属性返回数据</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'hello koa2'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app start'</span><span class="token punctuation">)</span></code></pre><h3 id="路由-1"><a href="#路由-1" class="headerlink" title="路由"></a>路由</h3><p>这里需要安装 <strong><a href="https://github.com/koajs/router/blob/HEAD/API.md" target="_blank" rel="noopener">koa-router</a></strong> ，然后在文件里面引入并使用</p><pre><code>npm i @koa/router</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@koa/router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ctx.router available</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 还能这样写</span>router    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ctx.body = 'Hello World!'</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'ca'</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 加载路由中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 启动路由</span>  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 根据ctx.status自动设置响应头</span></code></pre><p>还有一个 <strong>router.prefix(‘api’)</strong> 会为当前路由文件的所有路由都添加一个api的前缀</p><h4 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h4><p>可以直接在ctx里面获取，也可使用ctx里面的request获取</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取get值，这里的是对象的形式</span><span class="token keyword">let</span> query <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query<span class="token comment" spellcheck="true">// 还有字符串形式的query     ctx.querystring</span><span class="token comment" spellcheck="true">// 获取url</span><span class="token keyword">let</span> url <span class="token operator">=</span> ctx<span class="token punctuation">.</span>url……</code></pre><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/users/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 获取路由的参数</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//  /users/a        { id: 'a' }</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>创建一个user.js文件，然后在里面编写路由，之后引入到app.js里面</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// user.js</span><span class="token keyword">const</span> Router <span class="token operator">=</span> require <span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">'api'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">"这是用户操作首页"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">"用户注册接口"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span>router<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入模块</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./appApi/user.js'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 装载所有子路由</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 加载路由中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="中间件-1"><a href="#中间件-1" class="headerlink" title="中间件"></a>中间件</h3><p>其定义跟上面express的中间件差不多，都是在匹配路由之前或完成之后做的一系列操作</p><p>感觉用法也跟express差不多</p><p>但有一个注意点，koa的中间件执行顺序是洋葱型的，即路由的函数执行完之后，在 next() 后面的代码会继续执行<img src="https://camo.githubusercontent.com/d80cf3b511ef4898bcde9a464de491fa15a50d06/68747470733a2f2f7261772e6769746875622e636f6d2f66656e676d6b322f6b6f612d67756964652f6d61737465722f6f6e696f6e2e706e67" alt="img" style="zoom:80%;" /></p><h4 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 感觉这个有一些特别</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cs'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 配置路由</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ctx.body = 'Hello World!'</span>        <span class="token comment" spellcheck="true">// ctx.body = { a: 'ca' }</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> ctx<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>只会是这个路由匹配到之后，这个中间件才会运行</p><h4 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h4><p>注意在koa里面，中间件会先于路由执行</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前路由完成之后，继续向下匹配</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">404</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'404页面'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'路由被匹配上了'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="post提交数据"><a href="#post提交数据" class="headerlink" title="post提交数据"></a>post提交数据</h3><p>需要使用 <strong>koa-bodyparser</strong>  这个中间件，需要安装，然后使用，注意这个不能得到formdata的数据，其实可以直接在koa2里面使用koa-body，能直接处理多种数据上传（包括文件上传，表单上传等）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> ctx <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过这个来获取post的表单里面的数据，注意其格式是</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p><strong>koa-static</strong> 中间件</p><p>先安装，然后使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> serve <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-static'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这里就指定静态资源目录是static目录</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// app.use(__dirname+'/static') 绝对地址的方式</span><span class="token comment" spellcheck="true">// app.use(serve('public')) 还能配置多个静态资源目录</span></code></pre><p>使用示例</p><p>如</p><p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210304162710544.png" alt="image-20210304162710544"></p><p>然后进行访问 <strong><a href="http://localhost:3000/my.txt" target="_blank" rel="noopener">http://localhost:3000/my.txt</a></strong> 就能得到这个静态资源</p><p>当得到一个网址的时候，会首先去static目录里面找有没有这个文件，然后找到就返回这个文件，没有就继续 next 向下匹配</p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>会使用到一个中间件 <strong><a href="http://www.ptbird.cn/koa-body.html" target="_blank" rel="noopener">koa-body</a></strong> ，需要安装，然后配置一些东西，好像也可以直接使用这个替代上面的 koa-bodyparser 来获取表单数据，直接一个中间件处理两种数据</p><h4 id="koa-body-的基本参数"><a href="#koa-body-的基本参数" class="headerlink" title="koa-body 的基本参数"></a><code>koa-body</code> 的基本参数</h4><table><thead><tr><th align="left">参数名</th><th align="left">描述</th><th align="left">类型</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">patchNode</td><td align="left">将请求体打到原生 node.js 的<code>ctx.req</code>中</td><td align="left">Boolean</td><td align="left"><code>false</code></td></tr><tr><td align="left">patchKoa</td><td align="left">将请求体打到 koa 的 <code>ctx.request</code> 中</td><td align="left">Boolean</td><td align="left"><code>true</code></td></tr><tr><td align="left">jsonLimit</td><td align="left">JSON 数据体的大小限制</td><td align="left">String / Integer</td><td align="left"><code>1mb</code></td></tr><tr><td align="left">formLimit</td><td align="left">限制表单请求体的大小</td><td align="left">String / Integer</td><td align="left"><code>56kb</code></td></tr><tr><td align="left">textLimit</td><td align="left">限制 text body 的大小</td><td align="left">String / Integer</td><td align="left"><code>56kb</code></td></tr><tr><td align="left">encoding</td><td align="left">表单的默认编码</td><td align="left">String</td><td align="left"><code>utf-8</code></td></tr><tr><td align="left">multipart</td><td align="left">是否支持 <code>multipart-formdate</code> 的表单</td><td align="left">Boolean</td><td align="left"><code>false</code></td></tr><tr><td align="left">urlencoded</td><td align="left">是否支持 <code>urlencoded</code> 的表单</td><td align="left">Boolean</td><td align="left"><code>true</code></td></tr><tr><td align="left">text</td><td align="left">是否解析 <code>text/plain</code> 的表单</td><td align="left">Boolean</td><td align="left"><code>true</code></td></tr><tr><td align="left">json</td><td align="left">是否解析 <code>json</code> 请求体</td><td align="left">Boolean</td><td align="left"><code>true</code></td></tr><tr><td align="left">jsonStrict</td><td align="left">是否使用 json 严格模式，<code>true</code> 会只处理数组和对象</td><td align="left">Boolean</td><td align="left"><code>true</code></td></tr><tr><td align="left">formidable</td><td align="left">配置更多的关于 <code>multipart</code> 的选项</td><td align="left">Object</td><td align="left"><code>{}</code></td></tr><tr><td align="left">onError</td><td align="left">错误处理</td><td align="left">Function</td><td align="left"><code>function(){}</code></td></tr><tr><td align="left">stict</td><td align="left">严格模式,启用后不会解析 <code>GET, HEAD, DELETE</code>请求</td><td align="left">Boolean</td><td align="left"><code>true</code></td></tr></tbody></table><h4 id="formidable-的相关配置参数"><a href="#formidable-的相关配置参数" class="headerlink" title="formidable 的相关配置参数"></a><code>formidable</code> 的相关配置参数</h4><table><thead><tr><th align="left">参数名</th><th align="left">描述</th><th align="left">类型</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">maxFields</td><td align="left">限制字段的数量</td><td align="left">Integer</td><td align="left"><code>1000</code></td></tr><tr><td align="left">maxFieldsSize</td><td align="left">限制字段的最大大小</td><td align="left">Integer</td><td align="left"><code>2 * 1024 * 1024</code></td></tr><tr><td align="left">uploadDir</td><td align="left">文件上传的文件夹</td><td align="left">String</td><td align="left"><code>os.tmpDir()</code></td></tr><tr><td align="left">keepExtensions</td><td align="left">保留原来的文件后缀</td><td align="left">Boolean</td><td align="left"><code>false</code></td></tr><tr><td align="left">hash</td><td align="left">如果要计算文件的 hash，则可以选择 <code>md5/sha1</code></td><td align="left">String</td><td align="left"><code>false</code></td></tr><tr><td align="left">multipart</td><td align="left">是否支持多文件上传</td><td align="left">Boolean</td><td align="left"><code>true</code></td></tr><tr><td align="left">onFileBegin</td><td align="left">文件上传前的一些设置操作</td><td align="left">Function</td><td align="left"><code>function(name,file){}</code></td></tr></tbody></table><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js</span><span class="token keyword">const</span> koaBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-body'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token function">koaBody</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        multipart<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//支持文件上传</span>        formidable<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里还有一些其他的配置，需要时去官网文档看</span>            maxFileSize<span class="token punctuation">:</span> <span class="token number">2000</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置上传文件大小最大限制，默认2M</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><p>然后创建一个js文件专门处理文件上传</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// upload.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> uploadimg <span class="token operator">=</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> remotefilePath <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建可读流，同时在ctx.request.files里面选出属性名为file的文件的path创建流</span>        <span class="token keyword">const</span> reader <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 创建一个文件保存在哪里的路径</span>        <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> filePath <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../upload'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token comment" spellcheck="true">// 这就是返回给前端进行图片访问的url，需要配合前面设置的静态资源目录路径</span>        remotefilePath <span class="token operator">=</span> <span class="token template-string"><span class="token string">`http://127.0.0.1/upload/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token comment" spellcheck="true">// 创建可写流，即保存文件</span>        <span class="token keyword">const</span> upStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 可读流通过管道写入可写流</span>        reader<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>upStream<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> remotefilePath<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> uploadimg</code></pre><p>之后就可以用了</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// api.js</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./upload'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/uploadImg'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> imgUrl <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">upload</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>            data<span class="token punctuation">:</span> imgUrl<span class="token punctuation">,</span>            message<span class="token punctuation">:</span> <span class="token string">'文件上传成功'</span><span class="token punctuation">,</span>            code<span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>            data<span class="token punctuation">:</span> imgUrl<span class="token punctuation">,</span>            message<span class="token punctuation">:</span> <span class="token string">'文件上传失败'</span><span class="token punctuation">,</span>            code<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> route</code></pre><h4 id="另一种配置"><a href="#另一种配置" class="headerlink" title="另一种配置"></a><a href="http://www.ptbird.cn/koa-body-diy-upload-dir-and-filename.html" target="_blank" rel="noopener">另一种配置</a></h4><p>当然，koa-body给我们提供了相应的接口，让我么可以直接在配置的时候，就能对文件进行存储和重命名，主要是使用 <strong>onFileBegin</strong> 这个属性，具体的配置就看其他大佬写的吧</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> koaBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-body'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token function">koaBody</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        multipart<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//支持表单上传</span>        formidable<span class="token punctuation">:</span> <span class="token punctuation">{</span>            maxFileSize<span class="token punctuation">:</span> <span class="token number">2000</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置上传文件大小最大限制，默认2M</span>            uploadDir<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            onFileBegin<span class="token punctuation">:</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> file<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 获取文件后缀</span>              <span class="token keyword">const</span> ext <span class="token operator">=</span> <span class="token function">getUploadFileExt</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 最终要保存到的文件夹目录</span>              <span class="token keyword">const</span> dirName <span class="token operator">=</span> <span class="token function">getUploadDirName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">const</span> dir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`public/upload/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dirName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 检查文件夹是否存在如果不存在则新建文件夹</span>              <span class="token function">checkDirExist</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 获取文件名称</span>              <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token function">getUploadFileName</span><span class="token punctuation">(</span>ext<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 重新覆盖 file.path 属性</span>              file<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>              app<span class="token punctuation">.</span>context<span class="token punctuation">.</span>uploadpath <span class="token operator">=</span> app<span class="token punctuation">.</span>context<span class="token punctuation">.</span>uploadpath <span class="token operator">?</span> app<span class="token punctuation">.</span>context<span class="token punctuation">.</span>uploadpath <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>              app<span class="token punctuation">.</span>context<span class="token punctuation">.</span>uploadpath<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dirName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><p>虽然感觉这样没有太大的区别，自由度没有上面的那种那么高</p><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>安装 <strong>koa2-cors</strong> 中间件<br>在koa2里解决跨域的中间件叫koa2-cors，我们先进入service文件夹，然后直接使用npm来进行安装。</p><pre><code>npm install --save koa2-cors</code></pre><p>安装完成后，记得要在service/index.js文件中引入和注册（使用）一下中间件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2-cors'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>之后就能跨域了</p><h3 id="cookie-1"><a href="#cookie-1" class="headerlink" title="cookie"></a>cookie</h3><pre class=" language-js"><code class="language-js">ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>获得 cookie 中名为 <code>name</code> 的值，<code>options</code> 为可选参数</p><pre class=" language-js"><code class="language-js">ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">)</span>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'cookie'</span><span class="token punctuation">,</span> <span class="token string">'setCookie'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>maxAge<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>设置 cookie 中名为 <code>name</code> 的值，<code>options</code> 为可选参数：</p><ul><li><code>maxAge</code> 一个数字，表示 Date.now()到期的毫秒数</li><li><code>signed</code> 是否要做签名</li><li><code>expires</code> cookie有效期</li><li><code>path</code>cookie 的路径，默认为 <code>/&#39;</code> ，就是可访问这个cookie的路径</li><li><code>domain</code> cookie 的域，默认当前域下面所有的页面都能访问</li><li><code>secure</code> false 表示 cookie 通过 HTTP 协议发送，true 表示 cookie 通过 HTTPS 发送。</li><li><code>httpOnly</code> true 表示 cookie 只能通过 HTTP 协议发送</li><li><code>overwrite</code> 一个布尔值，表示是否覆盖以前设置的同名的Cookie（默认为false）。 如果为true，在设置此cookie时，将在同一请求中使用相同名称（不管路径或域）设置的所有Cookie将从Set-Cookie头部中过滤掉。</li></ul><p>注意：Koa 使用了 Express 的 <a href="https://github.com/jed/cookies" target="_blank" rel="noopener">cookies</a> 模块，options 参数只是简单地直接进行传递。</p><p>而且在 cookie 里面有一个bug或特性，不能直接设置中文，会出现错误。</p><p>只能将中文转为base64的格式进行存储，在使用的时候再转回来</p><pre class=" language-js"><code class="language-js">ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'cs'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token string">'晟松'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'cs'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>但好像这里面的Buffer已经被弃用了，所以能不用就不用</p><h3 id="session-1"><a href="#session-1" class="headerlink" title="session"></a><a href="https://github.com/koajs/session#readme" target="_blank" rel="noopener">session</a></h3><p>需要先安装 <strong>koa-session</strong> 的中间件</p><p>然后进行配置使用，直接使用  <strong>ctx.seesion</strong> 进行访问和设置</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'some secret hurr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cookie的签名，就是对cookie的一个加密值，可自行设定</span><span class="token keyword">const</span> CONFIG <span class="token operator">=</span> <span class="token punctuation">{</span>  key<span class="token punctuation">:</span> <span class="token string">'koa.sess'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// cookie名</span>  maxAge<span class="token punctuation">:</span> <span class="token number">86400000</span><span class="token punctuation">,</span>  autoCommit<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   overwrite<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  httpOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   signed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   rolling<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 每次访问都重新设置session</span>  renew<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   secure<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 只能https进行设置和访问session，一般开发时设成false</span>  sameSite<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span>CONFIG<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ctx <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ignore favicon</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/favicon.ico'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 直接使用ctx.seesion进行访问</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>views <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>views <span class="token operator">=</span> <span class="token operator">++</span>n<span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token string">' views'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>这里以 <a href="https://blog.csdn.net/bbsyi/article/details/86477959" target="_blank" rel="noopener">mysql </a>为例，感觉这里跟上面的express使用mysql差不多，反正在npm里面都是同一个中间件</p><p>需要先安装mysql</p><pre><code>npm install mysql --save</code></pre><p>然后创建一个配置文件，在配置文件里面存放数据相关的东西</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设置配置文件</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 启动端口</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 数据库配置</span>    database<span class="token punctuation">:</span> <span class="token punctuation">{</span>        DATABASE<span class="token punctuation">:</span> <span class="token string">'exapp'</span><span class="token punctuation">,</span>        USERNAME<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        PASSWORD<span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>        PORT<span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>        HOST<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config</code></pre><p>然后在一个文件里面进行数据库连接</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../uitl/sqlConfig'</span><span class="token punctuation">)</span><span class="token keyword">var</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> config<span class="token punctuation">.</span>database<span class="token punctuation">.</span>HOST<span class="token punctuation">,</span>    user<span class="token punctuation">:</span> config<span class="token punctuation">.</span>database<span class="token punctuation">.</span>USERNAME<span class="token punctuation">,</span>    password<span class="token punctuation">:</span> config<span class="token punctuation">.</span>database<span class="token punctuation">.</span>PASSWORD<span class="token punctuation">,</span>    database<span class="token punctuation">:</span> config<span class="token punctuation">.</span>database<span class="token punctuation">.</span>DATABASE<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Mysql</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">queryPost</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> sqlArr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里要注意一下，跟上面的express有些差别</span>            pool<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> sqlArr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> error                <span class="token punctuation">}</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>之后进行使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@koa/router'</span><span class="token punctuation">)</span><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./connect'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/sql'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sqlStr <span class="token operator">=</span> <span class="token string">'SELECT * from post where id= ?'</span>    <span class="token keyword">let</span> sqlArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> mysql<span class="token punctuation">.</span><span class="token function">queryPost</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> sqlArr<span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> sql<span class="token punctuation">:</span> <span class="token string">'sql of my'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> data <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs express koa2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxtjs初学习</title>
      <link href="/2021/01/31/Nuxtjs%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/01/31/Nuxtjs%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>怎么说啦，学这个主要是为了解决seo的问题，使用服务端渲染，给用户更好的体验</p><p><a href="https://www.nuxtjs.cn/" target="_blank" rel="noopener">官网</a></p><p><a href="https://www.jspang.com/detailed?id=37" target="_blank" rel="noopener">一位大佬的简单教程</a></p><p><a href="https://www.bilibili.com/video/BV13Z4y1T74J?p=5&spm_id_from=pageDriver" target="_blank" rel="noopener">B站视频教程</a></p><img src="https://img2018.cnblogs.com/blog/1158910/201908/1158910-20190818204215037-2038459873.png" alt="生命周期" style="zoom:80%;" /><p>注意上面的<strong>beforecreated</strong>和<strong>created</strong>两个钩子，这两个钩子既可以跑在服务端，也可以跑在客户端。有一个验证就是，使用console，服务端的会在终端里面打印出来，而客户端的会在浏览器的控制台打印出来</p><p>剩下的其他部分就是vue自己的其他生命周期钩子了，如mounted这些</p><p>在服务器端的钩子不能访问客户端的对象，如window对象，只能获取到服务器的上下文context</p><p><strong>nuxtServerInit</strong> ： 这个初始化方法可自定义。写在这个vuex里面主模块的 store的actions里面，起nuxtServerInit这个名字，服务器在初始化的时候就会自动调用这个函数进行初始化</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>Nuxt自动生产了项目目录，我们先来一个一个介绍一下。</p><pre><code>|-- .nuxt                            // Nuxt自动生成，临时的用于编辑的文件，build|-- assets                           // 用于组织未编译的静态资源入LESS、SASS 或 JavaScript|-- components                       // 用于自己编写的Vue组件，比如滚动组件，日历组件，分页组件|-- layouts                          // 布局目录，用于组织应用的布局组件，相当于vue里的app.vue文件|-- middleware                       // 用于存放中间件，相当于路由守卫这种|-- pages                            // 用于存放写的页面，我们主要的工作区域|-- plugins                          // 用于存放JavaScript插件的地方|-- static                           // 用于存放静态资源文件，比如图片|-- store                            // 用于组织应用的Vuex 状态管理。|-- .editorconfig                    // 开发工具格式配置|-- .eslintrc.js                     // ESLint的配置文件，用于检查代码格式|-- .gitignore                       // 配置git不上传的文件|-- nuxt.config.json                 // 用于组织Nuxt.js应用的个性化配置，已覆盖默认配置|-- package-lock.json                // npm自动生成，用于帮助package的统一性设置的，yarn也有相同的操作|-- package.json                     // npm包管理配置文件</code></pre><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>感觉这里有一些特别，跟普通的vue比没了显式的vue-router的目录和文件，Nuxt.js 会依据 <code>pages</code> 目录中的所有 <code>*.vue</code> 文件生成应用的路由配置。可以在执行<code>nuxt</code>命令后在 <strong>.nuxt</strong> 目录里面的router.js文件里面看见生成的路由</p><p>路由可对全部页面使用过渡效果。也可单独对某一个页面使用过渡效果（这个需要使用页面组件的transition属性）</p><p>全局的直接在一个css文件里面以page开头写动画效果，然后在nuxt.config.js里面的css属性里面引入，nuxt会自动将这个效果应用到全部的页面切换，这也是nuxt约定式的一个体现</p><p>进入和离开的active动画一般写在一起，刚进入的状态和最后退出后的状态一般写在一起</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 这里是page页面全局的页面切换动画 */</span><span class="token selector"><span class="token class">.page-enter-active</span>,<span class="token class">.page-leave-active</span> </span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.5</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.page-enter</span>,<span class="token class">.page-leave-to</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>nuxt<span class="token number">.</span>config<span class="token number">.</span>js<span class="token property">css</span><span class="token punctuation">:</span> [    <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>,    // 在这里引入    <span class="token string">'assets/main.css'</span>,  ],</code></pre><h4 id="普通路由"><a href="#普通路由" class="headerlink" title="普通路由"></a>普通路由</h4><p>假设 <code>pages</code> 的目录结构如下：</p><pre class=" language-bash"><code class="language-bash">pages/--<span class="token operator">|</span> user/-----<span class="token operator">|</span> index.vue-----<span class="token operator">|</span> one.vue--<span class="token operator">|</span> index.vue</code></pre><p>那么，Nuxt.js 自动生成的路由配置如下：</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">:</span> <span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/index.vue'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// index.vue文件就直接对应目录名的路由</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/user/index.vue'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'user-one'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/user/one'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/user/one.vue'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>即是带参数的路由，需要创建对应的<strong>以下划线作为前缀</strong>的 Vue 文件 或 目录。</p><p>目录结构：</p><pre class=" language-bash"><code class="language-bash">pages/--<span class="token operator">|</span> _slug/-----<span class="token operator">|</span> comments.vue-----<span class="token operator">|</span> index.vue--<span class="token operator">|</span> users/-----<span class="token operator">|</span> _id.vue--<span class="token operator">|</span> index.vue</code></pre><p>Nuxt.js 生成对应的路由配置表为：</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">:</span> <span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/index.vue'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'users-id'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/users/:id?'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/users/_id.vue'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'slug'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/:slug'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/_slug/index.vue'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'slug-comments'</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">'/:slug/comments'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/_slug/comments.vue'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>你会发现名称为 <code>users-id</code> 的路由路径带有 <code>:id?</code> 参数，表示该路由是可选的。如果你想将它设置为必选的路由，需要在 <code>users/_id</code> 目录内创建一个 <code>index.vue</code> 文件。</p><h5 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h5><p>Nuxt.js 可以让你在动态路由组件中定义参数校验方法。</p><p>举个例子： <code>pages/users/_id.vue</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 必须是number类型</span>    <span class="token keyword">return</span> <span class="token regex">/^\d+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果校验方法返回的值不为 <code>true</code>或<code>Promise</code>中 resolve 解析为<code>false</code>或抛出 Error ， Nuxt.js 将自动加载显示 404 错误页面或 500 错误页面。</p><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>可以通过 vue-router 的子路由创建 Nuxt.js 应用的嵌套路由。</p><p>创建内嵌子路由，你需要添加一个 Vue 文件，同时添加一个<strong>与该文件同名</strong>的目录用来存放子视图组件。</p><p><strong>Warning:</strong> 别忘了在父组件(<code>.vue</code>文件) 内增加 <code>&lt;nuxt-child/&gt;</code> 用于显示子视图内容。</p><p>假设文件结构如：</p><pre class=" language-bash"><code class="language-bash">pages/--<span class="token operator">|</span> users/     <span class="token comment" spellcheck="true"># 这里就一个动态路由文件即可，不需要多个下划线开头的路由文件，反正最后一个url只会匹配一个动态路由文件</span>-----<span class="token operator">|</span> _id.vue-----<span class="token operator">|</span> index.vue--<span class="token operator">|</span> users.vue</code></pre><p>Nuxt.js 自动生成的路由配置如下：</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">:</span> <span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/users'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> <span class="token string">'pages/users.vue'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 这里就是嵌套路由的了</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> <span class="token string">'pages/users/index.vue'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'users'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 这里是动态路由，需要参数的</span>          path<span class="token punctuation">:</span> <span class="token string">':id'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> <span class="token string">'pages/users/_id.vue'</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">'users-id'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>相当于路由守卫 执行顺序为nuxt.config.js     layout    pages    （如果都使用了middleware的话）</p><p>每一个中间件应放置在 <code>middleware/</code> 目录。文件名的名称将成为中间件名称 (<code>middleware/auth.js</code>将成为 <code>auth</code> 中间件)。</p><p>一个中间件接收 <a href="https://www.nuxtjs.cn/api#上下文对象" target="_blank" rel="noopener">context</a> 作为第一个参数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  context<span class="token punctuation">.</span>userAgent <span class="token operator">=</span> process<span class="token punctuation">.</span>server    <span class="token operator">?</span> context<span class="token punctuation">.</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'user-agent'</span><span class="token punctuation">]</span>    <span class="token punctuation">:</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">}</span></code></pre><p>中间件执行流程顺序：</p><ol><li><code>nuxt.config.js</code></li><li>匹配布局</li><li>匹配页面</li></ol><p>然后在你的 <code>nuxt.config.js</code> 、 layouts 或者 pages 中使用中间件:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// nuxt.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  router<span class="token punctuation">:</span> <span class="token punctuation">{</span>    middleware<span class="token punctuation">:</span> <span class="token string">'auth'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在，<code>auth</code> 中间件将在每个路由改变时被调用。</p><p>您也可以将 middleware 添加到指定的布局或者页面:</p><p><strong>注意</strong>：这里如果在上面的nuxt.config.js里面也添加了中间件的话，这两个中间件都会被调用</p><pre class=" language-js"><code class="language-js">pages<span class="token operator">/</span>index<span class="token punctuation">.</span>vue<span class="token template-string"><span class="token string">` 或者 `</span></span>layouts<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>vue<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  middleware<span class="token punctuation">:</span> <span class="token string">'auth'</span><span class="token punctuation">}</span></code></pre><p>还有一些其他的路由，但基本不用就不记录了</p><p>最后简单总结一下：</p><p>注意一下 <strong>index.vue</strong> 文件，会根据目录自动创建相应路由，</p><ul><li>普通路由：直接在pages目录里面创建 <strong>a.vue</strong> 文件，会自动生成 <strong>/a</strong> 的路由，也可先创建一个目录，如目录名为<strong>ts</strong>，然后在目录里面创建 <strong>b.vue</strong> 文件，最后产生的路由为 <strong>/ts/b</strong></li><li>动态路由：就是在带参数的路由，最主要的就是使用下划线开头命名  <strong>_*.vue</strong> 文件，也可以相似的命名目录，使得下划线开头的目录里面的 <strong>index.vue</strong> 也变成动态的，注意同一个目录里面的动态路由文件只能创建一个，因为url只会匹配到一个动态路由文件</li><li>嵌套路由：直接创建一个目录（如 ts），同时创建一个跟目录同名的<strong>ts.vue</strong>文件，在这个文件里面增加 <code>&lt;nuxt-child/&gt;</code> 用于显示子视图内容。然后在创建的目录里面新建 <strong>.vue</strong> 文件即可进行嵌套，生成的路由文件里面，这些目录里的文件就会在 <strong>/ts</strong> 路由的children属性中</li></ul><h4 id="最后一个示例"><a href="#最后一个示例" class="headerlink" title="最后一个示例"></a>最后一个示例</h4><p>pages目录结构</p><pre><code>.├── _slug│   ├── _e.vue│   ├── d.vue│   └── index.vue├── index.vue├── test.vue├── ts    #这里的两个动态路由文件其实只会根据顺序匹配到_b.vue文件，_c.vue根本无法用到│   ├── _b.vue│   ├── _c.vue│   ├── a.vue│   └── index.vue└── ts.vue</code></pre><p>生成的路由文件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这里的乱码是引入的视图文件的随机名字</span>routes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/test"</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> _1f67911e<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"test"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/ts"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 这里的组件就是父组件，在这里面添加&lt;/nuxt-child></span>    component<span class="token punctuation">:</span> _0c0e2ec4<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 这里就是嵌套路由</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 这里的就是引入的ts目录下的index.vue文件 匹配到localhost:3000/ts</span>      component<span class="token punctuation">:</span> _e203c3b8<span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"ts"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 匹配到localhost:3000/ts/a</span>      path<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> _3ed4f99a<span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"ts-a"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 根据顺序这里的动态路由只会匹配到_b.vue文件，下面的_c.vue文件根本匹配不到 匹配到localhost:3000/ts/456</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">":b"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> _316d4381<span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"ts-b"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">":c"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> _317b5b02<span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"ts-c"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> _32107203<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"index"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里就相当于直接根目录的动态路由 如 localhost:3000/123 就会匹配到这个路由，似乎可以使用这个来进行404页面的创建</span>    path<span class="token punctuation">:</span> <span class="token string">"/:slug"</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> _41ca4b67<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"slug"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 匹配到localhost:3000/123/d</span>    path<span class="token punctuation">:</span> <span class="token string">"/:slug/d"</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> _1039df0e<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"slug-d"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 匹配到localhost:3000/123/456</span>    path<span class="token punctuation">:</span> <span class="token string">"/:slug/:e"</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> _0245c8be<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"slug-e"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>就是对layout目录里面的<strong>default.vue</strong>文件的操作，这个文件就相当于vue里的App.vue文件，使用 <strong>&lt;Nuxt /&gt;</strong> 将前面的<strong>default.vue</strong>显示出来，也就相当于vue里的 *<em>&lt;router-view /&gt; *</em>  </p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>定制化默认的 html 模板，只需要在 src 文件夹下（默认是应用根目录）创建一个 <code>app.html</code> 的文件。</p><p>默认模板为：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">{{</span> <span class="token attr-name">HTML_ATTRS</span> <span class="token attr-name">}}</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">{{</span> <span class="token attr-name">HEAD_ATTRS</span> <span class="token attr-name">}}</span><span class="token punctuation">></span></span>    {{ HEAD }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">{{</span> <span class="token attr-name">BODY_ATTRS</span> <span class="token attr-name">}}</span><span class="token punctuation">></span></span>    {{ APP }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>可以在这里改一下网页的图标，title这些东西</p><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p>可根据上面的 <strong>default.vue</strong> 文件进行修改，创建一个新的布局文件(如 blog.vue)，然后在一个页面里面使用 <strong>layout:“blog”</strong> 进行使用，虽然感觉没啥用</p><h4 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h4><p>可以在layout目录里面创建一个 <strong>error.vue</strong> 文件（一定要名称为 <strong>error</strong>），在这里面创建404页面</p><p><strong>注意</strong>：虽然此文件放在 <code>layouts</code> 文件夹中, 但应该将它看作是一个 <strong>页面(page)</strong>.</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="container">    <h1 v-if="error.statusCode === 404">页面不存在</h1>    <h1 v-else>应用发生错误异常</h1>    // 这里的$router是context自带的路由属性    <button @click="$router.replace('/ts')">跳转到ts页面</button>    <nuxt-link to="/">首 页</nuxt-link>  </div></template><script>export default {  props: {    error: {      type: Object,      default: null,    },  }, // 你可以为错误页面指定自定义的布局}</script></code></pre><p>然后错误的路由都会自动跳转到这个页面</p><h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><p>页面组件实际上是 Vue 组件，只不过 Nuxt.js 为这些组件添加了一些特殊的配置项（对应 Nuxt.js 提供的功能特性）以便你能快速开发通用应用。</p><p>Nuxt.js 为页面提供的特殊配置项：</p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>asyncData</td><td>最重要的一个键, 支持 <a href="https://www.nuxtjs.cn/guide/async-data" target="_blank" rel="noopener">异步数据处理</a>，另外该方法的第一个参数为当前页面组件的 <a href="https://www.nuxtjs.cn/api#上下文对象" target="_blank" rel="noopener">上下文对象</a>。</td></tr><tr><td>fetch</td><td>与 <code>asyncData</code> 方法类似，用于在渲染页面之前获取数据填充应用的状态树（store）。不同的是 <code>fetch</code> 方法不会设置组件的数据。详情请参考 <a href="https://www.nuxtjs.cn/api/pages-fetch" target="_blank" rel="noopener">关于 fetch 方法的文档</a>。</td></tr><tr><td>head</td><td>配置当前页面的 Meta 标签, 详情参考 <a href="https://www.nuxtjs.cn/api/pages-head" target="_blank" rel="noopener">页面头部配置 API</a>。</td></tr><tr><td>layout</td><td>指定当前页面使用的布局（<code>layouts</code> 根目录下的布局文件）。详情请参考 <a href="https://www.nuxtjs.cn/api/pages-layout" target="_blank" rel="noopener">关于 布局 的文档</a>。</td></tr><tr><td>loading</td><td>如果设置为<code>false</code>，则阻止页面自动调用<code>this.$nuxt.$loading.finish()</code>和<code>this.$nuxt.$loading.start()</code>,您可以手动控制它,请看<a href="https://nuxtjs.org/examples/custom-page-loading" target="_blank" rel="noopener">例子</a>,仅适用于在 nuxt.config.js 中设置<code>loading</code>的情况下。请参考<a href="https://www.nuxtjs.cn/api/configuration-loading" target="_blank" rel="noopener">API 配置 <code>loading</code> 文档</a>。</td></tr><tr><td>transition</td><td>指定页面切换的过渡动效, 详情请参考 <a href="https://www.nuxtjs.cn/api/pages-transition" target="_blank" rel="noopener">页面过渡动效</a>。</td></tr><tr><td>scrollToTop</td><td>布尔值，默认: <code>false</code>。 用于判定渲染页面前是否需要将当前页面滚动至顶部。这个配置用于 <a href="https://www.nuxtjs.cn/guide/routing#嵌套路由" target="_blank" rel="noopener">嵌套路由</a>的应用场景。</td></tr><tr><td>validate</td><td>校验方法用于校验 <a href="https://www.nuxtjs.cn/guide/routing#动态路由" target="_blank" rel="noopener">动态路由</a>的参数。</td></tr><tr><td>middleware</td><td>指定页面的中间件，中间件会在页面渲染之前被调用， 请参考 <a href="https://www.nuxtjs.cn/guide/routing#中间件" target="_blank" rel="noopener">路由中间件</a>。</td></tr></tbody></table><h3 id="异步数据"><a href="#异步数据" class="headerlink" title="异步数据"></a>异步数据</h3><p>就是上面的<strong>asyncData</strong> 方法的用处，使得我们可以在设置组件的数据之前能异步获取或处理数据。</p><p><code>asyncData</code>方法会在组件（<strong>限于页面组件</strong>）每次加载之前被调用。它可以在服务端或路由更新之前被调用。在这个方法被调用的时候</p><p><strong>注意</strong>：由于<code>asyncData</code>方法是在组件 <strong>初始化</strong> 前被调用的，所以在方法内是没有办法通过 <code>this</code> 来引用组件的实例对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token keyword">async</span> <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> $axios <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> $axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://api.chengsong.info'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> info<span class="token punctuation">:</span> data <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      info<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p><code>asyncData</code> 方法返回的数据在融合 <code>data</code> 方法返回的数据后，一并返回给模板进行展示</p><h4 id="上下文对象"><a href="#上下文对象" class="headerlink" title="上下文对象"></a>上下文对象</h4><p>就是<code>asyncData</code>的第一个参数 <strong>context</strong> ，里面获取很多东西，如 req和res对象，动态路由数据，错误处理等</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> $axios<span class="token punctuation">,</span> params<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error: '</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'params: '</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这里的$axios是nuxt创建的时候自动集成的，所以可以在上下文对象里面解构出来，其实也可以使用import的方式导入进行使用</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> $axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://api.chengsong.info'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// return { info: data }</span>    <span class="token comment" spellcheck="true">// 这里是引入的方式</span>    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://my-api/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>title <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> statusCode<span class="token punctuation">:</span> <span class="token number">404</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'Post not found'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>可以在应用中使用第三方模块</p><blockquote><p>Nuxt.js 允许您在运行 Vue.js 应用程序之前执行 js 插件。这在您需要使用自己的库或第三方模块时特别有用。</p></blockquote><p>需要注意的是，在任何 Vue 组件的<a href="https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram" target="_blank" rel="noopener">生命周期</a>内， 只有 <code>beforeCreate</code> 和 <code>created</code> 这两个方法会在 <strong>客户端和服务端</strong>被调用。其他生命周期函数仅在客户端被调用。</p><p>如 使用<strong>axios</strong></p><p>首先我们需要安装 npm 包：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save axios</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 然后进行使用</span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://my-api/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> data<span class="token punctuation">.</span>title <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>像其他的elment-ui这些都是如此</p><p>而且有些还需要在 <code>nuxt.config.js</code> 内配置 <code>plugins</code> 如下：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@/plugins/element-ui'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="注入vue实例"><a href="#注入vue实例" class="headerlink" title="注入vue实例"></a>注入vue实例</h4><p>有时您希望在整个应用程序中使用某个函数或属性值，此时，你需要将它们注入到 Vue 实例（客户端），context（服务器端）甚至 store(Vuex)。按照惯例，新增的属性或方法名使用<code>$</code>作为前缀。</p><p>将内容注入 Vue 实例，避免重复引入，在 Vue 原型上挂载注入一个函数，所有组件内都可以访问(<strong>不包含服务器端</strong>)。</p><p><code>plugins/vue-inject.js</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myInjectedFunction <span class="token operator">=</span> string <span class="token operator">=</span><span class="token operator">></span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is an example'</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span></code></pre><p><code>nuxt.config.js</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'~/plugins/vue-inject.js'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>这样，您就可以在所有 Vue 组件中使用该函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$myInjectedFunction</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="注入-context"><a href="#注入-context" class="headerlink" title="注入 context"></a>注入 context</h4><p>context 注入方式和在其它 vue 应用程序中注入类似。</p><p><code>plugins/ctx-inject.js</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> app <span class="token punctuation">}</span><span class="token punctuation">,</span> inject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Set the function directly on the context.app object</span>  app<span class="token punctuation">.</span>myInjectedFunction <span class="token operator">=</span> string <span class="token operator">=</span><span class="token operator">></span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Okay, another function'</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>nuxt.config.js</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'~/plugins/ctx-inject.js'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>现在，只要您获得 context，你就可以使用该函数（例如在<code>asyncData</code>和<code>fetch</code>中）。 <code>ctx-example-component.vue</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">asyncData</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    context<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">myInjectedFunction</span><span class="token punctuation">(</span><span class="token string">'ctx!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其他的context和store需要时去看下官网即可</p><p>而且还能对插件plugins进行配置，让其只在客户端使用这个插件</p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><em>模块是 Nuxt.js 扩展，可以扩展其核心功能并添加无限的集成</em></p><p>Nuxt.js 团队提供 <strong>官方</strong> 模块:</p><ul><li><a href="https://http.nuxtjs.org/" target="_blank" rel="noopener">@nuxt/http</a>: 基于<a href="https://github.com/sindresorhus/ky-universal" target="_blank" rel="noopener">ky-universal</a>的轻量级和通用的 HTTP 请求</li><li><a href="https://axios.nuxtjs.org/" target="_blank" rel="noopener">@nuxtjs/axios</a>: 安全和使用简单 Axios 与 Nuxt.js 集成用来请求 HTTP</li><li><a href="https://pwa.nuxtjs.org/" target="_blank" rel="noopener">@nuxtjs/pwa</a>: 使用经过严格测试，更新且稳定的 PWA 解决方案来增强 Nuxt</li><li><a href="https://auth.nuxtjs.org/" target="_blank" rel="noopener">@nuxtjs/auth</a>: Nuxt.js 的身份验证模块，提供不同的方案和验证策略</li></ul><p>需要在nuxt.config.js里面的modules属性里面注册</p><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><p>Nuxt.js 会尝试找到 src 目录（默认是应用根目录）下的 <code>store</code> 目录，如果该目录存在，它将做以下的事情：</p><ol><li>引用 <code>vuex</code> 模块</li><li>将 <code>vuex</code> 模块 加到 vendors 构建配置中去</li><li>设置 <code>Vue</code> 根实例的 <code>store</code> 配置项</li></ol><ul><li><strong>模块方式：</strong> <code>store</code> 目录下的每个 <code>.js</code> 文件会被转换成为状态树<a href="http://vuex.vuejs.org/en/modules.html" target="_blank" rel="noopener">指定命名的子模块</a> （当然，<code>index</code> 是根模块）</li></ul><p>具体的使用方式看一下官网介绍即可</p><h4 id="fetch方法"><a href="#fetch方法" class="headerlink" title="fetch方法"></a>fetch方法</h4><p><em>fetch 方法用于在渲染页面前填充应用的状态树（store）数据， 与 asyncData 方法类似，不同的是它不会设置组件的数据。</em></p><p>如果页面组件设置了 <code>fetch</code> 方法，它会在组件每次加载前被调用（在服务端或切换至目标路由之前）</p><pre class=" language-vue"><code class="language-vue"><template>  <h1>Stars: {{ $store.state.stars }}</h1></template><script>  export default {    async fetch({ store, params }) {      let { data } = await axios.get('http://my-api/stars')      store.commit('setStars', data)      await store.dispatch('GET_STARS')    }  }</script></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p><code>nuxt start</code> 执行后的端口号是在nuxt项目在package.json里面进行修改的）</p><pre class=" language-js"><code class="language-js"><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"firstStudy"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"private"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"nuxt"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"nuxt build"</span><span class="token punctuation">,</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"PORT=3003 nuxt start"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//注意这里的port，在部署的时候会运行在这个端口上，主要是为了防止服务器端口冲突</span>    <span class="token string">"generate"</span><span class="token punctuation">:</span> <span class="token string">"nuxt generate"</span><span class="token punctuation">,</span>    <span class="token string">"lint:js"</span><span class="token punctuation">:</span> <span class="token string">"eslint --ext \".js,.vue\" --ignore-path .gitignore ."</span><span class="token punctuation">,</span>    <span class="token string">"lint"</span><span class="token punctuation">:</span> <span class="token string">"yarn lint:js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><code>nuxt</code> 执行后的端口号是在  <strong>nuxt.config.js</strong> 文件里面修改的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>    server<span class="token punctuation">:</span> <span class="token punctuation">{</span>            port<span class="token punctuation">:</span> <span class="token number">8000</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// default: 3000</span>        <span class="token comment" spellcheck="true">// host: '0.0.0.0' // default: localhost</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>nuxt项目似乎对scss有针对的集成，但对less就有些问题，我使用的时候就会出现错误，所以还是使用scss吧</p><p>nuxt项目在使用官方的npx创建的时候如果选择了axios就会自动引入这个模块，之后就能在context上下文对象里面获取到</p><p><a href="https://axios.nuxtjs.org/usage/" target="_blank" rel="noopener">官方axios集成</a> </p><p>nuxt大部分的情况下就是约定式的，就是你按照一定的规范这样做，nuxt自己会根据你做的东西生成对应的代码，比如在layout布局里面的 <strong>error.vue</strong> 文件就会被当成一个404页面，注意名称一定要是error.vue，且在layout目录下</p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>官方网址：<a href="https://www.nuxtjs.cn/guide/commands" target="_blank" rel="noopener">https://www.nuxtjs.cn/guide/commands</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue nuxtjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级程序指南第四版--学习记录</title>
      <link href="/2021/01/21/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E6%8C%87%E5%8D%97%E7%AC%AC%E5%9B%9B%E7%89%88-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/01/21/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E6%8C%87%E5%8D%97%E7%AC%AC%E5%9B%9B%E7%89%88-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>这个博客是记录title里面的哪本书里面的一些我觉得我现在还没太明白的一些东西，和一些重点需要记录的</p><p><a href="https://wws.lanzous.com/iH8QXknlvza" target="_blank" rel="noopener">js高级程序指南第四版</a><br>密码:c73c</p><p>下面就是对这本的书的一些知识点的记录了</p><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>在脚本开头加上</p><pre><code>&quot;use strict&quot;</code></pre><p>会对一些不明确的地方进行限制，比如说var的变量提升这些出现奇奇怪怪的结果</p><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><p><strong>let 声明的范围是块作用域，而 var 声明的范围是函数作用域</strong></p><p>即var的变量如果声明在函数内，则外部不能访问；而let的作用域是在一个块里面，即在一个大括号里面</p><p>而且var声明的变量存在“<strong>提升</strong>”，let就不会</p><p>在 let 声明之前的执行瞬间被称为“<strong>暂时性死区</strong>”，在此阶段引用任何后面才声明的变量都会抛出 ReferenceError。</p><p><strong>28页</strong>，对for循环里面的var和let进行了解释</p><p>JavaScript 引擎会为 for 循环中的 let 声明分别创建独立的变量实例，但const不能声明迭代变量，即不能在for中使用const</p><p>但在for-of和for-in中可使用const每次迭代创建一个不变的变量</p><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>6种原始类型和一个复杂类型</p><p>undefined null Boolean number string symbol   object</p><p>在对未初始化的变量调用 typeof 时，返回的结果是”undefined”，但对未声明的变量调用它时，返回的结果还是”undefined”</p><p>但实际上还是有差别的</p><p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210122104116607.png" alt="image-20210122104116607"></p><p>同时还有隐式转换这个有时候会造成很奇怪问题的东西</p><p>使用 <strong>!!</strong>可直接对一个值进行Boolean()隐式转换</p><h5 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h5><p>下面是一些对空值的判断方式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//    var a = "";</span><span class="token comment" spellcheck="true">//    var a = " ";</span><span class="token comment" spellcheck="true">//    var a = null;</span><span class="token comment" spellcheck="true">//    var a = undefined;</span><span class="token comment" spellcheck="true">//    var a = [];</span><span class="token comment" spellcheck="true">//    var a = {};</span><span class="token comment" spellcheck="true">//    var a = NaN;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 只能用 === 运算来测试某个值是否是未定义的</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"为undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 等同于 a === undefined || a === null</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"为null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// String    </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> a <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> a <span class="token operator">==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// "",null,undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// "",null,undefined,NaN</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>$<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// "",null,undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Array</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// "",[]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// "",[]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Object {}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">isEmptyObject</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 普通对象使用 for...in 判断，有 key 即为 false</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h5><p>number()     parseInt()     parseFloat()</p><p>Symbol.for()对每个字符串键都执行幂等操作。第一次使用某个字符串调用时，它会检查全局运行时注册表，发现不存在对应的符号，于是就会生成一个新符号实例并添加到注册表中。后续使用相同字符串的调用同样会检查注册表，发现存在与该字符串对应的符号，然后就会返回该符号实例</p><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>每个 Object 实例都有如下属性和方法。</p><ul><li>constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object() 函数。</li><li>hasOwnProperty(<em>propertyName</em>)：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如 o.hasOwnProperty(“name”)）或符号。</li><li>isPrototypeOf(<em>object</em>)：用于判断当前对象是否为另一个对象的原型。（第 8 章将详细介绍原型。）</li><li>propertyIsEnumerable(<em>propertyName</em>)：用于判断给定的属性是否可以使用（本章稍后讨论的）for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串。</li><li>toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。</li><li>toString()：返回对象的字符串表示。</li><li>valueOf()：返回对象对应的字符串、数值或布尔值表示。通常与 toString()的返回值相同。</li></ul><p>valueOf(): 返回最适合该对象类型的原始值；</p><p>toString(): 将该对象的原始值以字符串形式返回</p><p>在数值运算里，会优先调用valueOf()，如a + b；</p><p>在字符串运算里，会优先调用toString()，如alert(c)。</p><h5 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h5><p>如 <strong>&amp;&amp;</strong>     <strong>||</strong>    具有短路的特性，即当前面符合的判断的时候可以直接得到最终结果的时候，就不会再对后面进行运算和判断，浪费算力</p><p>有时候可根据这个特性简化运算</p><p>指数操作符 <strong>**</strong> 即相当于平方</p><p>在执行 <strong>+</strong> 的时候如果两个变量不是number，则会直接进行字符串拼接，只有一个number也不行</p><p>但执行 <strong>-</strong> 就会将字符串转换为number</p><p>不要使用字符串形式的数字来进行比较，如    &lt;     &gt;     其会比较字符的编码，而不是逻辑的字符数字</p><h5 id="符号的判断"><a href="#符号的判断" class="headerlink" title="==符号的判断"></a>==符号的判断</h5><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210122204107816.png" alt="image-20210122204107816" style="zoom:80%;" /><p>for-of    value    </p><p>for-in    key</p><h4 id="变量、作用域与内存"><a href="#变量、作用域与内存" class="headerlink" title="变量、作用域与内存"></a>变量、作用域与内存</h4><p>原始型（六个基本数据类型都是）、引用型</p><h5 id="深拷贝，浅拷贝"><a href="#深拷贝，浅拷贝" class="headerlink" title="深拷贝，浅拷贝"></a>深拷贝，浅拷贝</h5><p>可查看之间的博客 js各种知识里面的知识点</p><p>js里面<strong>函数的参数</strong>传递是按值传递的（该原始的原始复制，该引用的引用复制）</p><h5 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/cd[da]/g</span><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">'scda'</span><span class="token keyword">let</span> match <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">let</span> match1 <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">,</span>match1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [ 'cda', index: 1, input: 'scda', groups: undefined ] [ 'cda' ]</span></code></pre><p>通过 <strong>match.index</strong> 这个值是否存在来判断是否这个text里面存在这个reg的对应的字符串和其起始位置</p><p>也可通过 <strong>match1</strong> 是否存在判断是否正则匹配</p><h5 id="原始值包装类型"><a href="#原始值包装类型" class="headerlink" title="原始值包装类型"></a>原始值包装类型</h5><p>即</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'ds'</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>113页有详细解释</p><p>这里的s1应该是原始类型，不是对象，那么在这上面就不能直接调用方法，是js后台对s1进行了处理，包装了一个对象，才使得能调用方法，完成之后就会立即销毁</p><p>奇怪的知识点</p><p>在浏览器控制台里面：</p><p><a href="https://blog.csdn.net/qq_39985511/article/details/94749704" target="_blank" rel="noopener">他人文章</a></p><pre class=" language-js"><code class="language-js"><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 或 12 .toString(2) //隔一个空格，使得t前面的那个点 ‘.’ 成为一个token，而不是被当成 12. 变成一个省略的float数字</span><span class="token comment" spellcheck="true">// 输出 "1100"</span></code></pre><h5 id="单例内置对象"><a href="#单例内置对象" class="headerlink" title="单例内置对象"></a>单例内置对象</h5><p><strong>global    ** **math</strong> </p><p>Global 对象有很多属性，其中一些前面已经提到过了。像 undefined、NaN 和 Infinity 等特殊值都是 Global 对象的属性。此外，所有原生引用类型构造函数，比如 Object 和 Function，也都是Global 对象的属性。浏览器将global视为window对象</p><pre class=" language-js"><code class="language-js">number <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> total_number_of_choices <span class="token operator">+</span> first_possible_value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 取随机数</span><span class="token keyword">function</span> <span class="token function">selectFrom</span><span class="token punctuation">(</span>lowerValue<span class="token punctuation">,</span> upperValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> choices <span class="token operator">=</span> upperValue <span class="token operator">-</span> lowerValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> choices <span class="token operator">+</span> lowerValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2~10 范围内的值，其中包含 2 和 10</span></code></pre><h5 id="选择map还是object"><a href="#选择map还是object" class="headerlink" title="选择map还是object"></a>选择map还是object</h5><p>map在给定内存和需要大量插入操作时和需要使用delete时 更具优势</p><h5 id="weakmap"><a href="#weakmap" class="headerlink" title="weakmap"></a><strong>weakmap</strong></h5><p>弱映射中的键只能是 Object 或者继承自 Object 的类型（weakset也是如此）</p><p>WeakMap 中的weak（弱），描述的是 JavaScript 垃圾回收程序对待“弱映射”中键的方式。</p><h4 id="迭代器-生成器"><a href="#迭代器-生成器" class="headerlink" title="迭代器 生成器"></a>迭代器 生成器</h4><p><strong>[Symbol.iterator]</strong>     </p><p>接收可迭代对象的原生语言特性包括：</p><ul><li>for-of 循环</li><li>数组解构</li><li>扩展操作符（…）</li><li>Array.from()</li><li>创建集合</li><li>创建映射</li><li>Promise.all()接收由期约组成的可迭代对象</li><li>Promise.race()接收由期约组成的可迭代对象</li><li>yield*操作符，在生成器中使用</li></ul><p>使用 <strong>next() *<em>方法获取每一个值，直到得到 *</em>done: true</strong>为止</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//迭代器并不与可迭代对象某个时刻的快照绑定,会相应变化</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'dsa'</span><span class="token punctuation">;</span><span class="token keyword">let</span> iter <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> iter1 <span class="token operator">=</span> str<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { done: false, value: 'foo' } </span><span class="token comment" spellcheck="true">// 在数组中间插入值</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { done: false, value: 'bar' } </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { done: false, value: 'baz' } </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { done: true, value: undefined }</span></code></pre><p>return()    方法终止迭代</p><h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><p>形式是一个函数，函数名称前面加一个星号（*）表示它是一个生成器。只要是可以定义函数的地方，就可以定义生成器</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 生成器函数声明</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 生成器函数表达式</span><span class="token keyword">let</span> generatorFn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 箭头函数不能定义生成器</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token string">'foo'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'bar'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'baz'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> generatorObject <span class="token operator">=</span> <span class="token function">generatorFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用了next()才开始执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generatorObject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { done: false, value: 'foo' } </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generatorObject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { done: false, value: 'bar' } </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generatorObject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { done: true, value: 'baz' }</span></code></pre><p>　　1、函数生成器特点是函数名前面有一个 *****</p><p>　　2、通过调用函数生成一个控制器</p><p>　　3、调用next()方法开始执行函数，记住生成器是从next()开始进行执行</p><p>　　4、遇到yield函数将暂停，yield不能出现在嵌套的非生成器函数中</p><p>　　5、再次调用next()继续执行函数</p><p>yield *       迭代一个可迭代对象，从而每次产生一个值</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">yield</span> <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token string">'312'</span><span class="token punctuation">,</span><span class="token string">'dsa'</span><span class="token punctuation">,</span><span class="token string">'蒋晟松'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </code></pre><h4 id="对象、类、面向对象"><a href="#对象、类、面向对象" class="headerlink" title="对象、类、面向对象"></a>对象、类、面向对象</h4><h5 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h5><p>数据属性包含一个保存数据值的位置。值会从这个位置读取，也会写入到这个位置</p><ul><li>[[Configurable]]：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。默认情况下，所有直接定义在对象上的属性的这个特性都是 true。一旦变为false就无法变回来</li><li>[[Enumerable]]：表示属性是否可以通过 for-in 循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是 true</li><li>[[Writable]]：表示属性的值是否可以被修改。默认情况下，所有直接定义在对象上的属性的这个特性都是 true</li><li>[[Value]]：包含属性实际的值。这就是前面提到的那个读取和写入属性值的位置。这个特性的默认值为 undefined。</li></ul><p>注意两个中括号，是特定进行标识的，表示其为内部特性</p><p>可使用 <strong>Object.defineProperty()</strong> 进行修改，还有一个 <strong>Object.defineProperties</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 让其不能被修改</span> value<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas" </span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas"</span></code></pre><h5 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h5><p>访问器属性不包含数据值。相反，它们包含一个获取（getter）函数和一个设置（setter）函数，不过这两个函数不是必需的</p><ul><li><p>[[Configurable]]：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性。默认情况下，所有直接定义在对象上的属性的这个特性都是 true。 </p></li><li><p>[[Enumerable]]：表示属性是否可以通过 for-in 循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是 true。 </p></li><li><p>[[Get]]：获取函数，在读取属性时调用。默认值为 undefined。 </p></li><li><p>[[Set]]：设置函数，在写入属性时调用。默认值为 undefined。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">{</span> year_<span class="token punctuation">:</span> <span class="token number">2017</span><span class="token punctuation">,</span> edition<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year_<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">></span> <span class="token number">2017</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>year_ <span class="token operator">=</span> newValue<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2017</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre></li></ul><p>使用 Object.getOwnPropertyDescriptor(obj,property)方法可以取得指定属性的属性描述符</p><p>同理 <strong>Object.getOwnPropertyDescriptors(obj)</strong></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  year_<span class="token punctuation">:</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">2018</span><span class="token punctuation">,</span> writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> configurable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  year<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">:</span> <span class="token keyword">get</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">:</span> <span class="token keyword">set</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>object.assign</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这里主要是直接在对象里面使用set和get也是可以的，只表示针对这个特定属性</span><span class="token keyword">let</span> dest <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token keyword">set</span> <span class="token function">a</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Invoked dest setter with param </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> src <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 注意是属性，不是es6的方法的简写方式</span>     <span class="token keyword">get</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Invoked src getter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">'foo'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用 src 的获取方法</span><span class="token comment" spellcheck="true">// 调用 dest 的设置方法并传入参数"foo" </span><span class="token comment" spellcheck="true">// 因为这里的设置函数不执行赋值操作</span><span class="token comment" spellcheck="true">// 所以实际上并没有把值转移过来</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { set a(val) {...} }</span></code></pre><h5 id="增强的对象语法"><a href="#增强的对象语法" class="headerlink" title="增强的对象语法"></a>增强的对象语法</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'ds'</span><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">'key1'</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// name:name的简写</span>    <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 使用中括号使其当成js表达式而不是字符串来求值</span>    <span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 简写方法名</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h5 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用对象解构</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Matt'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">27</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> personName<span class="token punctuation">,</span> age<span class="token punctuation">:</span> personAge <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Matt </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personAge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 27</span><span class="token comment" spellcheck="true">// 可简写和设置默认值</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token comment" spellcheck="true">// 嵌套解构</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'Matt'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">,</span>      job<span class="token punctuation">:</span> <span class="token punctuation">{</span>          title<span class="token punctuation">:</span> <span class="token string">'Software engineer'</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明 title 变量并将 person.job.title 的值赋给它</span><span class="token keyword">let</span> <span class="token punctuation">{</span> job<span class="token punctuation">:</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Software engineer</span></code></pre><p>null和undefined不能被解构</p><h4 id="ES6的类-class-的原始封装"><a href="#ES6的类-class-的原始封装" class="headerlink" title="ES6的类 class 的原始封装"></a>ES6的类 class 的原始封装</h4><p>下面先记录一些ES6语法封装前的class实现的方式，实际使用还是直接使用ES6的语法即可</p><h5 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 构造函数模式</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 主要问题是这里的sayName会重复调用new function创建</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">"Software Engineer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">"Doctor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Nicholas </span>person2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Greg</span></code></pre><p>要创建 function Person() 的实例，应使用 new 操作符。以这种方式调用构造函数会执行如下操作。</p><p>(1) 在内存中创建一个新对象。</p><p>(2) 这个新对象内部的[[Prototype]]特性被赋值为构造函数的 prototype 属性</p><p><strong>(3)</strong> 构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）。</p><p>(4) 执行构造函数内部的代码（给新对象添加属性）。</p><p>(5) 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。</p><p>构造函数与普通函数唯一的区别就是调用方式不同。除此之外，构造函数也是函数。并没有把某个函数定义为构造函数的特殊语法。任何函数<strong>只要使用 new 操作符调用就是构造函数</strong>，而不使用 new 操作符调用的函数就是普通函数</p><p>这里要记住，在调用一个函数而没有<strong>明确设置 this</strong> 值的情况下（即没有作为对象的方法调用，或者没有使用 call()/apply()调用），this 始终指向 Global 对象（在浏览器中就是 window 对象）</p><h5 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原型模式</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Nicholas"</span><span class="token punctuation">;</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string">"Software Engineer"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 但这里的sayName是共享的</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 或</span>    Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这里需要自己制定constructor的指向，不然会指向object的构造函数，但这也使得[[Enumerable]]变为了true，需要自己改为false</span>         constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span> <span class="token number">29</span><span class="token punctuation">,</span>          job<span class="token punctuation">:</span> <span class="token string">"Software Engineer"</span><span class="token punctuation">,</span>          <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas" </span><span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> person2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>sayName <span class="token operator">==</span> person2<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>这里可以看下之前记录的一些关于原型的知识记录和博客，里面很简单的介绍了一下</p><p>原型模式最大的问题就在于其<strong>引用值共享</strong>的性质</p><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>可使用<strong>原型链</strong>实现继承，但其也有问题，主要问题出现在原型中包含引用值的时候。前面在谈到原型的问题时也提到过，原型中包含的 <strong>引用值</strong>会在所有实例间共享，这也是为什么属性通常会在构造函数中定义而不会定义在原型上的原因。第二个问题是，子类型在实例化时不能给父类型的构造函数传参</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 原型链继承 SuperType </span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black" </span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black"</span></code></pre><p>此外还有 <strong>盗用构造函数（解决了共享的问题，但其中每一个方法都要重新构建，不能重用）、组合继承、原型式继承、寄生式继承、寄生式组合继承</strong></p><p>这里就只记录一些解决的问题和本身存在的问题吧，实际要用还是需要使用ES6的<strong>extends</strong>语法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组合继承，书上说是目前使用最多的方式</span><span class="token comment" spellcheck="true">// 使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 继承属性，这里会返回supertype的实例值，所以每一个实例拥有属于自己的属性，不会共享引用值</span> SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 继承方法</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里将其constructor改回来</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里改变的只是instance1实例的值，并没有改变supertype的值</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black" </span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas"; </span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 29 </span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green" </span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Greg"; </span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 27</span></code></pre><h4 id="类"><a href="#类" class="headerlink" title="类"></a><a href="https://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">类</a></h4><p>终于开始记录类了，其实上面的那些也没有太清楚，只是简单地看了一遍，具体的内核思想还是没有理解</p><p>类其实就是一种特殊的函数</p><p>函数受函数作用域限制，而类受块作用域限制，默认情况下，类定义中的代码都在严格模式下执行</p><p>方法名 constructor 会告诉解释器在使用 new 操作符创建类的新实例时，应该调用这个函数。构造函数的定义不是必需的，不定义构造函数相当于将构造函数定义为空函数</p><p>使用 new 调用类的构造函数会执行如下操作。</p><p>(1) 在内存中创建一个新对象。</p><p>(2) 这个新对象内部的[[Prototype]]指针被赋值为构造函数的 prototype 属性。</p><p>(3) 构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）。</p><p>(4) 执行构造函数内部的代码（给新对象添加属性）。</p><p>(5) 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象</p><p>类构造函数与构造函数的主要区别是，调用类构造函数<strong>必须使用 new 操作符</strong>。而普通构造函数如果不使用 new 调用，那么就会以全局的 this（通常是 window）作为内部对象。调用类构造函数时如果忘了使用 new 则会抛出错误</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span> <span class="token keyword">function</span> <span class="token function">FunctionDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">ClassDeclaration</span> <span class="token punctuation">{</span>     <span class="token function">constructor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color <span class="token operator">||</span> <span class="token string">'orange'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>FunctionDeclaration<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// FunctionDeclaration() {} </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ClassDeclaration<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: ClassDeclaration is not defined</span></code></pre><p>注意：方法与方法之间不需要逗号分隔，加了会报错</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 完整示例</span><span class="token keyword">class</span> <span class="token class-name">ClassDeclaration</span> <span class="token punctuation">{</span>    age<span class="token operator">=</span><span class="token number">231</span>    <span class="token comment" spellcheck="true">// 这种方式也可以将这个属性加到实例上面</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 添加到 this 的所有内容都会存在于不同的实例上，即为实例属性</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color <span class="token operator">||</span> <span class="token string">'orange'</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'cs'</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在类块中定义的所有内容都会定义在类的原型上，类方法等同于对象属性，使用实例进行调用</span>    <span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'prototype'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态方法定义在类本身上</span>    <span class="token keyword">static</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 也可使用set和get，这个属性不存在也可以，不会报错,但注意在这个类实例化的时候，当new出来的对象设置实例属性的时候，这个set会被调用</span>    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name_ <span class="token operator">=</span> newName<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name_<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 但不能在类块中给原型添加原始值或对象作为成员数据</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Jake'</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Uncaught SyntaxError: Unexpected token</span><span class="token comment" spellcheck="true">// 虽然类定义并不显式支持在原型或类上添加成员数据，但在类定义外部，可以手动添加</span>ClassDeclaration<span class="token punctuation">.</span>my <span class="token operator">=</span> <span class="token string">'晟松'</span>ClassDeclaration<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>school <span class="token operator">=</span> <span class="token string">'hunnu'</span>ClassDeclaration<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// calss [class ClassDeclaration]</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassDeclaration</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// red </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// prototype</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 231</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Jake'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jake</span></code></pre><h5 id="ES6的继承"><a href="#ES6的继承" class="headerlink" title="ES6的继承"></a>ES6的继承</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不仅可以继承一个类，也可以继承普通的构造函数</span><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 继承类</span><span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Bus</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 继承普通构造函数</span><span class="token keyword">class</span> <span class="token class-name">Engineer</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Engineer</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p><strong>派生类</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">{</span>     <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>hasEngine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">static</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'vehicle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// super只能在派生类中使用，而且仅限于类构造函数、实例方法和静态方法内部。在类构造函数中使用 super 可以调用父类构造函数</span>     <span class="token comment" spellcheck="true">// 不要在调用 super()之前引用 this，否则会抛出 ReferenceError </span>     <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相当于 super.constructor() </span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true </span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bus { hasEngine: true } </span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在静态方法中可以通过 super 调用继承的类上定义的静态方法</span>    <span class="token keyword">static</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意使用super的问题：</p><ul><li>super 只能在派生类构造函数和静态方法中使用。</li><li>不能单独引用 super 关键字，要么用它调用构造函数，要么用它引用静态方法</li><li>调用 super()会调用父类构造函数，并将返回的实例赋值给 this。</li><li>super()的行为如同调用构造函数，如果需要给父类构造函数传参，则需要手动传入</li><li>如果没有定义类构造函数，在实例化派生类时会调用 super()，而且会传入所有传给派生类的参数</li><li>在类构造函数中，不能在调用 super()之前引用 this。</li><li>如果在派生类中<strong>显式</strong>定义了构造函数，则要么必须在其中调用 super()，要么必须在其中返回一个对象。</li></ul><p>此外还有Object.assign()方法是为了混入对象的属性，类混入来嵌套混入类</p><h4 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h4><p>这里主要是因为vue3的响应式就是通过proxy和reflect来实现的，所以记录一下</p><p>默认情况下，在代理对象上执行的所有操作都会无障碍地传播到目标对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token string">'target'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这里是一个对象，不是一个函数</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 捕获器在处理程序对象中以方法名为键</span>    <span class="token comment" spellcheck="true">// 目标对象、要查询的属性和代理对象三个参数，可使用reflect简化</span>     <span class="token keyword">get</span><span class="token punctuation">(</span>trapTarget<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> trapTarget<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    或    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    或    <span class="token keyword">get</span><span class="token punctuation">:</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span>    或    <span class="token keyword">get</span><span class="token punctuation">(</span>trapTarget<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 在这里对需要返回的值进行修饰</span>         <span class="token keyword">let</span> decoration <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">===</span> <span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             decoration <span class="token operator">=</span> <span class="token string">'!!!'</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token operator">+</span> decoration<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// proxy没有prototype属性</span><span class="token comment" spellcheck="true">// 严格相等可以用来区分代理和目标</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target <span class="token operator">===</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h5 id="捕获器"><a href="#捕获器" class="headerlink" title="捕获器"></a>捕获器</h5><p>使用代理的主要目的是可以定义捕获器（trap）。捕获器就是在处理程序对象中定义的“基本操作的拦截器”，就是上面的get</p><p>同时还有捕获器不变式、可撤销代理、代理另一个代理</p><h5 id="代理的问题"><a href="#代理的问题" class="headerlink" title="代理的问题"></a>代理的问题</h5><p>代理中的this会丢失</p><h5 id="全部捕获器和反射方法"><a href="#全部捕获器和反射方法" class="headerlink" title="全部捕获器和反射方法"></a>全部捕获器和反射方法</h5><p>具体的使用方法还是需要时再查吧，这里就记一下</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210125104314863.png" alt="image-20210125104314863" style="zoom: 80%;" /><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数声明（会出现<strong>声明提升</strong>的现象）、函数表达式、箭头函数、函数构造函数这几种方式创建函数</p><p>注意箭头函数没有arguments，<strong>其this也跟其他函数不一样，是其创建时的this，而不是调用时的this</strong></p><p>使用不带括号的函数名会访问函数指针，而不会执行函数，同时也有立即函数这一说</p><p>ES6的所有函数对象都会暴露一个只读的 name 属性，表示一个函数标识符</p><p>js中没有函数重载，函数名可被当作指针来进行理解</p><h5 id="理解参数"><a href="#理解参数" class="headerlink" title="理解参数"></a>理解参数</h5><p>ECMAScript 函数的参数在内部表现为一个数组arguments，是一个类数组，但不建议使用，建议使用扩展（收集）参数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 收集参数的前面如果还有命名参数，则只会收集其余的参数；如果没有则会得到空数组。因为收集参数的结果可变，所以只能把它作为最后一个参数</span><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 顺序累加 values 中的所有值</span> <span class="token comment" spellcheck="true">// 初始值的总和为 0 </span> <span class="token keyword">return</span> values<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><p>arguments 对象的另一个有意思的地方就是，它的值始终会与对应的命名参数同步</p><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 默认参数按照顺序被创建，后面的参数可引用前面的参数，且遵循暂时性时区规则，即前面定义的参数不能引用后面定义的</span><span class="token keyword">function</span> <span class="token function">makeKing</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Henry'</span><span class="token punctuation">,</span>ts <span class="token operator">=</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`King </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> VIII`</span></span><span class="token punctuation">;</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">makeKing</span><span class="token punctuation">(</span><span class="token string">'Louis'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'King Louis VIII' </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">makeKing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'King Henry VIII'</span></code></pre><p>在使用默认参数时，arguments 对象的值不反映参数的默认值，只反映传给函数的参数</p><h5 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h5><p>检测函数是否使用 new 关键字调用的 new.target 属性</p><h5 id="arguments-callee"><a href="#arguments-callee" class="headerlink" title="arguments.callee"></a>arguments.callee</h5><p>就是一个指向正在执行的函数的指针，可用于递归时代替函数名</p><h5 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h5><p>即外部函数的返回值是<strong>一个</strong>内部函数的返回值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 尾调用</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 无优化</span><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 优化</span><span class="token keyword">function</span> <span class="token function">fibImpl</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">fibImpl</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a><a href="https://zh.javascript.info/closure" target="_blank" rel="noopener">闭包</a></h5><p>指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现</p><p>在调用一个函数时，会为这个函数调用创建一个执行上下文，并创建一个作用域链。然后用 arguments和其他命名参数来初始化这个函数的活动对象。外部函数的活动对象是内部函数作用域链上的第二个对象。这个作用域链一直向外串起了所有包含函数的活动对象，直到全局执行上下文才终止。</p><p>闭包在被函数返回之后，其作用域会一直保存在内存中，直到闭包被销毁。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 一种特殊的情况</span>window<span class="token punctuation">.</span>identity <span class="token operator">=</span> <span class="token string">'The Window'</span><span class="token punctuation">;</span><span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>  identity<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>  <span class="token function">getIdentityFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>identity<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getIdentityFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'The Window'</span><span class="token keyword">let</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span>  identity<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>  <span class="token function">getIdentityFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> that<span class="token punctuation">.</span>identity<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">getIdentityFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'My Object'</span></code></pre><h4 id="期约与异步函数"><a href="#期约与异步函数" class="headerlink" title="期约与异步函数"></a>期约与异步函数</h4><p>这一部分的promise可以简单的看一下我之前写的一个关于promise的简单介绍和一个关于异步线程的知识，这里就记一些高级一点的知识点</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 一个简单的示例</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"异步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"返回异步值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"k: "</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"晟松"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hunnu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果</span>晟松promisehunnu异步k<span class="token punctuation">:</span>  返回异步值</code></pre><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>Promise.resolve()如果传入的参数本身是一个期约，那它的行为就类似于一个空包装。因此，Promise.resolve()可以说是一个幂等方法</p><p>Promise.reject()并没有照搬 Promise.resolve()的幂等逻辑。如果给它传一个期约对象，则这个期约会成为它返回的拒绝期约的理由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: foo </span><span class="token punctuation">}</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>  Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Uncaught (in promise) Error: bar</span><span class="token comment" spellcheck="true">// 正确</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>拒绝期约的错误并没有抛到执行同步代码的线程里，而是通过浏览器异步消息队列来处理的。因此，try/catch 块并不能捕获该错误。代码一旦开始以异步模式执行，则唯一与之交互的方式就是使用异步结构—-更具体地说，就是期约的方法</p><h5 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h5><p>两个参数：onResolved 处理程序和 onRejected 处理程序。这两个参数都是可选的，如果提供的话，则会在期约分别进入“兑现”和“拒绝”状态时执行。</p><p>同时执行之后返回一个新的promise实例，这个新期约实例基于 onResovled 处理程序的返回值构建，如果没有提供这个处理程序，则 Promise.resolve()就会包装上一个期约解决之后的值。如果没有显式的返回语句，则 Promise.resolve()会包装默认的返回值 undefined。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"p1异步开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"返回异步值p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log("promise");</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> k1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err reject: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果</span>p1异步开始res 返回异步值p1</code></pre><h5 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h5><p>用于给期约添加拒绝处理程序。事实上，这个方法就是一个语法糖，调用它就相当于调用 Promise.prototype. then(null, onRejected)</p><h5 id="finally"><a href="#finally" class="headerlink" title="finally()"></a>finally()</h5><p>在期约转换为解决或拒绝状态时都会执行。这个方法可以避免 onResolved 和 onRejected 处理程序中出现冗余代码。但 onFinally 处理程序没有办法知道期约的状态是解决还是拒绝，所以这个方法<strong>主要用于添加清理代码</strong>。并返回一个新的期约实例，在大多数情况下它将表现为父期约的传递。对于已解决状态和被拒绝状态都是如此</p><h5 id="期约连锁"><a href="#期约连锁" class="headerlink" title="期约连锁"></a>期约连锁</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'initial promise rejects'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reject handler'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve handler'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally handler'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// initial promise rejects </span><span class="token comment" spellcheck="true">// reject handler </span><span class="token comment" spellcheck="true">// resolve handler </span><span class="token comment" spellcheck="true">// finally handler</span></code></pre><h6 id="Promise-all-和-Promise-race"><a href="#Promise-all-和-Promise-race" class="headerlink" title="Promise.all()和 Promise.race()"></a><strong>Promise.all()</strong>和 <strong>Promise.race()</strong></h6><p>这两个可以将两个或多个期约实例组合成一个期约，传递的参数形式是一个数组</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 如果至少有一个包含的期约待定，则合成的期约也会待定。如果有一个包含的期约拒绝，则合成的期约也会拒绝</span><span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise &lt;pending> </span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'all() resolved!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// all() resolved!（大约 1 秒后）</span><span class="token comment" spellcheck="true">// 如果所有期约都成功解决，则合成期约的解决值就是所有包含期约解决值的数组，按照迭代器顺序 </span><span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [3, undefined, 4]</span><span class="token comment" spellcheck="true">// Promise.race()不会对解决或拒绝的期约区别对待。无论是解决还是拒绝，只要是第一个落定的期约，Promise.race()就会包装其解决值或拒绝理由并返回新期约</span><span class="token comment" spellcheck="true">// 解决先发生，超时后的拒绝被忽略</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise &lt;resolved>: 3 </span><span class="token comment" spellcheck="true">// 拒绝先发生，超时后的解决被忽略</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise &lt;rejected>: 4 </span><span class="token comment" spellcheck="true">// 迭代顺序决定了落定顺序</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise &lt;resolved>: 5</span></code></pre><h4 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h4><p>异步函数，也称为“async/await”（语法关键字），让以同步方式写的代码异步执行</p><p>注意await关键字必须在异步函数中使用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原来的异步代码</span><span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 现在的异步代码</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// await 关键字会暂停执行异步函数后面的代码，让出 JavaScript 运行时的执行线程。这个行为与生成器函数中的 yield 关键字是一样的。</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 </span><span class="token comment" spellcheck="true">// 2 </span><span class="token comment" spellcheck="true">// 3 </span><span class="token comment" spellcheck="true">// 4</span></code></pre><h5 id="利用异步实现sleep"><a href="#利用异步实现sleep" class="headerlink" title="利用异步实现sleep"></a>利用异步实现sleep</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> t0 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加入非阻塞的暂停</span> <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 暂停约 1500 毫秒</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1502</span></code></pre><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><p>一些关于浏览器的属性，就记一些比较重点的点，具体的使用需要时再查</p><p>screenTop（）    scrollTo()     scrollBy（）</p><p>还有一些关于浏览器和其中的元素的位置之类的api，需要时可查</p><p><strong>Location对象</strong></p><p>它既是 window 的属性，也是 document 的属性</p><p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210126110959762.png" alt="image-20210126110959762"></p><p><strong>history对象</strong></p><p>主要是 <strong>go()</strong>方法</p><p>还有一个关于浏览器的能力检测，检测是什么浏览器、软硬件这些，需要的时候查一下就好</p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>跟前面的BOM差不多，记点比较重要的</p><h5 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h5><p>document中的每个节点都有nodeType类型，节点直接具有父子关系，如childNodes</p><p>还有一些其他的</p><p>appendChild()、removeChild()和 replaceChild()方法</p><p>定位元素：getElementById()和 getElementsByTagName()还有className这些</p><p><strong>MutationObserver</strong></p><p>观察一个node的属性变化、文本变化、子节点变化等</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DOM was mutated!'</span><span class="token punctuation">)</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">{</span> attributes<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Changed body class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Changed body class </span><span class="token comment" spellcheck="true">// DOM was mutated!</span><span class="token comment" spellcheck="true">// 撤销观察</span>observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还有一些其他的关于这个observe的，但好像基本没见哪里用过，就不记了</p><p>DOM 由一系列节点类型构成，主要包括以下几种：</p><ul><li>Node 是基准节点类型，是文档一个部分的抽象表示，所有其他类型都继承 Node。 </li><li>Document 类型表示整个文档，对应树形结构的根节点。在 JavaScript 中，document 对象是Document 的实例，拥有查询和获取节点的很多方法。</li><li>Element 节点表示文档中所有 HTML 或 XML 元素，可以用来操作它们的内容和属性。</li><li>其他节点类型分别表示文本内容、注释、文档类型、CDATA 区块和文档片段。</li></ul><p><strong>自定义数据属性</strong></p><p>给元素指定非标准的属性，但要使用前缀 <strong>data-</strong> 以便告诉浏览器</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"myDiv"</span> data<span class="token operator">-</span>appId<span class="token operator">=</span><span class="token string">"12345"</span> data<span class="token operator">-</span>myname<span class="token operator">=</span><span class="token string">"Nicholas"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// 示例</span><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取得自定义数据属性的值</span><span class="token keyword">let</span> appId <span class="token operator">=</span> div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>appId<span class="token punctuation">;</span> <span class="token keyword">let</span> myName <span class="token operator">=</span> div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>myname<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置自定义数据属性的值</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>appId <span class="token operator">=</span> <span class="token number">23456</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>myname <span class="token operator">=</span> <span class="token string">"Michael"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 有"myname"吗？</span><span class="token keyword">if</span> <span class="token punctuation">(</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>myname<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>div<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>myname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>定义了自定义数据属性后，可以通过元素的 dataset 属性来访问</p><p>有一点需要说一下，在css里面似乎也跟这个值进行一些操作</p><h5 id="css自定义属性"><a href="#css自定义属性" class="headerlink" title="css自定义属性"></a><a href="https://www.cnblogs.com/cangqinglang/p/11384703.html" target="_blank" rel="noopener">css自定义属性</a></h5><p><code>--*</code>来声明变量名，<code>var(--*)</code>来使用</p><h4 id="元素尺寸"><a href="#元素尺寸" class="headerlink" title="元素尺寸"></a>元素尺寸</h4><h5 id="偏移尺寸"><a href="#偏移尺寸" class="headerlink" title="偏移尺寸"></a>偏移尺寸</h5><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210126183341271.png" alt="image-20210126183341271" style="zoom:80%;" /><h5 id="客户端尺寸"><a href="#客户端尺寸" class="headerlink" title="客户端尺寸"></a>客户端尺寸</h5><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210126183438341.png" alt="image-20210126183438341" style="zoom:80%;" /><p>除此之外还有一个 <strong>滚动尺寸</strong></p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210126185456551.png" alt="image-20210126185456551" style="zoom:80%;" /><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>这一部分都是很原生的事件程序，可能vue的底层是基于这些来实现的，但我不会太过于记录</p><p><strong>冒泡</strong></p><p>事件被定义为从最具体的元素（文档树中最深的节点）开始触发，然后向上传播至没有那么具体的元素</p><p>DOM2 Events 规范规定事件流分为 3 个阶段：<strong>事件捕获、到达目标和事件冒泡</strong>。事件捕获最先发生，为提前拦截事件提供了可能。然后，实际的目标元素接收到事件。最后一个阶段是冒泡，最迟要在这个阶段响应事件</p><p>还有一些事件处理程序 如：click mouse这些    <strong>addEventListener()    removeEventListener()</strong> </p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"Click Me"</span> onclick<span class="token operator">=</span><span class="token string">"console.log(event.type)"</span><span class="token operator">></span><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myBtn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "click" </span><span class="token punctuation">}</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "click" </span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210126215301158.png" alt="image-20210126215301158" style="zoom:80%;" /><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 取得鼠标事件的客户端位置</span><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Client coordinates: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>clientX<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>clientY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取得鼠标事件的页面位置</span><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Page coordinates: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>pageX<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>pageY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最好限制一个页面中事件处理程序的数量，因为它们会占用过多内存，导致页面响应缓慢</p><h4 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h4><p>之前简单看了一下感觉讲了一些基本的东西，没有太深入，这里就不记了</p><p>如果需要的话，看一下教学视频感觉也比这个要好</p><p>后面还有一些关于<strong>表单脚本</strong>（里面关于富文本编辑器的那一节会简单写下），除了这个还有一些其他的感觉没他大用的，所以后面会比前面更精简的记录一些核心知识点</p><h5 id="富文本编辑"><a href="#富文本编辑" class="headerlink" title="富文本编辑"></a>富文本编辑</h5><p>这里没有记录js如何引入富文本编辑器，只是说了一下编辑器的一些属性，就挑着一些记一下吧</p><p><strong>contenteditable</strong> 让任何一个元素都可编辑</p><p>好吧，都是一堆关于编辑器的属性，没啥好记的</p><h4 id="重要的API"><a href="#重要的API" class="headerlink" title="重要的API"></a>重要的API</h4><p>这里就记一些感觉重要的api</p><p><strong>Atomics</strong> 原子性操作，主要是对缓冲区里面的值进行操作，有 add or and xor这些读写 与 异或等操作</p><p><strong>postMessage()</strong> 跨上下文交流消息，主要是对iframe这种两个页面之间进行交流</p><p><strong>文本编码</strong></p><p>TextEncoder、TextEncoderStream、TextDecoder 和 TextDecoderStream</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> textEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> decodedText <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span> <span class="token keyword">const</span> encodedText <span class="token operator">=</span> textEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>decodedText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// f 的 UTF-8 编码是 0x66（即十进制 102）</span><span class="token comment" spellcheck="true">// o 的 UTF-8 编码是 0x6F（即二进制 111）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uint8Array(3) [102, 111, 111]</span><span class="token keyword">const</span> decodedText1 <span class="token operator">=</span> textDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decodedText1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo</span><span class="token comment" spellcheck="true">// 特殊字符可能会占多个索引</span><span class="token keyword">const</span> decodedText1 <span class="token operator">=</span> <span class="token string">'☺'</span><span class="token punctuation">;</span> <span class="token keyword">const</span> encodedText1 <span class="token operator">=</span> textEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>decodedText<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ☺的 UTF-8 编码是 0xF0 0x9F 0x98 0x8A（即十进制 240、159、152、138）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encodedText1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uint8Array(4) [240, 159, 152, 138]</span></code></pre><h5 id="file类型"><a href="#file类型" class="headerlink" title="file类型"></a>file类型</h5><p>每个 File 对象都有一些只读属性：</p><ul><li>name：本地系统中的文件名。</li><li>size：以字节计的文件大小。</li><li>type：包含文件 MIME 类型的字符串。</li><li>lastModifiedDate：表示文件最后修改时间的字符串。这个属性只有 Chome 实现了。</li></ul><hr><p>File API 还提供了 FileReader 类型，让我们可以实际从文件中读取数据</p><p>FileReader 类型提供了几个读取文件数据的方法。</p><ul><li>readAsText(file, encoding)：从文件中读取纯文本内容并保存在 result 属性中。第二个参数表示编码，是可选的。</li><li>readAsDataURL(file)：读取文件并将内容的数据 URI 保存在 result 属性中。</li><li>readAsBinaryString(file)：读取文件并将每个字符的二进制数据保存在 result 属性中。</li><li>readAsArrayBuffer(file)：读取文件并将文件内容以 ArrayBuffer 形式保存在 result 属性</li></ul><p>每个 FileReader 会发布几个事件，其中 3 个最有用的事件是progress、error 和 load，分别表示还有更多数据、发生了错误和读取完成。</p><hr><p>还有一个Blob对象，表示一个二进制大对象，是 JavaScript 对不可修改二进制数据的封装类型</p><p>还有一个对象URL（Blob URL），是指引用存储在 File 或 Blob 中数据的 URL。对象 URL 的优点是不用把文件内容读取到 JavaScript 也可以使用文件。</p><p>要创建对象 URL，可以使用 window.URL.createObjectURL()方法并传入 File 或 Blob 对象。这个函数返回的值是一个指向内存中地址的字符串。因为这个字符串是 URL，所以可以在 DOM 中直接使用，以前好像见过有一个下载文件的代码就好像使用了这个</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 使用blob对象存储下载文件</span> <span class="token function">downUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// window.open(_this.detail.imgUrl)</span>    <span class="token keyword">let</span> xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意这里</span>    xmlhttp<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"blob"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在请求完成的时候</span>    xmlhttp<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">;</span>        <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 还有这里</span>        link<span class="token punctuation">.</span>href <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span>download <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> evt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token string">"MouseEvents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        evt<span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>还有一个读取拖放文件的功能，结合拖放的元素api和file的api进行实现</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> droptarget <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"droptarget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>  output <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  files<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">;</span>  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">"drop"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 在这里读取文件</span>     files <span class="token operator">=</span> event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>files<span class="token punctuation">;</span>      i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      len <span class="token operator">=</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>          info <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes)&lt;br>`</span></span><span class="token punctuation">;</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      output<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> info<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> droptarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragenter"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span> droptarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span> droptarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> handleEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><strong>媒体元素</strong></p><p>比如 <video> <audio> 这两个标签里面就有一些属性和事件需要注意</p><h5 id="Page-Visibility-API"><a href="#Page-Visibility-API" class="headerlink" title="Page Visibility API"></a><strong>Page Visibility API</strong></h5><p>这个api表示下面 4 种状态之一：</p><ul><li>页面在后台标签页或浏览器中最小化了。</li><li>页面在前台标签页中。</li><li>实际页面隐藏了，但对页面的预览是可见的（例如在 Windows 7 上，用户鼠标移到任务栏图标上会显示网页预览）。</li><li>页面在屏外预渲染。</li></ul><p>可根据这个api判断用户是否需要显示这个页面，由此能知道是否应该暂停轮询服务器、更新动画这些</p><h5 id="计时api"><a href="#计时api" class="headerlink" title="计时api"></a>计时api</h5><pre><code>// 毫秒精度const t0 = Date.now();// 微妙精度const t1 = window.performance.now()</code></pre><p>还有一些关于测量页面性能、加载时间这些的api就不记了</p><p>后面还有关于随机数和加密的api</p><p>浏览器调试的 debugger （在代码里面写上） 之后就能在浏览器控制台一步步执行调试</p><hr><p>后面还有一些关于网络请求的api 如<strong>xhr</strong>（上面有其使用方式，其忽悠同源策略，所以就有了一些cores的跨域手段）    <strong>fetch</strong>这些，感觉现在基本没有用到这些，就不进行记录了</p><pre class=" language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'bar.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Response { type: "basic", url: ... }</span></code></pre><hr><p><strong>web socket</strong></p><p>通过一个长时连接实现与服务器全双工、双向的通信</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 必须给 WebSocket 构造函数传入一个绝对 URL。同源策略不适用于 Web Socket，因此可以打开到任意站点的连接</span><span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://www.example.com/server.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> stringData <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> arrayBufferData <span class="token operator">=</span> Uint8Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> blobData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>stringData<span class="token punctuation">)</span><span class="token punctuation">;</span> socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>arrayBufferData<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>blobData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 服务端向客户端发送信息时进行接收</span>socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 对数据执行某些操作</span><span class="token punctuation">}</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还有一些关于连接状态之类的api就不记了</p><hr><p>下面是一些关于客户端存储的东西</p><p><strong>cookie（主要是跟服务器进行沟通时进行交换）    **    **storage（持久化存储大量数据 存储上限由浏览器决定 有两种 session/local）</strong>    </p><p>还有一个<strong>indexDB</strong>，一个类似mysql的数据库，使用对象存储</p><hr><p>下一个是 <strong><a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html" target="_blank" rel="noopener">web worker</a></strong> 用来创建一个子线程进行一些操作并与主线程进行沟通</p><p>主要是用来执行一些耗费时间的任务，如网络请求、文件输入输出这些会导致主线程卡顿的任务</p><pre class=" language-js"><code class="language-js">emptyWorker<span class="token punctuation">.</span>js<span class="token comment" spellcheck="true">// 空的 JS 工作者线程文件</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'You said: '</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>main<span class="token punctuation">.</span>jsconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "https://example.com/" </span><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href <span class="token operator">+</span> <span class="token string">'emptyWorker.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Worker {}</span>worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received message '</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>后面还有一些关于worker安全性之类的东西</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>这就是一个简单的看了一遍书，对书中的重难点都没有怎么深入核心，可能原因是现在还没有见过这些东西，或者说现在我是用的都是别人封装好的框架、轮子，只是使用，对其底层原理并没有深入，所以就先这样吧。以后如果有需要再对这些底层的东西进行深入了解</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scss less的简单学习</title>
      <link href="/2021/01/10/scss%20less%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/01/10/scss%20less%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.sass.hk/" target="_blank" rel="noopener">scss官网</a></p><p><a href="https://less.bootcss.com/#%E6%A6%82%E8%A7%88" target="_blank" rel="noopener">less官网</a></p><p><a href="http://www.zhuchuli.cn:4000/hexo-theme-huxblog/2020/11/22/less/" target="_blank" rel="noopener">less较详细的教程</a></p><p>为什么这两个我都要去看一眼啦，主要是看了一些文章，感觉对如何选择项目里面使用这两种css预编译器有了些想法，公司用啥就用啥，但个人而言还是使用less吧，因为安装方便，而且目前还没有经过太复杂的项目css管理，所以就先这样吧</p><p>目前主要学习less</p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>vue项目里面使用less的话。直接在vue-cli创建的时候选择即可</p><p>或者</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token function">less</span> --save-dev</code></pre><p>目前使用 less 最常用的应该是其可以直接进行嵌套写css，不需要写一长串的选择之后再写样式，可以直接嵌套</p><p>Less中的注释：</p><ul><li><code>//</code>： 以<code>//</code>开始的注释，不会被编译到css文件中</li><li><code>/**/</code>：以<code>/**/</code>包裹的注释会被编译在css的文件中</li></ul><p>而另一个应该就是自定义变量了，只需引入就可使用。可以很方便的进行更换主题配色之类的</p><pre class=" language-less"><code class="language-less"><span class="token variable">@width<span class="token punctuation">:</span></span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token variable">@height<span class="token punctuation">:</span></span> <span class="token variable">@width</span> <span class="token operator">+</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token selector">#header</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 还有选择器的格式，注意不能使用选择器的格式选择变量，如width:@{width} 是没用的</span><span class="token variable">@urlImg<span class="token punctuation">:</span></span> <span class="token string">"https://free.img.jpg.ink/imgs/2020/11/21/c59141c275a4e.jpeg"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*作为url */</span><span class="token selector">.header3</span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("@{urlImg}")</span> no<span class="token operator">-</span>repeat<span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h5><pre class=" language-less"><code class="language-less"><span class="token selector">.bordered</span> <span class="token punctuation">{</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> dotted <span class="token number">1</span>px black<span class="token punctuation">;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token number">2</span>px black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 可定义默认值参数</span><span class="token selector">.border1(<span class="token variable">@color</span>:black)</span> <span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid <span class="token variable">@color</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#menu a</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#111</span><span class="token punctuation">;</span>  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">footer</span> <span class="token punctuation">{</span>    <span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>        <span class="token mixin-usage function">.border1</span><span class="token punctuation">(</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你还可以使用此方法将伪选择器（pseudo-selectors）与混合（mixins）一同使用。下面是一个经典的 clearfix 技巧，重写为一个混合（mixin） (<code>&amp;</code> 表示当前选择器的父级）：</p><pre class=" language-less"><code class="language-less"><span class="token selector">.clearfix</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token selector">&amp;:after</span> <span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="规则嵌套和冒泡"><a href="#规则嵌套和冒泡" class="headerlink" title="@规则嵌套和冒泡"></a>@规则嵌套和冒泡</h5><p>@ 规则（例如 <code>@media</code> 或 <code>@supports</code>）可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，同一规则集中的其它元素的相对顺序保持不变。这叫做冒泡（bubbling）。</p><pre class=" language-less"><code class="language-less"><span class="token selector">.component</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>    <span class="token atrule">@media  <span class="token punctuation">(</span>min-resolution<span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>      <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(/img/retina2x.png)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token atrule">@media <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编译为：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.component</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector"><span class="token class">.component</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">min-resolution</span><span class="token punctuation">:</span> 192dpi<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector"><span class="token class">.component</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(/img/retina2x.png)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1280px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token selector"><span class="token class">.component</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="运算（Operations）"><a href="#运算（Operations）" class="headerlink" title="运算（Operations）"></a>运算（Operations）</h5><p>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 可以对任何数字、颜色或变量进行运算。如果可能的话，算术运算符在加、减或比较之前会进行单位换算。计算的结果以最左侧操作数的单位类型为准。如果单位换算无效或失去意义，则忽略单位。无效的单位换算例如：px 到 cm 或 rad 到 % 的转换。</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// 所有操作数被转换成相同的单位</span><span class="token variable">@conversion-1<span class="token punctuation">:</span></span> <span class="token number">5</span>cm <span class="token operator">+</span> <span class="token number">10</span>mm<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果是 6cm</span><span class="token variable">@conversion-2<span class="token punctuation">:</span></span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3</span>cm <span class="token operator">-</span> <span class="token number">5</span>mm<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果是 -1.5cm</span><span class="token comment" spellcheck="true">// conversion is impossible</span><span class="token variable">@incompatible-units<span class="token punctuation">:</span></span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span>px <span class="token operator">-</span> <span class="token number">3</span>cm<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果是 4px</span><span class="token comment" spellcheck="true">// example with variables</span><span class="token variable">@base<span class="token punctuation">:</span></span> <span class="token number">5%</span><span class="token punctuation">;</span><span class="token variable">@filler<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果是 10%</span><span class="token variable">@other<span class="token punctuation">:</span></span> <span class="token variable">@base</span> <span class="token operator">+</span> <span class="token variable">@filler</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果是 15%</span></code></pre><hr><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>less内置了一些常用的函数，可以直接在style里面进行使用</p><hr><p>还有作用域这种东西，主要是配合变量一起使用</p><hr><h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><p>“导入”的工作方式和你预期的一样。你可以导入一个 <code>.less</code> 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 <code>.less</code> 扩展名，则可以将扩展名省略掉：</p><pre class=" language-css"><code class="language-css">// 注意是@import 进行导入，不要省略了@<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"library"</span><span class="token punctuation">;</span></span> // library<span class="token number">.</span>less<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"typo.css"</span><span class="token punctuation">;</span></span></code></pre><h4 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h4><p>感觉scss如果一般的使用的话，最大的区别就是对变量的区别了，scss的变量以 <strong>$</strong> 开头，less以 <strong>@</strong> 开头</p>]]></content>
      
      
      
        <tags>
            
            <tag> scss less vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDo uniapp技术问题集合</title>
      <link href="/2020/12/11/IDo-uniapp%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"/>
      <url>/2020/12/11/IDo-uniapp%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>就是一个对于uniapp微信小程序项目遇到的技术问题和解决方法，还有一些关于uniapp和其他杂乱的知识的集合</p><p><a href="https://ask.dcloud.net.cn/article/35489" target="_blank" rel="noopener">关于uni-app的ui库、ui框架、ui组件</a></p><p><a href="http://www.uviewui.com/components/intro.html" target="_blank" rel="noopener">使用的组件库uview</a></p><p><a href="https://gitee.com/cheng_song/ido-practice-management" target="_blank" rel="noopener">码云代码仓库</a></p><h4 id="1-单位"><a href="#1-单位" class="headerlink" title="1.单位"></a>1.单位</h4><p>一般直接使用uniapp自定义的<strong>rpx</strong>单位和vw、vh来进行单位的设置，rem、百分比这个主要适用于响应式，但这只是一个微信小程序，所以使用rpx即可，uniapp将所有手机的屏幕都看成750rpx，可根据这个来进行布局设置</p><h3 id="前端页面逻辑"><a href="#前端页面逻辑" class="headerlink" title="前端页面逻辑"></a>前端页面逻辑</h3><p>主体页面：</p><ul><li><p>登录页：输入账号密码可登录，也可点击注册按钮进行企业人员注册，之后就跳转到首页</p></li><li><p>注册页：输入工号和注册码，同时就在这里就确认其密码，点击注册后就跳转到企业人员的首页</p></li><li><p>首页：目前主要展示一些酒店的招聘信息和企业信息这些，后面迭代时加入简历投递的功能</p></li><li><p>实习圈：分为两个页面，可左右进行滑动切换（目前还未对里面的内容进行管理实现）</p><ul><li>加油站：显示学生、老师、企业人员发布的一些加油打气的消息，里面可携带每周主题。同时其他人可以对这个消息进行点赞评论</li><li>撕逼墙：显示所有人的吐槽，所有的信息都是匿名发布的，同时所有的点赞、评论也都是匿名的</li></ul></li></ul><ul><li><p>发布：用户先选择发布什么类型的消息（是加油站还是撕逼墙），之后进行编辑页面，可输入文字和图片选择（只能选一张），还可选择是否携带每周主题</p></li><li><p>消息：类似csdn的消息界面（移动端），在里面会看到总的消息和消息分类</p><ul><li>守护天使：点击消息界面的守护天使选项后，进行选择界面（选择是其天使还是其守护）之后再次进行点击进入聊天界面进行聊天（目前还只能文字，不能发图片） </li></ul></li><li><p>我的：根据登录人员的类型显示不同的内容</p><ul><li>学生端：头像、姓名、所在酒店和部门、我的简历、实习宝藏、设置</li><li>企业端：实习宝藏审核</li><li>老师端：学生实习宝藏情况查看，就是直接跳转到学生可以看到的实习宝藏排行页面</li></ul></li></ul><h3 id="uniapp使用总结"><a href="#uniapp使用总结" class="headerlink" title="uniapp使用总结"></a>uniapp使用总结</h3><p>为何使用uniapp</p><p>主要是因为我们自己的需求可能需要多端的应用，为了以后的方便，所以直接使用uniapp这一个多端跨平台的框架来进行前端开发。而且其目前是基于vue2.x的语法进行开发，而目前vue2是比较成熟的一个体系，所以综合选择了uniapp</p><p>使用技术</p><p>因为uniapp自己的限制，所以就没有使用vue-router了，而直接使用其知道的page.json进行页面路由的管理；此外使用了vuex进行全局状态管理，并使用本地缓存技术将一些比较核心的数据缓存在本地；使用uview的组件库，让页面的美观度更好；使用uview的网络请求拦截和全局api管理；使用scss优化css的编写</p><p>使用体验</p><p>目前来看，uniapp为了跨平台，对vue的一些扩展进行了删减，例如vuex的全局状态，在uniapp的官方文档里面其实很少见这个东西，还是自己对这个项目进行一个扩展，所以一些原来的vuex的为了进行良好管理的功能都没有了，所以一个不注意，就会造成各种奇怪的bug。至于其他的一些东西，有一些奇怪的bug，不知道是因为uniapp自己的还是uview组件库的。除此之外，uniapp对目前简单的项目开发还是挺好的，无论是页面路由的管理还是对vue语法的支持都是挺方便的</p><h3 id="页面功能介绍"><a href="#页面功能介绍" class="headerlink" title="页面功能介绍"></a>页面功能介绍</h3><p>pages目录的页面结构和介绍</p><pre class=" language-js"><code class="language-js">├── error│   └── error<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//错误页面，当出现错误时跳转到这个页面</span>├── home│   └── home<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//”首页“页面，一登录成功后跳转到这个页面</span>├── internship│   └── internship<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//”实习圈“页面，目前的计划还未迭代到这里</span>├── login│   ├── loginForm<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//登录页面，所有的用户都是在这个页面登录</span>│   └── register<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//注册页面，企业员工使用企业注册码在这个页面填写个人信息并注册，注册成功后跳转到登录页面登录</span>└── student    ├── addMessage    │   ├── addMessage<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//发布页面，用户选择需要发布的消息类型</span>    │   └── edit<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//消息的编辑页面，目前只是一个页面，还未与后台有联系</span>    ├── message    │   ├── guardAngel    │   │   ├── chat<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//聊天界面，目前还只能发送文字，还未能发送图片，支持下拉刷新，消息更新</span>    │   │   └── guardAngel<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//守护天使的选择界面，选择与哪一位进行聊天</span>    │   ├── interview    │   │   └── interview<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//还未迭代到这里来</span>    │   ├── lectureMeeting    │   │   └── lectureMeeting<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//还未迭代到这里来</span>    │   ├── message<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//”消息“页面，主要显示系统消息和一些实习通知，守护天使通知等</span>    │   ├── messageDetails<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//消息详情页面</span>    │   └── monthlySummary    │       └── monthlySummary<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//还未迭代到这里来</span>    └── my        ├── my<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//"我的"页面，显示自己的头像姓名和一些功能模块，会根据用户的身份显示不同的功能</span>        ├── myDetails        │   ├── changeIntro<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//修改信息的页面，如修改手机号，密码等</span>        │   └── myDetails<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//”我的“详细信息的页面，可对头像、性别进行修改，还能看自己的一些信息</span>        ├── <span class="token keyword">set</span>        │   └── <span class="token keyword">set</span><span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//”设置“页面，可修改自己的手机号、邮箱、登录密码等</span>        └── treasure            ├── starRank<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//实习宝藏星星数排行页面</span>            ├── submitTask<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//实习宝藏任务提交页面，可提交文字和图片</span>            ├── taskDescribe<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//企业员工审核学生提交的任务和详细信息，并给出自己的分数</span>            ├── taskRecord<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//任务记录页面，可查看自己进行中、审核中和已完成的任务记录</span>            ├── treasure<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//”实习宝藏“页面，可查看目前可进行的任务和已进行、审核中和已完成的任务</span>            └── treasureCheck<span class="token punctuation">.</span>vue <span class="token comment" spellcheck="true">//企业员工的实习宝藏审核页面，查看自己关联学生提交的任务</span></code></pre><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>在uniapp里面的本地缓存的存储和清除的时机有一些问题，需要再理清楚</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDo uniapp vue2.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue nuxt node部署服务器</title>
      <link href="/2020/11/28/vue-nuxt-node%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/28/vue-nuxt-node%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>就以一个对自己的vue和node项目关于服务器部署的各种各样的问题的记录和解决</p><p>首先对于一些先决条件，比如服务器的购买和使用宝塔面板管理服务器，安全组，端口这些，就不记录了</p><p>连接服务器（例子）：ssh <a href="mailto:root@172.20.0.80">root@172.20.0.80</a>（ip地址）</p><p>输入172.20.0.80的密码即可连接到服务器。</p><p><a href="https://www.pianshen.com/article/27801079363/" target="_blank" rel="noopener">vue+node+mysql参考</a></p><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p><strong>跨域</strong>：一般在开发环境下，对于远程的http请求可直接使用vue.config.js里面使用proxy代理一下，处理跨域问题</p><p><a href="https://www.cnblogs.com/bobo1/p/12588079.html" target="_blank" rel="noopener">简单proxy讲解</a></p><p>但如果后端没有对跨域进行处理的话，部署到服务器之后，会有问题，如在本地是对<code>axios.get(&#39;/api/post&#39;,params:{})</code>，本地请求会变成</p><p><code>http://115.159.103.48/post?id=1</code>，得到正确的数据</p><p>但部署之后会变成<code>http://myui.chengsong.info/api/post?id=1</code>，请求失败</p><p>这里的 myui.chengsong.info 在本次开发时显示的是 localhost:8080</p><p>可以对axios封装的时候，可使用</p><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL<span class="token operator">=</span><span class="token string">'后端ip地址'</span>    <span class="token comment" spellcheck="true">//例：http://47.99.134.126:28019/api</span></code></pre><p>后面再进行axios请求的时候，部署到服务器就不会有这些问题了</p><p>其实更好的是在后端直接处理跨域，然后就不用代理这个东西了</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置跨域访问</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> response<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//设置允许跨域的域名，*代表允许任意域名跨域</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//允许的header类型</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"X-Requested-With"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跨域允许的请求方式</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span><span class="token string">"PUT,POST,GET,DELETE,OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置响应头信息</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"X-Powered-By"</span><span class="token punctuation">,</span><span class="token string">' 3.2.1'</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还有一些其他的更具体的对允许跨域的域名的控制，需要的时候，再进行处理</p><p><strong>部署</strong>：项目使用<code>npm run build</code>打包之后，直接将dist目录里面的文件全部上传到服务器里面，然后在宝塔里面添加网站</p><p>例：myui.chengsong.info（创建站点时输入的网址）    然后将上传的dist目录与其相对应，可以修改配置文件</p><p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201128164515904.png" alt="image-20201128164256348"></p><p>然后DNS也要添加解析到自己的服务器ip</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201128164256348.png" alt="image-20201128164515904" style="zoom:80%;" /><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201223113254905.png" alt="image-20201223113254905" style="zoom:67%;" /><p>后面基本就可以使用这个网站名进行访问了</p><h3 id="nuxt"><a href="#nuxt" class="headerlink" title="nuxt"></a>nuxt</h3><h4 id="服务器渲染应用部署"><a href="#服务器渲染应用部署" class="headerlink" title="服务器渲染应用部署"></a>服务器渲染应用部署</h4><p><a href="https://www.aijiumai.cn/view/item/62.html" target="_blank" rel="noopener">简单教程</a></p><p><a href="https://blog.csdn.net/weixin_30646315/article/details/98028293" target="_blank" rel="noopener">有些难看的教程</a></p><p>1.首先在宝塔面板里面添加一个站点，跟上面的vue部署差不多</p><p>2.后面再站点里面修改配置文件（注意端口号是在nuxt项目在package.json里面进行修改的）</p><pre class=" language-js"><code class="language-js"><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"firstStudy"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"private"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"nuxt"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"nuxt build"</span><span class="token punctuation">,</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"PORT=3003 nuxt start"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//注意这里的port，在部署的时候会运行在这个端口上，主要是为了防止服务器端口冲突</span>    <span class="token string">"generate"</span><span class="token punctuation">:</span> <span class="token string">"nuxt generate"</span><span class="token punctuation">,</span>    <span class="token string">"lint:js"</span><span class="token punctuation">:</span> <span class="token string">"eslint --ext \".js,.vue\" --ignore-path .gitignore ."</span><span class="token punctuation">,</span>    <span class="token string">"lint"</span><span class="token punctuation">:</span> <span class="token string">"yarn lint:js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210203180924769.png" style="zoom:80%;" /><p>3.设置一个反向代理，主要是因为在服务器里面执行 npm run start 之后其实是在本地服务器的，需要代理到我们创建的站点上面</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210203181140550.png" alt="image-20210203181140550" style="zoom:80%;" /><p>4.本地<code>npm run build</code>后，将build后的文件上传到服务器上面新建站点的对应目录中，有四个文件，具体的文件看上面的教程吧</p><p>5.在服务器上使用pm2开启进程守护</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#在站点对应的目录里面执行</span>pm2 start <span class="token function">npm</span> --name <span class="token string">"my-nuxt"</span> -- run start  <span class="token comment" spellcheck="true">#my-nuxt为我们自定义的项目名称，也是我们自定义的守护进程名称</span><span class="token comment" spellcheck="true">#可使用 pm2 list 查看所有的pm2守护，也可直接使用宝塔面板自带的可视化pm2进行查看</span></code></pre><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210203185141914.png" alt="image-20210203185141914" style="zoom:80%;" /><p>之后就能通过站点对应的域名进行访问了</p><h4 id="静态应用部署"><a href="#静态应用部署" class="headerlink" title="静态应用部署"></a>静态应用部署</h4><p>在nuxt项目里面执行</p><pre><code>npm run generate</code></pre><p>之后将build出的dist目录上传到服务器的一个目录里，之后的步骤就跟上面的vue项目部署差不多了</p><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>关于node的项目部署</p><p><a href="https://blog.csdn.net/l_ppp/article/details/106085916" target="_blank" rel="noopener">参考链接</a></p><p><a href="https://www.bwmelon.com/archives/27/" target="_blank" rel="noopener">node部署参考</a>：比较细节</p><p>将nodejs的文件除开node_module目录打包之后，上传到服务器，然后解压，使用pm2对nodejs解压目录进行链接（需要先在终端目录里面使用    <code>npm install</code> 安装依赖），这里的端口号是node项目app.js文件里面监听的端口号</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201128165455499.png" alt="image-20201128165455499" style="zoom:67%;" /><p>需要将这个node项目映射到自己的服务器公网ip或者域名（域名需要在DNS里面添加解析），然后重启</p><p>添加了之后，就会在网站里面自动新建一个站点，在站点里面进行了反向代理，才能使得外部可访问</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210203190717110.png" alt="image-20210203190717110" style="zoom:80%;" /><p>之后使用ip+端口号就能访问和请求得到数据，例：<a href="http://115.159.103.48:5000/" target="_blank" rel="noopener">http://115.159.103.48:5000/</a></p><p>或者域名访问    例：<a href="http://api.chengsong.info/post?id=1" target="_blank" rel="noopener">http://api.chengsong.info/post?id=1</a> 或  <a href="http://api.chengsong.info:5000/post?id=1" target="_blank" rel="noopener">http://api.chengsong.info:5000/post?id=1</a> </p><p>自己踩得坑：</p><p>上面的跨域问题的处理，需要解决。</p><p>然后一般会使用到数据库，如mysql，mongodb这些，需要将原来建的表和数据导入到宝塔自带的数据库里面，然后需要在node项目里面关于链接数据库的js文件里面修改数据库名和用户名才能使用</p><p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201128165753322.png" alt="image-20201128165809874"></p><p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201128165809874.png" alt="image-20201128165753322"></p><h3 id="域名相关"><a href="#域名相关" class="headerlink" title="域名相关"></a>域名相关</h3><p>对域名的SSL证书添加</p><p>我自己用的是腾讯云的域名，所以使用腾讯自己的免费SSL证书就行了</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210203191625079.png" alt="image-20210203191625079" style="zoom:80%;" /><p>之后在宝塔面板里面对网站站点进行SSL证书申请和部署即可</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210203192016104.png" alt="image-20210203192016104" style="zoom:80%;" /><p>后面就可通过<strong>https</strong>进行访问</p>]]></content>
      
      
      
        <tags>
            
            <tag> node 服务器 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux知识点复习</title>
      <link href="/2020/11/21/linux%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%8D%E4%B9%A0/"/>
      <url>/2020/11/21/linux%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>对大三上的linux课和书本上的一些重要知识点的简单总结</p><h4 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章    概述"></a>第一章    概述</h4><p>页7 linux内核是一个单内核的结构，相对于微内核来说，从整体上把内核作为一个大过程来看，而进程管理，内存管理是其中的一个模块。效率高，但难以维护和修改，微内核与其相反</p><p>页9 linux内核除系统调用之外还有5个主要的子系统：进程调度、内存管理、虚拟文件系统、网络接口、进程间通信。中心是进程调度，其他子系统都依赖于它</p><h4 id="第二章-内存寻址"><a href="#第二章-内存寻址" class="headerlink" title="第二章    内存寻址"></a>第二章    内存寻址</h4><p>分段（虚拟地址-&gt;线性地址），分页（线性地址-&gt;物理地址）</p><p>页24 80x86的寄存器</p><p>4个32位的控制寄存器用于分页机制，CR0控制是否在保护模式和是否分页，CR3保存页目录的基址</p><p>物理地址，虚拟地址（段选择符：偏移量），线性地址</p><h5 id="段机制"><a href="#段机制" class="headerlink" title="段机制"></a>段机制</h5><p>段的基址，界限，保护属性</p><p>线性地址：基址+界限</p><p>段描述表，存储索引（段寄存器存的索引）、基址、界限、属性。其中表项即为段描述符</p><p>页29 地址转换，linux中的段机制（基址为0，界限为4GB）</p><h5 id="页机制"><a href="#页机制" class="headerlink" title="页机制"></a>页机制</h5><p>将线性空间划分为若干大小相等的片（4KB），称为页。同样，物理地址空间也划分成相等大小的物理页</p><p>页表：物理页面基址，页的属性。低12位记录页的属性，页表每一项4个字节就行</p><p>二级页表：页表再分页，第一级称为页目录，存放页表信息。4个字节线性地址结构：10位页目录，10位页，12位页内偏移量</p><p>第二级称为页表，每个页表存放在一个4KB的页中，包含1K个页表项</p><p>页表项结构</p><p>页34 二级页表的详细地址转换</p><h4 id="第三章-进程"><a href="#第三章-进程" class="headerlink" title="第三章    进程"></a>第三章    进程</h4><p>程序与进程</p><p>进程=正文段+用户数据段+系统数据段</p><p>进程控制块PCB是进程存在与运行的唯一标志，存放于内核的内核栈中</p><p>内核可通过PID找到对应的PCB</p><p>进程的组织方式：hash表存储，使用链地址法处理冲突的PID</p><p>等待队列</p><p>进程调度，公平、高效、响应时间、周转时间、吞吐量</p><p>时间片轮转调度算法、优先权调度算法（抢占式，非抢占式）、多级反馈队列调度算法、实时调度</p><p>进程调度时机：进程状态转换的时刻（进程终止，进程休眠）、当前进程时间片用完、设备驱动程序运行、内核态返回到用户态</p><p>进程调度依据，task_struct结构中的与调度相关的域，goodness()函数结合这些域，为每个可运行进程分配一个权值，调度程序以这个权值作为进程选择的唯一依据</p><p>linux2.6版本对进程调度算法的改进</p><p>页73 进程的创建</p><p>创建和执行 ：fork() exec()      写时复制（fork并没有直接复制父进程的全部资源，只有当需要修改的时候才对被修改部分进行拷贝，实际开销只是复制父进程的页表和创建的PCB）    一般来说，子进程先执行    克隆进程时，运行父进程和子进程共享相同的资源</p><p>线程及其创建，内核将线程视作一个使用某些共享资源的进程</p><p>wait() exit()</p><h4 id="第四章-内存管理"><a href="#第四章-内存管理" class="headerlink" title="第四章    内存管理"></a>第四章    内存管理</h4><p>虚拟内存，内核空间（所有进程共享 32位系统1GB），用户空间（3GB）</p><p>页87 虚拟内存的实现机制</p><p>进程的用户空间（从上至下）：堆栈段、BSS（未初始化的数据段）、数据段、代码段</p><p>进程用户空间的两个数据结构的描述 mm_struct（内存描述符） vm_area_structs（虚存取描述符）</p><p>页98 请页机制（进程运行时，只会将用户空间的少量页装入物理内存，所以可能会发生缺页异常）</p><p>外碎片：已分配的内存块中分散许多小块的空闲页面</p><p>页103 使用伙伴算法解决外碎片，但伙伴算法无法分配比较小的内存（如几十字节）只能分配一个完整的页，所以会产生内碎片（如结构体内存对齐产生内碎片）</p><p>使用slab算法解决内碎片</p><p>kmalloc()分配在物理上页是连续的，但vmalloc()物理内存无需连续（分配时的性能消耗更大）</p><p>交换机制，将内存的内容与专用的磁盘空间进行交换，交换的单位是页面而不是进程</p><p>考虑三个问题：那种页面要换出、如何在交换区存放页面、如何选择被交换出的页面</p><p>页119 cpu使用虚拟地址而不是物理地址</p><h4 id="第五章-中断和异常"><a href="#第五章-中断和异常" class="headerlink" title="第五章    中断和异常"></a>第五章    中断和异常</h4><p>外设可屏蔽中断（外部i/o请求） 使用中断控制器</p><p>异常（cpu内部出现的中断，计算机内部硬件出现错误 ）不使用中断控制器，也不能被屏蔽</p><p>中断描述符表</p><p><strong>中断处理</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue源码简单解析</title>
      <link href="/2020/11/16/vue%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/11/16/vue%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>只是一个关于vue2.x版本的核心源码简单学习</p><p><a href="https://vue-js.com/learn-vue/" target="_blank" rel="noopener">vue2学习网址</a></p><p><a href="https://hkc452.github.io/slamdunk-the-vue3/main/vue/reactivity/effect.html" target="_blank" rel="noopener">vue3版本（还未完成）</a></p><p>之后vue3.x后面再看吧</p><h4 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h4><p>这里在vue2和vue3之间会有一个比较大的区别，都看一下吧</p><h5 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// vue2对象响应式原理：Object.defineProperty()</span><span class="token comment" spellcheck="true">// 没有进行依赖收集</span><span class="token comment" spellcheck="true">// vue2数组响应式原理：覆盖可以修改数组7个方法</span><span class="token comment" spellcheck="true">// 从数组原型中获取这7个方法，并覆盖为可以发送更新通知的函数实现</span><span class="token keyword">const</span> originalProto <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originalProto<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'shift'</span><span class="token punctuation">,</span> <span class="token string">'unshift'</span><span class="token punctuation">,</span> <span class="token string">'splice'</span><span class="token punctuation">,</span> <span class="token string">'reverse'</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>  method <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 做之前的事情</span>      originalProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 通知更新</span>      <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 思想：递归遍历传入obj，定义每个属性的拦截</span><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断类型：如果是数组则替换它的原型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arrayProto<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">// 对obj每个key执行拦截</span>      <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体定义指定的key拦截器</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 递归遍历</span>  <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// val实际上是一个闭包</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> val    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// val可能是对象</span>        <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>        <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        val <span class="token operator">=</span> newVal      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">notifyUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'页面更新！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> tua<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.普通更新</span> data<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'foooooooo'</span><span class="token comment" spellcheck="true">// 2.嵌套属性更新</span><span class="token comment" spellcheck="true">// data.bar.a = 10</span><span class="token comment" spellcheck="true">// data.dong = 'lalala' // no ok</span><span class="token comment" spellcheck="true">// 3.赋值是对象</span><span class="token comment" spellcheck="true">// data.bar = {a:10}</span><span class="token comment" spellcheck="true">// 4.数组</span><span class="token comment" spellcheck="true">// data.tua.push(4)</span><span class="token comment" spellcheck="true">// 问题分析：</span><span class="token comment" spellcheck="true">// 1.需要响应化的数据较大，递归遍历性能不好、消耗较大</span><span class="token comment" spellcheck="true">// 2.新增或删除属性无法监听</span><span class="token comment" spellcheck="true">// 3.数组响应化需要额外实现</span><span class="token comment" spellcheck="true">// 4.修改语法有限制</span></code></pre><h5 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// vue3响应式原理：利用Proxy对象对数据拦截</span><span class="token keyword">const</span> toProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 形如 obj: observed</span><span class="token keyword">const</span> toRaw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 形如 observed: obj</span><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这里是进行对象响应式的函数</span><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 查找缓存，已经有这个对象的代理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>toProxy<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> toProxy<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 传入obj就是代理对象,此时不用反复代理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>toRaw<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">}</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 访问</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`获取</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 依赖收集</span>      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//如果是对象，继续进行递归代理，不然直接返回</span>      <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">:</span> res    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 新增和更新</span>      <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ADD 或 SET</span>      <span class="token keyword">const</span> oldVal <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`新增</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">'ADD'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`设置</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">'SET'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 删除</span>      <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// key存在并且删除成功</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`删除</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">'DELETE'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> res    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 缓存</span>  toProxy<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> observed<span class="token punctuation">)</span>  toRaw<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>observed<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>  <span class="token keyword">return</span> observed<span class="token punctuation">}</span><span class="token keyword">const</span> activeReativeEffectStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 依赖收集执行</span><span class="token comment" spellcheck="true">// 基本结构{target:{key:[eff1，eff2]}}</span><span class="token keyword">let</span> targetsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//get里面的track调用，将此变量被依赖的地方添加进依赖收集存储</span><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 从栈中获取响应函数</span>  <span class="token keyword">const</span> effect <span class="token operator">=</span> activeReativeEffectStack<span class="token punctuation">[</span>activeReativeEffectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现基本结构</span>    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 首次访问target</span>      depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      targetsMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> depsMap<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 存放key</span>    <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>      deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      depsMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> deps<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//需要进行响应式变化的地方，</span><span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1.异常处理</span>  <span class="token comment" spellcheck="true">// 2.执行函数</span>  <span class="token comment" spellcheck="true">// 3.放置到activeReativeEffectStack</span>  <span class="token keyword">const</span> rxEffect <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      activeReativeEffectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rxEffect<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 执行函数触发依赖收集</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      activeReativeEffectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token function">rxEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 默认立即执行</span>  <span class="token keyword">return</span> rxEffect<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 基本结构{target:{key:[eff1，eff2]}}</span><span class="token comment" spellcheck="true">// 触发target.key对应响应函数，即数据发生了变化，新增或删除这些，进行了监听，并对这些数据进行响应式的变化，执行依赖收集里的函数</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取依赖表</span>  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取响应函数集合</span>    <span class="token keyword">const</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取所有响应函数</span>      deps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>effect <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// effect()</span>        effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 数组新增或删除</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'ADD'</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">'DELETE'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>          deps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>effect <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取已存在的Dep Set执行</span>    effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>effect <span class="token operator">=</span><span class="token operator">></span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">const</span> react <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.获取</span><span class="token comment" spellcheck="true">// react.foo // ok</span><span class="token comment" spellcheck="true">// 2.设置已存在属性</span><span class="token comment" spellcheck="true">// react.foo = 'foooooooo'</span><span class="token comment" spellcheck="true">// 3.设置不存在属性</span><span class="token comment" spellcheck="true">// react.baz = 'bazzzzzz'</span><span class="token comment" spellcheck="true">// 4.嵌套对象</span><span class="token comment" spellcheck="true">// react.bar.a = 10</span><span class="token comment" spellcheck="true">// 避免重复代理</span><span class="token comment" spellcheck="true">// console.log(reactive(data) === react) // true</span><span class="token comment" spellcheck="true">// reactive(react)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'count发生了变化1：'</span><span class="token punctuation">,</span> react<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在get中收集依赖,在set中触发依赖</span><span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里通过react.foo触发了get，而get就根据这个key触发track进行这个key变量的依赖跟踪，因为这个回调函数已经在effect里面缓存到一个数组activeReativeEffectStack里面，</span><span class="token comment" spellcheck="true">//所以在track函数里面就获取这个回调函数，然后判断effect的基本结构里面这个key对应的结构里面是否已经包含了这个方法，即是否已经进行了依赖收集，</span><span class="token comment" spellcheck="true">//如果不存在就添加进去</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'count发生了变化2：'</span><span class="token punctuation">,</span> react<span class="token punctuation">.</span>foo<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// dom</span><span class="token punctuation">}</span><span class="token punctuation">)</span>react<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'fooooooo'</span></code></pre><p>上面的都只是一个简单实现，真正的源码还是要复杂的多，特别是对依赖收集和依赖触发这一个阶段的改变</p><h4 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>所谓虚拟DOM，就是用一个<code>JS</code>对象来描述一个<code>DOM</code>节点，像如下示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"a"</span> id<span class="token operator">=</span><span class="token string">"b"</span><span class="token operator">></span>我是内容<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">{</span>  tag<span class="token punctuation">:</span><span class="token string">'div'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 元素标签</span>  attrs<span class="token punctuation">:</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 属性</span>    <span class="token keyword">class</span><span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">,</span>    id<span class="token punctuation">:</span><span class="token string">'b'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  text<span class="token punctuation">:</span><span class="token string">'我是内容'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 文本内容</span>  children<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true">// 子元素</span><span class="token punctuation">}</span></code></pre><p>我们把组成一个<code>DOM</code>节点的必要东西通过一个<code>JS</code>对象表示出来，那么这个<code>JS</code>对象就可以用来描述这个<code>DOM</code>节点，我们把这个<code>JS</code>对象就称为是这个真实<code>DOM</code>节点的虚拟<code>DOM</code>节点。</p><p>我们可以用<code>JS</code>模拟出一个<code>DOM</code>节点，称之为虚拟<code>DOM</code>节点。当数据发生变化时，我们对比变化前后的虚拟<code>DOM</code>节点，通过<code>DOM-Diff</code>算法计算出需要更新的地方，然后去更新需要更新的视图。</p><p>这就是虚拟<code>DOM</code>产生的原因以及最大的用途</p><h5 id="vue中的虚拟dom实现"><a href="#vue中的虚拟dom实现" class="headerlink" title="vue中的虚拟dom实现"></a>vue中的虚拟dom实现</h5><p>首先会有一个Vnode类，通过这个类可以实现各种的dom节点</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 源码位置：src/core/vdom/vnode.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>    tag<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">,</span>    data<span class="token operator">?</span><span class="token punctuation">:</span> VNodeData<span class="token punctuation">,</span>    children<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">></span><span class="token punctuation">,</span>    text<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">,</span>    elm<span class="token operator">?</span><span class="token punctuation">:</span> Node<span class="token punctuation">,</span>    context<span class="token operator">?</span><span class="token punctuation">:</span> Component<span class="token punctuation">,</span>    componentOptions<span class="token operator">?</span><span class="token punctuation">:</span> VNodeComponentOptions<span class="token punctuation">,</span>    asyncFactory<span class="token operator">?</span><span class="token punctuation">:</span> Function  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag                                <span class="token comment" spellcheck="true">/*当前节点的标签名*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data        <span class="token comment" spellcheck="true">/*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children  <span class="token comment" spellcheck="true">/*当前节点的子节点，是一个数组*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text     <span class="token comment" spellcheck="true">/*当前节点的文本*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elm <span class="token operator">=</span> elm       <span class="token comment" spellcheck="true">/*当前虚拟节点对应的真实dom节点*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ns <span class="token operator">=</span> undefined            <span class="token comment" spellcheck="true">/*当前节点的名字空间*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context          <span class="token comment" spellcheck="true">/*当前组件节点对应的Vue实例*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fnContext <span class="token operator">=</span> undefined       <span class="token comment" spellcheck="true">/*函数式组件对应的Vue实例*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fnOptions <span class="token operator">=</span> undefined    <span class="token keyword">this</span><span class="token punctuation">.</span>fnScopeId <span class="token operator">=</span> undefined    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>key           <span class="token comment" spellcheck="true">/*节点的key属性，被当作节点的标志，用以优化*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>componentOptions <span class="token operator">=</span> componentOptions   <span class="token comment" spellcheck="true">/*组件的option选项*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> undefined       <span class="token comment" spellcheck="true">/*当前节点对应的组件的实例*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> undefined           <span class="token comment" spellcheck="true">/*当前节点的父节点*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>raw <span class="token operator">=</span> <span class="token boolean">false</span>         <span class="token comment" spellcheck="true">/*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isStatic <span class="token operator">=</span> <span class="token boolean">false</span>         <span class="token comment" spellcheck="true">/*静态节点标志*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isRootInsert <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token comment" spellcheck="true">/*是否作为跟节点插入*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isComment <span class="token operator">=</span> <span class="token boolean">false</span>             <span class="token comment" spellcheck="true">/*是否为注释节点*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isCloned <span class="token operator">=</span> <span class="token boolean">false</span>           <span class="token comment" spellcheck="true">/*是否为克隆节点*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isOnce <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token comment" spellcheck="true">/*是否有v-once指令*/</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>asyncFactory <span class="token operator">=</span> asyncFactory    <span class="token keyword">this</span><span class="token punctuation">.</span>asyncMeta <span class="token operator">=</span> undefined    <span class="token keyword">this</span><span class="token punctuation">.</span>isAsyncPlaceholder <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span> child <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentInstance  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>具体的定义还是看官网源码</p><p>可以通过<strong>不同属性的搭配</strong>，可以描述出以下几种类型的节点。</p><ul><li>注释节点</li><li>文本节点</li><li>元素节点</li><li>组件节点</li><li>函数式组件节点</li><li>克隆节点</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注释节点</span><span class="token keyword">export</span> <span class="token keyword">const</span> createEmptyVNode <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  node<span class="token punctuation">.</span>text <span class="token operator">=</span> text  node<span class="token punctuation">.</span>isComment <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">return</span> node<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 文本节点</span><span class="token keyword">export</span> <span class="token keyword">function</span> createTextVNode <span class="token punctuation">(</span>val<span class="token punctuation">:</span> string <span class="token operator">|</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 克隆节点</span><span class="token comment" spellcheck="true">// 克隆节点就是把已有节点的属性全部复制到新节点中，而现有节点和新克隆得到的节点之间唯一的不同就是克隆得到的节点isCloned为true</span><span class="token keyword">export</span> <span class="token keyword">function</span> cloneVNode <span class="token punctuation">(</span>vnode<span class="token punctuation">:</span> VNode<span class="token punctuation">)</span><span class="token punctuation">:</span> VNode <span class="token punctuation">{</span>  <span class="token keyword">const</span> cloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>    vnode<span class="token punctuation">.</span>tag<span class="token punctuation">,</span>    vnode<span class="token punctuation">.</span>data<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// #7975</span>    <span class="token comment" spellcheck="true">// clone children array to avoid mutating original in case of cloning</span>    <span class="token comment" spellcheck="true">// a child.</span>    vnode<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    vnode<span class="token punctuation">.</span>text<span class="token punctuation">,</span>    vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span>    vnode<span class="token punctuation">.</span>context<span class="token punctuation">,</span>    vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">,</span>    vnode<span class="token punctuation">.</span>asyncFactory  <span class="token punctuation">)</span>  cloned<span class="token punctuation">.</span>ns <span class="token operator">=</span> vnode<span class="token punctuation">.</span>ns  cloned<span class="token punctuation">.</span>isStatic <span class="token operator">=</span> vnode<span class="token punctuation">.</span>isStatic  cloned<span class="token punctuation">.</span>key <span class="token operator">=</span> vnode<span class="token punctuation">.</span>key  cloned<span class="token punctuation">.</span>isComment <span class="token operator">=</span> vnode<span class="token punctuation">.</span>isComment  cloned<span class="token punctuation">.</span>fnContext <span class="token operator">=</span> vnode<span class="token punctuation">.</span>fnContext  cloned<span class="token punctuation">.</span>fnOptions <span class="token operator">=</span> vnode<span class="token punctuation">.</span>fnOptions  cloned<span class="token punctuation">.</span>fnScopeId <span class="token operator">=</span> vnode<span class="token punctuation">.</span>fnScopeId  cloned<span class="token punctuation">.</span>asyncMeta <span class="token operator">=</span> vnode<span class="token punctuation">.</span>asyncMeta  cloned<span class="token punctuation">.</span>isCloned <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">return</span> cloned<span class="token punctuation">}</span></code></pre><p><strong>元素节点</strong></p><p>相比之下，元素节点更贴近于我们通常看到的真实<code>DOM</code>节点，它有描述节点标签名词的<code>tag</code>属性，描述节点属性如<code>class</code>、<code>attributes</code>等的<code>data</code>属性，有描述包含的子节点信息的<code>children</code>属性等。由于元素节点所包含的情况相比而言比较复杂，源码中没有像前三种节点一样直接写死（当然也不可能写死），那就举个简单例子说明一下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 真实DOM节点</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>难凉热血<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// VNode节点</span><span class="token punctuation">{</span>  tag<span class="token punctuation">:</span><span class="token string">'div'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>      tag<span class="token punctuation">:</span><span class="token string">'span'</span><span class="token punctuation">,</span>      text<span class="token punctuation">:</span><span class="token string">'难凉热血'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>我们可以看到，真实<code>DOM</code>节点中:<code>div</code>标签里面包含了一个<code>span</code>标签，而<code>span</code>标签里面有一段文本。反应到<code>VNode</code>节点上就如上所示:<code>tag</code>表示标签名，<code>data</code>表示标签的属性<code>id</code>等，<code>children</code>表示子节点数组。</p><p> <strong>组件节点</strong></p><p>组件节点除了有元素节点具有的属性之外，它还有两个特有的属性：</p><ul><li>componentOptions :组件的option选项，如组件的<code>props</code>等</li><li>componentInstance :当前组件节点对应的<code>Vue</code>实例</li></ul><p><strong>函数式组件节点</strong></p><p>函数式组件节点相较于组件节点，它又有两个特有的属性：</p><ul><li>fnContext:函数式组件对应的Vue实例</li><li>fnOptions: 组件的option选项</li></ul><p>以上就是<code>VNode</code>可以描述的多种节点类型，它们本质上都是<code>VNode</code>类的实例，只是在实例化的时候传入的属性参数不同而已。</p><h5 id="VNode的作用"><a href="#VNode的作用" class="headerlink" title="VNode的作用"></a>VNode的作用</h5><p>说了这么多，那么<code>VNode</code>在<code>Vue</code>的整个虚拟<code>DOM</code>过程起了什么作用呢？</p><p>其实<code>VNode</code>的作用是相当大的。我们在视图渲染之前，把写好的<code>template</code>模板先编译成<code>VNode</code>并缓存下来，等到数据发生变化页面需要重新渲染的时候，我们把数据发生变化后生成的<code>VNode</code>与前一次缓存下来的<code>VNode</code>进行对比，找出差异，然后有差异的<code>VNode</code>对应的真实<code>DOM</code>节点就是需要重新渲染的节点，最后根据有差异的<code>VNode</code>创建出真实的<code>DOM</code>节点再插入到视图中，最终完成一次视图更新</p><h4 id="DOM-Diff算法"><a href="#DOM-Diff算法" class="headerlink" title="DOM-Diff算法"></a>DOM-Diff算法</h4><p><a href="http://www.cpengx.cn/p/561.html" target="_blank" rel="noopener">老陈文档</a></p><p><code>VNode</code>最大的用途就是在数据变化前后生成真实<code>DOM</code>对应的虚拟<code>DOM</code>节点，然后就可以对比新旧两份<code>VNode</code>，找出差异所在，然后更新有差异的<code>DOM</code>节点，最终达到以最少操作真实<code>DOM</code>更新视图的目的。而对比新旧两份<code>VNode</code>并找出差异的过程就是所谓的<code>DOM-Diff</code>过程。<code>DOM-Diff</code>算法是整个虚拟<code>DOM</code>的核心所在</p><h5 id="patch"><a href="#patch" class="headerlink" title="patch"></a><strong>patch</strong></h5><p>在<code>Vue</code>中，把 <code>DOM-Diff</code>过程叫做<code>patch</code>过程。patch,意为“补丁”，即指对旧的<code>VNode</code>修补，打补丁从而得到新的<code>VNode</code>，非常形象哈。那不管叫什么，其本质都是把对比新旧两份<code>VNode</code>的过程。我们在下面研究<code>patch</code>过程的时候，一定把握住这样一个思想：所谓旧的<code>VNode</code>(即<code>oldVNode</code>)就是数据变化之前视图所对应的虚拟<code>DOM</code>节点，而新的<code>VNode</code>是数据变化之后将要渲染的新的视图所对应的虚拟<code>DOM</code>节点，所以我们要以生成的新的<code>VNode</code>为基准，对比旧的<code>oldVNode</code>，如果新的<code>VNode</code>上有的节点而旧的<code>oldVNode</code>上没有，那么就在旧的<code>oldVNode</code>上加上去；如果新的<code>VNode</code>上没有的节点而旧的<code>oldVNode</code>上有，那么就在旧的<code>oldVNode</code>上去掉；如果某些节点在新的<code>VNode</code>和旧的<code>oldVNode</code>上都有，那么就以新的<code>VNode</code>为准，更新旧的<code>oldVNode</code>，从而让新旧<code>VNode</code>相同。最后实现最少量的改变DOM，节约资源</p><ul><li>创建节点：新的<code>VNode</code>中有而旧的<code>oldVNode</code>中没有，就在旧的<code>oldVNode</code>中创建。</li><li>删除节点：新的<code>VNode</code>中没有而旧的<code>oldVNode</code>中有，就从旧的<code>oldVNode</code>中删除。</li><li>更新节点：新的<code>VNode</code>和旧的<code>oldVNode</code>中都有，就以新的<code>VNode</code>为准，更新旧的<code>oldVNode</code>。</li></ul><p><strong>创建节点</strong></p><p>实际上只有3种类型的节点能够被创建并插入到<code>DOM</code>中，它们分别是：元素节点、文本节点、注释节点。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 源码位置: /src/core/vdom/patch.js</span><span class="token keyword">function</span> createElm <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data    <span class="token keyword">const</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children    <span class="token keyword">const</span> tag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>tag    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// nodeOps.createElement是vue为了兼容性封装的一个创建节点的函数，在浏览器端等同于document.createTextNode()</span>          vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 创建元素节点</span>        <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建元素节点的子节点</span>        <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 插入到DOM中</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isComment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createComment</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 创建注释节点</span>      <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// 插入到DOM中</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 创建文本节点</span>      <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// 插入到DOM中</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p><strong>删除节点</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> removeNode <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> parent <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取父节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      nodeOps<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> el<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 调用父节点的removeChild方法</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p><strong>更新节点</strong>（重点）</p><p>更新节点就是当某些节点在新的<code>VNode</code>和旧的<code>oldVNode</code>中都有时，我们就需要细致比较一下，找出不一样的地方进行更新</p><p>更新节点的时候我们需要对以下3种情况进行判断并分别处理（是更新不是删除、增加）：</p><ol><li><p>如果<code>VNode</code>和<code>oldVNode</code>均为静态节点</p><p>我们说了，静态节点无论数据发生任何变化都与它无关，所以都为静态节点的话则直接跳过，无需处理。</p></li><li><p>如果<code>VNode</code>是文本节点</p><p>如果<code>VNode</code>是文本节点即表示这个节点内只包含纯文本，那么只需看<code>oldVNode</code>是否也是文本节点，如果是，那就比较两个文本是否不同，如果不同则把<code>oldVNode</code>里的文本改成跟<code>VNode</code>的文本一样。如果<code>oldVNode</code>不是文本节点，那么不论它是什么，直接调用<code>setTextNode</code>方法把它改成文本节点，并且文本内容跟<code>VNode</code>相同。</p></li><li><p>如果<code>VNode</code>是元素节点</p><p>如果<code>VNode</code>是元素节点，则又细分以下两种情况：</p><ul><li><p>该节点包含子节点</p><p>如果新的节点内包含了子节点，那么此时要看旧的节点是否包含子节点，如果旧的节点里也包含了子节点，那就需要递归对比更新子节点；如果旧的节点里不包含子节点，那么这个旧节点有可能是空节点或者是文本节点，如果旧的节点是空节点就把新的节点里的子节点创建一份然后插入到旧的节点里面，如果旧的节点是文本节点，则把文本清空，然后把新的节点里的子节点创建一份然后插入到旧的节点里面。</p></li><li><p>该节点不包含子节点</p><p>如果该节点不包含子节点，同时它又不是文本节点，那就说明该节点是个空节点，那就好办了，不管旧节点之前里面都有啥，直接清空即可。</p></li></ul></li></ol><p><strong>源码</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 更新节点</span><span class="token keyword">function</span> patchVnode <span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// vnode与oldVnode是否完全一样？若是，退出程序</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">===</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm <span class="token comment" spellcheck="true">// elm为当前虚拟节点对应的真实dom节点</span>  <span class="token comment" spellcheck="true">// vnode与oldVnode是否都是静态节点？若是，退出程序</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    vnode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isCloned<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isOnce<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> oldCh <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children  <span class="token keyword">const</span> ch <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children  <span class="token comment" spellcheck="true">// vnode有text属性？若没有：</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// vnode的子节点与oldVnode的子节点是否都存在？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 若都存在，判断子节点是否相同，不同则更新子节点</span>      <span class="token comment" spellcheck="true">// 注意这个updateChildren函数，是diff的核心</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh <span class="token operator">!==</span> ch<span class="token punctuation">)</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若只有vnode的子节点存在</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 判断oldVnode是否有文本？       * 若没有，则把vnode的子节点添加到真实DOM中       * 若有，则清空Dom中的文本，再把vnode的子节点添加到真实DOM中       */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>      <span class="token function">addVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若只有oldnode的子节点存在</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 清空DOM中的子节点</span>      <span class="token function">removeVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若vnode和oldnode都没有子节点，但是oldnode中有文本</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 清空oldnode文本</span>      nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 上面两个判断一句话概括就是，如果vnode中既没有text，也没有子节点，那么对应的oldnode中有什么就清空什么</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 若有，vnode的text属性与oldVnode的text属性是否相同？</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 若不相同：则用vnode的text替换真实DOM的文本</span>    nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://vue-js.com/learn-vue/assets/img/3.7b0442aa.png" alt="img" style="zoom:67%;" /><h5 id="更新子节点updateChildren"><a href="#更新子节点updateChildren" class="headerlink" title="更新子节点updateChildren()"></a><strong>更新子节点updateChildren()</strong></h5><p>当新的<code>VNode</code>与旧的<code>oldVNode</code>都是元素节点并且都包含子节点时，那么这两个节点的<code>VNode</code>实例上的<code>children</code>属性就是所包含的子节点数组。我们把新的<code>VNode</code>上的子节点数组记为<code>newChildren</code>，把旧的<code>oldVNode</code>上的子节点数组记为<code>oldChildren</code>，我们把<code>newChildren</code>里面的元素与<code>oldChildren</code>里的元素一一进行对比，对比两个子节点数组肯定是要通过循环，外层循环<code>newChildren</code>数组，内层循环<code>oldChildren</code>数组，每循环外层<code>newChildren</code>数组里的一个子节点，就去内层<code>oldChildren</code>数组里找看有没有与之相同的子节点</p><p>以上这个过程将会存在以下四种情况：</p><ul><li><p>创建子节点</p><p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找不到与之相同的子节点，那么说明<code>newChildren</code>里面的这个子节点是之前没有的，是需要此次新增的节点，那么就创建子节点。<strong>创建后节点合适的位置是所有未处理节点之前，而并非所有已处理节点之后</strong></p></li><li><p>删除子节点</p><p>如果把<code>newChildren</code>里面的每一个子节点都循环完毕后，发现在<code>oldChildren</code>还有未处理的子节点，那就说明这些未处理的子节点是需要被废弃的，那么就将这些节点删除。</p></li><li><p>移动子节点</p><p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，但是所处的位置不同，这说明此次变化需要调整该子节点的位置，那就以<code>newChildren</code>里子节点的位置为基准，调整<code>oldChildren</code>里该节点的位置，使之与在<code>newChildren</code>里的位置相同。<strong>所有未处理节点之前就是我们要移动的目的位置</strong></p><img src="https://vue-js.com/learn-vue/assets/img/6.b9621b4d.png" alt="img" style="zoom:67%;" /></li><li><p>更新节点</p><p>如果<code>newChildren</code>里面的某个子节点在<code>oldChildren</code>里找到了与之相同的子节点，并且所处的位置也相同，那么就更新<code>oldChildren</code>里该节点，使之与<code>newChildren</code>里的该节点相同。</p></li></ul><h5 id="优化更新子节点"><a href="#优化更新子节点" class="headerlink" title="优化更新子节点"></a>优化更新子节点</h5><p>主要是上面的新旧children节点的比较的N^2的双重循环时间复杂度有些高</p><p>其实我们可以这样想，我们不要按顺序去循环<code>newChildren</code>和<code>oldChildren</code>这两个数组，可以先比较这两个数组里特殊位置的子节点，比如：</p><ul><li>先把<code>newChildren</code>数组里的所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li><li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；</li><li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的最后一个子节点和<code>oldChildren</code>数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点<strong>移动</strong>到与<code>newChildren</code>数组里节点相同的位置（我们要把<code>oldChildren</code>数组里把第一个子节点移动到数组中<strong>所有未处理节点之后</strong>）；</li><li>如果不同，再把<code>newChildren</code>数组里所有未处理子节点的第一个子节点和<code>oldChildren</code>数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将<code>oldChildren</code>数组里的该节点<strong>移动</strong>到与<code>newChildren</code>数组里节点相同的位置（我们要把<code>oldChildren</code>数组里把最后一个子节点移动到数组中<strong>所有未处理节点之前</strong>）；</li><li>最后四种情况都试完如果还不同，那就<strong>按照之前循环</strong>的方式来查找节点。</li></ul><p>其过程如下图所示：</p> <img src="https://vue-js.com/learn-vue/assets/img/8.e4c85c40.png" alt="img" style="zoom:67%;" /><p>具体的方式还是看源码吧</p><h4 id="模板编译"><a href="#模板编译" class="headerlink" title="模板编译"></a>模板编译</h4><p>把用户写的模板进行编译，就会产生<code>VNode</code>，得到虚拟DOM</p><img src="https://img-blog.csdnimg.cn/20200419204951458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjEyNDIxNA==,size_16,color_FFFFFF,t_70" style="zoom:67%;" /><p><code>Vue</code>会把用户在<code>&lt;template&gt;&lt;/template&gt;</code>标签中写的类似于原生<code>HTML</code>的内容进行编译，把原生<code>HTML</code>的内容找出来，再把非原生<code>HTML</code>找出来，经过一系列的逻辑处理生成渲染函数，也就是<code>render</code>函数，而<code>render</code>函数会将模板内容生成对应的<code>VNode</code>，而<code>VNode</code>再经过前几篇文章介绍的<code>patch</code>过程从而得到将要渲染的视图中的<code>VNode</code>，最后根据<code>VNode</code>创建真实的<code>DOM</code>节点并插入到视图中， 最终完成视图的渲染更新</p><img src="https://vue-js.com/learn-vue/assets/img/1.f0570125.png" alt="img" style="zoom:67%;" /><h5 id="抽象语法树（AST）"><a href="#抽象语法树（AST）" class="headerlink" title="抽象语法树（AST）"></a><strong>抽象语法树</strong>（AST）</h5><p>是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p><img src="https://vue-js.com/learn-vue/assets/img/2.5596631a.png" alt="img" style="zoom:80%;" /><p>将一堆字符串模板解析成抽象语法树<code>AST</code>后，我们就可以对其进行各种操作处理了，处理完后用处理后的<code>AST</code>来生成<code>render</code>函数（提一下，render函数执行后就会得到一个虚拟节点树）。其具体流程可大致分为三个阶段：</p><ol><li>模板解析阶段：将一堆模板字符串用正则等方式解析成抽象语法树<code>AST</code>；</li><li>优化阶段：遍历<code>AST</code>，找出其中的静态节点，并打上标记；</li><li>代码生成阶段：将<code>AST</code>转换成渲染函数</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 源码位置: /src/complier/index.js    总体解析过程</span><span class="token keyword">export</span> <span class="token keyword">const</span> createCompiler <span class="token operator">=</span> <span class="token function">createCompilerCreator</span><span class="token punctuation">(</span><span class="token keyword">function</span> baseCompile <span class="token punctuation">(</span>  template<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  options<span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span><span class="token punctuation">:</span> CompiledResult <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 模板解析阶段：用正则等方式解析 template 模板中的指令、class、style等数据，形成AST</span>  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>optimize <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 优化阶段：遍历AST，找出其中的静态节点，并打上标记；当patch的时候就跳过静态节点，优化性能</span>    <span class="token function">optimize</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 代码生成阶段：将AST转换成渲染函数；</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    ast<span class="token punctuation">,</span>    render<span class="token punctuation">:</span> code<span class="token punctuation">.</span>render<span class="token punctuation">,</span>    staticRenderFns<span class="token punctuation">:</span> code<span class="token punctuation">.</span>staticRenderFns  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="整体解析过程"><a href="#整体解析过程" class="headerlink" title="整体解析过程"></a>整体解析过程</h5><p>把用户所写的模板根据一定的解析规则解析出有效的信息，最后用这些信息形成<code>AST</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 代码位置：/src/complier/parser/index.js</span><span class="token comment" spellcheck="true">/** * Convert HTML string to AST. */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// HTML解析器</span>  <span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>    warn<span class="token punctuation">,</span>    expectHTML<span class="token punctuation">:</span> options<span class="token punctuation">.</span>expectHTML<span class="token punctuation">,</span>    isUnaryTag<span class="token punctuation">:</span> options<span class="token punctuation">.</span>isUnaryTag<span class="token punctuation">,</span>    canBeLeftOpenTag<span class="token punctuation">:</span> options<span class="token punctuation">.</span>canBeLeftOpenTag<span class="token punctuation">,</span>    shouldDecodeNewlines<span class="token punctuation">:</span> options<span class="token punctuation">.</span>shouldDecodeNewlines<span class="token punctuation">,</span>    shouldDecodeNewlinesForHref<span class="token punctuation">:</span> options<span class="token punctuation">.</span>shouldDecodeNewlinesForHref<span class="token punctuation">,</span>    shouldKeepComment<span class="token punctuation">:</span> options<span class="token punctuation">.</span>comments<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 把模板字符串中不同的内容出来之后，这4个钩子函数把提取出来的内容生成对应的AST</span>    <span class="token comment" spellcheck="true">// 具体的代码，还是去看源码里面吧</span>    <span class="token comment" spellcheck="true">// 当解析到开始标签时，调用该函数</span>    start <span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> unary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 当解析到结束标签时，调用该函数</span>    end <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 当解析到文本时，调用该函数</span>    chars <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 当解析到注释时，调用该函数</span>    comment <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> root<span class="token punctuation">}</span></code></pre><p>从上面代码中可以看到，<code>parse</code> 函数就是解析器的主函数，在<code>parse</code> 函数内调用了<code>parseHTML</code> 函数对模板字符串进行解析，在<code>parseHTML</code> 函数解析模板字符串的过程中，如果遇到文本信息，就会调用文本解析器<code>parseText</code>函数进行文本解析；如果遇到文本中包含过滤器，就会调用过滤器解析器<code>parseFilters</code>函数进行解析</p><table><thead><tr><th>type取值</th><th>对应的AST节点类型</th></tr></thead><tbody><tr><td>1</td><td>元素节点</td></tr><tr><td>2</td><td>包含变量的动态文本节点</td></tr><tr><td>3</td><td>不包含变量的纯文本节点</td></tr></tbody></table><h5 id="HTML解析器"><a href="#HTML解析器" class="headerlink" title="HTML解析器"></a>HTML解析器</h5><p><code>HTML</code>解析器主要负责解析出模板字符串中有哪些内容，然后根据不同的内容才能调用其他的解析器以及做相应的处理</p><p>一边解析不同的内容一边调用对应的钩子函数生成对应的<code>AST</code>节点，最终完成将整个模板字符串转化成<code>AST</code>,这就是<code>HTML</code>解析器所要做的工作</p><p>后面的就是通过根据模板里的内容的特点使用不同的正则和其他方法进行解析出不同的内容，如注释，条件注释，DOCTYPE，开始标签（标签属性，是都自闭合），结束标签，文本</p><p>通过在解析的过程中维护一个保存开始标签的栈配合遇到结束标签时的推出栈顶元素保证AST节点的层级关系</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> expectHTML <span class="token operator">=</span> options<span class="token punctuation">.</span>expectHTML<span class="token punctuation">;</span>    <span class="token keyword">var</span> isUnaryTag$$<span class="token number">1</span> <span class="token operator">=</span> options<span class="token punctuation">.</span>isUnaryTag <span class="token operator">||</span> no<span class="token punctuation">;</span>    <span class="token keyword">var</span> canBeLeftOpenTag$$<span class="token number">1</span> <span class="token operator">=</span> options<span class="token punctuation">.</span>canBeLeftOpenTag <span class="token operator">||</span> no<span class="token punctuation">;</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> last<span class="token punctuation">,</span> lastTag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开启一个 while 循环，循环结束的条件是 html 为空，即 html 被 parse 完毕</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>        last <span class="token operator">=</span> html<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastTag <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isPlainTextElement</span><span class="token punctuation">(</span>lastTag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">let</span> textEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">/**               * 如果html字符串是以'&lt;'开头,则有以下几种可能               * 开始标签:&lt;div>               * 结束标签:&lt;/div>               * 注释:&lt;!-- 我是注释 -->               * 条件注释:&lt;!-- [if !IE] --> &lt;!-- [endif] -->               * DOCTYPE:&lt;!DOCTYPE html>               * 需要一一去匹配尝试               */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 里面具体的代码就不展示了</span>                <span class="token comment" spellcheck="true">// 解析是否是注释</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 解析是否是条件注释</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conditionalComment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 解析是否是DOCTYPE</span>                <span class="token keyword">const</span> doctypeMatch <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>doctype<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>doctypeMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 解析是否是结束标签</span>                <span class="token keyword">const</span> endTagMatch <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>endTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 匹配是否是开始标签</span>                <span class="token keyword">const</span> startTagMatch <span class="token operator">=</span> <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>startTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果html字符串不是以'&lt;'开头,则解析文本类型</span>            <span class="token keyword">let</span> text<span class="token punctuation">,</span> rest<span class="token punctuation">,</span> next            <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果在html字符串中没有找到'&lt;'，表示这一段html字符串都是纯文本</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                text <span class="token operator">=</span> html                html <span class="token operator">=</span> <span class="token string">''</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 把截取出来的text转化成textAST</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>chars <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>                options<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 父元素为script、style、textarea时，其内部的内容全部当做纯文本处理</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将整个字符串作为文本对待</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>html <span class="token operator">===</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>            options<span class="token punctuation">.</span>chars <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>warn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                options<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Mal-formatted tag at end of template: \""</span> <span class="token operator">+</span> html <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Clean up any remaining tags</span>    <span class="token function">parseEndTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//parse 开始标签</span>    <span class="token keyword">function</span> <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理 parseStartTag 的结果</span>    <span class="token keyword">function</span> <span class="token function">handleStartTag</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//parse 结束标签</span>    <span class="token keyword">function</span> <span class="token function">parseEndTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://vue-js.com/learn-vue/complie/HTMLParse.html#_5-%E5%9B%9E%E5%BD%92%E6%BA%90%E7%A0%81" target="_blank" rel="noopener">大佬的解析</a></p><hr><h5 id="文本解析器"><a href="#文本解析器" class="headerlink" title="文本解析器"></a>文本解析器</h5><p>当<code>HTML</code>解析器解析到文本内容时会调用4个钩子函数中的<code>chars</code>函数来创建文本型的<code>AST</code>节点，并且也说了在<code>chars</code>函数中会根据文本内容是否包含变量再细分为创建含有变量的<code>AST</code>节点和不包含变量的<code>AST</code>节点</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当解析到标签的文本时，触发chars</span>chars <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// parseText()文本解析器</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 包含变量</span>       <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>           type<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>           expression<span class="token punctuation">:</span> res<span class="token punctuation">.</span>expression<span class="token punctuation">,</span>           tokens<span class="token punctuation">:</span> res<span class="token punctuation">.</span>tokens<span class="token punctuation">,</span>           text       <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 不包含变量，纯文本节点</span>       <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>           type<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>           text       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>假设现有由<code>HTML</code>解析器解析得到的文本内容如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">"我叫{{name}}，我今年{{age}}岁了"</span></code></pre><p>经过文本解析器解析后得到：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">{</span>    expression<span class="token punctuation">:</span><span class="token string">"我叫"</span><span class="token operator">+</span><span class="token function">_s</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"，我今年"</span><span class="token operator">+</span><span class="token function">_s</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"岁了"</span><span class="token punctuation">,</span>    tokens<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token string">"我叫"</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">'@binding'</span><span class="token punctuation">:</span> name <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"，我今年"</span>        <span class="token punctuation">{</span><span class="token string">'@binding'</span><span class="token punctuation">:</span> age <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"岁了"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><code>expression</code>属性就是把文本中的变量和非变量提取出来，然后把变量用<code>_s()</code>包裹，最后按照文本里的顺序把它们用<code>+</code>连接起来。而<code>tokens</code>是个数组，数组内容也是文本中的变量和非变量，不一样的是把变量构造成<code>{&#39;@binding&#39;: xxx}</code>。</p><p>现在我们就可以知道文本解析器内部就干了三件事：</p><ul><li>判断传入的文本是否包含变量</li><li>构造expression</li><li>构造tokens</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> defaultTagRE <span class="token operator">=</span> <span class="token regex">/\{\{((?:.|\n)+?)\}\}/g</span><span class="token keyword">const</span> buildRegex <span class="token operator">=</span> <span class="token function">cached</span><span class="token punctuation">(</span>delimiters <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> open <span class="token operator">=</span> delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexEscapeRE<span class="token punctuation">,</span> <span class="token string">'\\$&amp;'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> close <span class="token operator">=</span> delimiters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexEscapeRE<span class="token punctuation">,</span> <span class="token string">'\\$&amp;'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>open <span class="token operator">+</span> <span class="token string">'((?:.|\\n)+?)'</span> <span class="token operator">+</span> close<span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">function</span> parseText <span class="token punctuation">(</span>text<span class="token punctuation">,</span>delimiters<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> tagRE <span class="token operator">=</span> delimiters <span class="token operator">?</span> <span class="token function">buildRegex</span><span class="token punctuation">(</span>delimiters<span class="token punctuation">)</span> <span class="token punctuation">:</span> defaultTagRE  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tagRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> rawTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">/**   * let lastIndex = tagRE.lastIndex = 0   * 上面这行代码等同于下面这两行代码:   * tagRE.lastIndex = 0   * let lastIndex = tagRE.lastIndex   */</span>  <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> tagRE<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> match<span class="token punctuation">,</span> index<span class="token punctuation">,</span> tokenValue  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> tagRE<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    index <span class="token operator">=</span> match<span class="token punctuation">.</span>index    <span class="token comment" spellcheck="true">// push text token</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 先把'{{'前面的文本放入tokens中</span>      rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tokenValue <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// tag token</span>    <span class="token comment" spellcheck="true">// 取出'{{ }}'中间的变量exp</span>    <span class="token keyword">const</span> exp <span class="token operator">=</span> <span class="token function">parseFilters</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 把变量exp改成_s(exp)形式也放入tokens中</span>    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`_s(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">)</span>    rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">'@binding'</span><span class="token punctuation">:</span> exp <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置lastIndex 以保证下一轮循环时，只从'}}'后面再开始匹配正则</span>    lastIndex <span class="token operator">=</span> index <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕</span>  <span class="token comment" spellcheck="true">// 此时如果lastIndex &lt; text.length，表示在最后一个变量后面还有文本</span>  <span class="token comment" spellcheck="true">// 最后将后面的文本再加入到tokens中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tokenValue <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 最后把数组tokens中的所有元素用'+'拼接起来</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    expression<span class="token punctuation">:</span> tokens<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tokens<span class="token punctuation">:</span> rawTokens  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h5 id="优化阶段"><a href="#优化阶段" class="headerlink" title="优化阶段"></a>优化阶段</h5><p>模板编译的最终目的是用模板生成一个<code>render</code>函数，而用<code>render</code>函数就可以生成与模板对应的<code>VNode</code>，之后再进行<code>patch</code>算法，最后完成视图渲染。我们可以在<code>patch</code>过程中不用去对比这些静态节点了，这样就可以提高一些性能</p><p>优化阶段其实就干了两件事：</p><ol><li>在<code>AST</code>中找出所有静态节点并打上标记；</li><li>在<code>AST</code>中找出所有静态根节点并打上标记；</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// src/compiler/optimizer.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> optimize <span class="token punctuation">(</span>root<span class="token punctuation">:</span> <span class="token operator">?</span>ASTElement<span class="token punctuation">,</span> options<span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>  isStaticKey <span class="token operator">=</span> <span class="token function">genStaticKeysCached</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>staticKeys <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span>  isPlatformReservedTag <span class="token operator">=</span> options<span class="token punctuation">.</span>isReservedTag <span class="token operator">||</span> no  <span class="token comment" spellcheck="true">// 标记静态节点</span>  <span class="token function">markStatic</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 标记静态根节点</span>  <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>标记静态节点</strong></p><p>我们只需从根节点开始，先标记根节点是否为静态节点，然后看根节点如果是元素节点，那么就去向下递归它的子节点，子节点如果还有子节点那就继续向下递归，直到标记完所有节点。</p><pre class=" language-javascript"><code class="language-javascript">node<span class="token punctuation">.</span>pre <span class="token operator">||</span><span class="token punctuation">(</span>    <span class="token operator">!</span>node<span class="token punctuation">.</span>hasBindings <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// no dynamic bindings</span>    <span class="token operator">!</span>node<span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span><span class="token keyword">for</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// not v-if or v-for or v-else</span>    <span class="token operator">!</span><span class="token function">isBuiltInTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// not a built-in</span>    <span class="token function">isPlatformReservedTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// not a component</span>    <span class="token operator">!</span><span class="token function">isDirectChildOfTemplateFor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isStaticKey<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果元素节点是静态节点，那就必须满足以下几点要求：</p><ul><li><p>如果节点使用了<code>v-pre</code>指令，那就断定它是静态节点；</p></li><li><p>如果节点没有使用</p><pre><code>v-pre    // 跳过此节点和子节点的编译过程</code></pre><p>指令，那它要成为静态节点必须满足：</p><ul><li>不能使用动态绑定语法，即标签上不能有<code>v-</code>、<code>@</code>、<code>:</code>开头的属性；</li><li>不能使用<code>v-if</code>、<code>v-else</code>、<code>v-for</code>指令；</li><li>不能是内置组件，即标签名不能是<code>slot</code>和<code>component</code>；</li><li>标签名必须是平台保留标签，即不能是组件；</li><li>当前节点的父节点不能是带有 <code>v-for</code> 的 <code>template</code> 标签；</li><li>节点的所有属性的 <code>key</code> 都必须是静态节点才有的 <code>key</code>，注：静态节点的<code>key</code>是有限的，它只能是<code>type</code>,<code>tag</code>,<code>attrsList</code>,<code>attrsMap</code>,<code>plain</code>,<code>parent</code>,<code>children</code>,<code>attrs</code>之一；</li></ul></li></ul><p>标记完当前节点是否为静态节点之后，如果该节点是元素节点，那么还要继续去递归判断它的子节点</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token function">markStatic</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当有一个子节点不是静态节点，则当前节点也不是静态节点</span>        node<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>标记静态根节点</strong></p><p>一个节点要想成为静态根节点，它必须满足以下要求：</p><ul><li>节点本身必须是静态节点；</li><li>必须拥有子节点 <code>children</code>；</li><li>子节点不能只是只有一个文本节点；</li></ul><p>否则的话，对它的优化成本将大于优化后带来的收益。</p><p>从<code>AST</code>根节点递归向下遍历寻找</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> markStaticRoots <span class="token punctuation">(</span>node<span class="token punctuation">:</span> ASTNode<span class="token punctuation">,</span> isInFor<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 元素节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>once<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>staticInFor <span class="token operator">=</span> isInFor    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// For a node to qualify as a static root, it should have children that</span>    <span class="token comment" spellcheck="true">// are not just static text. Otherwise the cost of hoisting out will</span>    <span class="token comment" spellcheck="true">// outweigh the benefits and it's better off to just always render it fresh.</span>    <span class="token comment" spellcheck="true">// 主要是这里的判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>      node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>      node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isInFor <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">!</span>node<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>block<span class="token punctuation">,</span> isInFor<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h5 id="代码生成阶段"><a href="#代码生成阶段" class="headerlink" title="代码生成阶段"></a>代码生成阶段</h5><p>所谓代码生成阶段，到底是要生成什么代码？答：要生成<code>render</code>函数字符串。</p><p>其实就是根据模板对应的抽象语法树<code>AST</code>生成一个函数，通过调用这个函数就可以得到模板对应的虚拟<code>DOM</code></p><p><strong>如何生成</strong></p><p>递归的根据AST的节点和子节点调用相应的函数创建VNode</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 主要流程</span><span class="token keyword">export</span> <span class="token keyword">function</span> generate <span class="token punctuation">(</span>ast<span class="token punctuation">,</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodegenState</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> ast <span class="token operator">?</span> <span class="token function">genElement</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">'_c("div")'</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    render<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`with(this){return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span><span class="token punctuation">,</span>    staticRenderFns<span class="token punctuation">:</span> state<span class="token punctuation">.</span>staticRenderFns  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 核心函数</span><span class="token keyword">export</span> <span class="token keyword">function</span> genElement <span class="token punctuation">(</span>el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">,</span> state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>staticRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>staticProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genStatic</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>once <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>onceProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genOnce</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token keyword">for</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>forProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genFor</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>ifProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genIf</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">'template'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'void 0'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">'slot'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genSlot</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// component or element</span>    <span class="token keyword">let</span> code    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>      code <span class="token operator">=</span> <span class="token function">genComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">,</span> el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> el<span class="token punctuation">.</span>plain <span class="token operator">?</span> undefined <span class="token punctuation">:</span> <span class="token function">genData</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>      <span class="token keyword">const</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>inlineTemplate <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      code <span class="token operator">=</span> <span class="token template-string"><span class="token string">`_c('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'${        data ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : '' // data      }${        children ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : '' // children      })`</span></span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// module transforms</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      code <span class="token operator">=</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> code<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> code  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实在后面还有一个对模板编译整体流程的解析，但是有些绕，可以去看一下</p><p><a href="https://vue-js.com/learn-vue/complie/summary.html#_1-%E5%89%8D%E8%A8%80" target="_blank" rel="noopener">整体解析地址</a></p><hr><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><img src="https://vue-js.com/learn-vue/assets/img/1.6e1e57be.jpg" alt="img" style="zoom:67%;" /><h5 id="初始阶段-new-Vue"><a href="#初始阶段-new-Vue" class="headerlink" title="初始阶段(new Vue)"></a>初始阶段(new Vue)</h5>]]></content>
      
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3简单使用</title>
      <link href="/2020/10/29/vue3%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/10/29/vue3%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>对vue3出现的一些新的语法方面的记录和简单使用</p><h4 id="1-main-js"><a href="#1-main-js" class="headerlink" title="1.main.js"></a>1.main.js</h4><p>首先vue2与vue3在main.js里面出现了一些改变</p><p>Vue 应用挂载到App.vue里面 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code></p><h5 id="vue2-x"><a href="#vue2-x" class="headerlink" title="vue2.x"></a>vue2.x</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">import</span> Vant <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'vant/lib/index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Lazyload <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Lazyload<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vant<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h5 id="vue3-x"><a href="#vue3-x" class="headerlink" title="vue3.x"></a>vue3.x</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token comment" spellcheck="true">//这里的App就是App.vue文件里面export导出的一个东西，之后挂载到'id=app'的div上</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span> </code></pre><p>应用实例暴露当前全局 API 的子集，经验法则是，任何全局改变 Vue 行为的 API 现在都会移动到应用实例上，以下是当前全局 API 及其相应实例 API 的表：</p><table><thead><tr><th>2.x 全局 API</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config</td><td>app.config</td></tr><tr><td>Vue.config.productionTip</td><td><em>removed</em> (<a href="https://www.vue3js.cn/docs/zh/guide/migration/global-api.html#config-productiontip-removed" target="_blank" rel="noopener">见下方</a>)</td></tr><tr><td>Vue.config.ignoredElements</td><td>app.config.isCustomElement (<a href="https://www.vue3js.cn/docs/zh/guide/migration/global-api.html#config-ignoredelements-is-now-config-iscustomelement" target="_blank" rel="noopener">见下方</a>)</td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use (<a href="https://www.vue3js.cn/docs/zh/guide/migration/global-api.html#a-note-for-plugin-authors" target="_blank" rel="noopener">见下方</a>)</td></tr></tbody></table><p>所有其他不全局改变行为的全局 API 现在被命名为 exports</p><h4 id="2-组合式API"><a href="#2-组合式API" class="headerlink" title="2.组合式API"></a>2.组合式API</h4><p>用组件的选项 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组织逻辑在大多数情况下都有效。然而，当我们的组件变得更大时，<strong>逻辑关注点</strong>的列表也会增长。这可能会导致组件难以阅读和理解，尤其是对于那些一开始就没有编写这些组件的人来说。</p><p>一个大型组件的示例，其中<strong>逻辑关注点</strong>是按颜色分组。</p><p>这种碎片化使得理解和维护复杂组件变得困难。选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块。</p><p>如果我们能够将与同一个逻辑关注点相关的代码配置在一起会更好。而这正是组合式 API 使我们能够做到的。</p><h5 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h5><p>开始使用组合式 API，我们首先需要一个可以实际使用它的地方，也称入口函数。在 Vue 组件中，我们将此位置称为 <code>setup</code></p><p>新的 <code>setup</code> 组件选项在<strong>创建组件之前</strong>执行，一旦 <code>props</code> 被解析，并充当合成 API 的入口点。</p><p>setup 函数<strong>会在 beforeCreate之前执行</strong>, vue3也是取消了这两个钩子，统一用setup代替, 该函数相当于一个生命周期函数，vue中过去的data，methods，watch等全部都用对应的新增api写在setup()函数中，也可不写在这里面。</p><ul><li>props: 用来接收 props 数据</li><li>context 用来定义上下文, 上下文对象中包含了一些有用的属性，这些属性在 vue 2.x 中需要通过 this 才能访问到, 在 setup() 函数中无法访问到 this，是个 undefined</li><li>返回值: return {}, 返回响应式数据, 模版中需要使用的函数</li></ul><hr><p><strong>WARNING：</strong></p><p>由于在执行 <code>setup</code> 时尚未创建组件实例，因此在 <code>setup</code> 选项中没有 <code>this</code>。这意味着，<strong>除了 <code>props</code> 之外</strong>，你将无法访问组件中声明的任何属性——<strong>本地状态</strong>、<strong>计算属性</strong>或<strong>方法</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> RepositoriesFilters<span class="token punctuation">,</span> RepositoriesSortBy<span class="token punctuation">,</span> RepositoriesList <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//在这里面其实也可以使用vue2的一些属性方法和钩子函数</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">{</span>          mydata<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { user: '' }</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 这里返回的任何内容都可以用于组件的其余部分</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 组件的“其余部分”</span><span class="token punctuation">}</span></code></pre><p>在 Vue 3.0 中，我们可以通过一个新的 <code>ref</code> 函数使任何响应式变量在任何地方起作用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意返回的是一个对象，里面的value才是我们传入的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { value: 0 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>counter<span class="token punctuation">.</span>value<span class="token operator">++</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><h5 id="详细示例"><a href="#详细示例" class="headerlink" title="详细示例"></a>详细示例</h5><pre class=" language-vue"><code class="language-vue"><template><p @click = "handleclick">    count:{{count}}    state:{{state.timer}}    double:{{double}}    </p></template><script>    //组合式api的引入，几乎所有的vue2属性都可以引入    import {ref,reactive,readonly,computed,watch} from 'vue'    export default {        //注意这个setup()函数，vue3的重点        setup(){            //第一种响应式的方式ref    值类型string number             const count  = ref(0);    //创建一个响应式数据对象，以vue3的方式            const handleclick = ()=>{                count.value++;    //因为现在的count变成了一个对象了，需要控制的是其中的value                state.timer++;            }            //第二种响应式的方式reactive    引用类型{} []            const state  = reactive({timer:0});    //创建出来是一个proxy对象            //readonly格式类似reactive，但是只能初始化进行读取，无法进行更改            //响应式系统api            const double = computed(()=>{                return count.value * 2            });            watch(double,(value)=>{                console.log(value)            });            //注意所有的变量包括函数都需要返回            return {                count,                handleclick,                state,                double            }        }    }</script></code></pre><p>同时也可以将组合式API定义为一个函数，之后在其他的页面import一下</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// src/composables/useUserRepositories.js</span><span class="token comment" spellcheck="true">//函数式组合API</span><span class="token keyword">import</span> <span class="token punctuation">{</span> fetchUserRepositories <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/repositories'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useUserRepositories</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> repositories <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> getUserRepositories <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    repositories<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchUserRepositories</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">onMounted</span><span class="token punctuation">(</span>getUserRepositories<span class="token punctuation">)</span>  <span class="token function">watch</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> getUserRepositories<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    repositories<span class="token punctuation">,</span>    getUserRepositories  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用函数式组合API</span><span class="token keyword">import</span>     useUserRepositories <span class="token keyword">from</span> <span class="token string">'@/composables/useUserRepositories'</span><span class="token keyword">import</span> useRepositoryNameSearch <span class="token keyword">from</span> <span class="token string">'@/composables/useRepositoryNameSearch'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> RepositoriesFilters<span class="token punctuation">,</span> RepositoriesSortBy<span class="token punctuation">,</span> RepositoriesList <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  setup <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//通过解构去除函数内部经过处理的值，可以直接进行使用</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> repositories<span class="token punctuation">,</span> getUserRepositories <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useUserRepositories</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>      searchQuery<span class="token punctuation">,</span>      repositoriesMatchingSearchQuery<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRepositoryNameSearch</span><span class="token punctuation">(</span>repositories<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 因为我们并不关心未经过滤的仓库</span>      <span class="token comment" spellcheck="true">// 我们可以在 `repositories` 名称下暴露过滤后的结果</span>      repositories<span class="token punctuation">:</span> repositoriesMatchingSearchQuery<span class="token punctuation">,</span>      getUserRepositories<span class="token punctuation">,</span>      searchQuery<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      filters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 3</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filteredRepositories <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 3</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    updateFilters <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 3</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="setup-详解"><a href="#setup-详解" class="headerlink" title="setup()详解"></a>setup()详解</h5><p>使用 <code>setup</code> 函数时，它将接受两个参数：</p><ol><li><code>props</code></li><li><code>context</code></li></ol><p><code>setup</code> 函数中的第一个参数是 <code>props</code>。正如在一个标准组件中所期望的那样，<code>setup</code> 函数中的 <code>props</code> 是响应式的，当传入新的 prop 时，它将被更新</p><p>如果需要解构 prop，可以通过使用 <code>setup</code> 函数中的 <a href="https://www.vue3js.cn/docs/zh/guide/reactivity-fundamentals.html#响应式状态解构" target="_blank" rel="noopener"><code>toRefs</code></a> 来安全地完成此操作。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// MyBook.vue</span><span class="token keyword">import</span> <span class="token punctuation">{</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>传递给 <code>setup</code> 函数的第二个参数是 <code>context</code>。<code>context</code> 是一个普通的 JavaScript 对象，它暴露三个组件的 property：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// MyBook.vue</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//context可以被解构为{ attrs, slots, emit }的样子</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Attribute (非响应式对象)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 插槽 (非响应式对象)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>slots<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 触发事件 (方法)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>emit<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行 <code>setup</code> 时，组件实例尚未被创建。因此，你只能访问以下 property：</p><ul><li><code>props</code></li><li><code>attrs</code></li><li><code>slots</code></li><li><code>emit</code></li></ul><p>换句话说，你<strong>将无法访问</strong>以下组件选项：</p><ul><li><code>data</code></li><li><code>computed</code></li><li><code>methods</code></li></ul><p><code>setup</code> 还可以返回一个渲染函数，该函数可以直接使用在同一作用域中声明的响应式状态：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// MyBook.vue</span><span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> readersNumber <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Vue 3 Guide'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Please note that we need to explicitly expose ref value here</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>readersNumber<span class="token punctuation">.</span>value<span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>在 <code>setup()</code> 内部，<code>this</code> 不会是该活跃实例的引用</strong>，因为 <code>setup()</code> 是在解析其它组件选项之前被调用的，所以 <code>setup()</code> 内部的 <code>this</code> 的行为与其它选项中的 <code>this</code> 完全不同。这在和其它选项式 API 一起使用 <code>setup()</code> 时可能会导致混淆。</p><p>在setup()里面使用provide和inject也是通过import引入然后在setup里面进行操作使用的</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>MyMarker <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> provide<span class="token punctuation">,</span>ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> MyMarker <span class="token keyword">from</span> '<span class="token punctuation">.</span><span class="token operator">/</span>MyMarker<span class="token punctuation">.</span>vue<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    MyMarker  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//也可进行响应式的变化property</span>    <span class="token keyword">const</span> refval <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'refval'</span><span class="token punctuation">,</span> refval<span class="token punctuation">)</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'location'</span><span class="token punctuation">,</span> <span class="token string">'North Pole'</span><span class="token punctuation">)</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'geolocation'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      longitude<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>      latitude<span class="token punctuation">:</span> <span class="token number">135</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> src<span class="token operator">/</span>components<span class="token operator">/</span>MyMarker<span class="token punctuation">.</span>vue <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> userLocation <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'location'</span><span class="token punctuation">,</span> <span class="token string">'The Universe'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//后面这个是默认的值</span>    <span class="token keyword">const</span> userGeolocation <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'geolocation'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      userLocation<span class="token punctuation">,</span>      userGeolocation    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h5><p>在使用组合式 API 时，<a href="https://www.vue3js.cn/docs/zh/guide/reactivity-fundamentals.html#creating-standalone-reactive-values-as-refs" target="_blank" rel="noopener">响应式引用</a>和<a href="https://www.vue3js.cn/docs/zh/guide/component-template-refs.html" target="_blank" rel="noopener">模板引用</a>的概念是统一的。为了获得对模板内元素或组件实例的引用，我们可以像往常一样声明 ref 并从 <a href="https://www.vue3js.cn/docs/zh/guide/composition-api-setup.html" target="_blank" rel="noopener">setup()</a> 返回：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注意这里的ref属性 This is a root element<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//这里获取template里面的ref绑定的div，之前是通过this.$refs获取到这个div</span>      <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// DOM元素将在初始渲染后分配给ref</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;div>这是根元素&lt;/div></span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        root      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里我们在渲染上下文中暴露 <code>root</code>，并通过 <code>ref=&quot;root&quot;</code>，将其绑定到 div 作为其 ref。在虚拟 DOM 补丁算法中，如果 VNode 的 <code>ref</code> 键对应于渲染上下文中的 ref，则 VNode 的相应元素或组件实例将被分配给该 ref 的值。这是在虚拟 DOM 挂载/打补丁过程中执行的，因此模板引用只会在初始渲染之后获得赋值。</p><p>作为模板使用的 ref 的行为与任何其他 ref 一样：它们是响应式的，可以传递到 (或从中返回) 复合函数中</p><h4 id="3-总结式的完整模板"><a href="#3-总结式的完整模板" class="headerlink" title="3.总结式的完整模板"></a>3.总结式的完整模板</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mine"</span> ref<span class="token operator">=</span><span class="token string">"elmRefs"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span>测试按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in list"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"item.id"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>  computed<span class="token punctuation">,</span>  defineComponent<span class="token punctuation">,</span>  getCurrentInstance<span class="token punctuation">,</span>  onMounted<span class="token punctuation">,</span>  PropType<span class="token punctuation">,</span>  reactive<span class="token punctuation">,</span>  ref<span class="token punctuation">,</span>  toRefs<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IState</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  list<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>object<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"demo"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 父组件传子组件参数</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span><span class="token keyword">null</span> <span class="token operator">|</span> <span class="token string">""</span><span class="token operator">></span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">"vue3.x"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    list<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Array <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// TODO 组件注册</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  emits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"emits-name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 为了提示作用</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>IState<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"vue 3.0 组件"</span><span class="token punctuation">,</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>          id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">"vuex"</span><span class="token punctuation">,</span>          id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 调用父组件的方法</span>      context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"emits-name"</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>      handleClick<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="4-更优雅的使用方式"><a href="#4-更优雅的使用方式" class="headerlink" title="4.更优雅的使用方式"></a>4.更优雅的使用方式</h4><p>简单的说就是将一个相关的逻辑都放在一个函数里面，然后将这个函数在<strong>setup()</strong>里面调用，并解构出函数里面return出的一些函数和对象等数据，然后统一在 <strong>setup()</strong> 里面return出来，之后就正常进行使用</p><p><a href="https://gitee.com/cheng_song/shirakami-haruka-button" target="_blank" rel="noopener">vue3+ts 示例</a></p><p>主要使用示例是在 home.vue 和harukaButton.vue里面</p><pre class=" language-vue"><code class="language-vue"><template>    <v-card        flat        rounded="xl"        class="haruka-card"    >        <v-card-title v-if="title" primary-title>            {{ title }}        </v-card-title>        <v-card-text>            <slot />        </v-card-text>    </v-card></template><script lang="ts">import { computed, defineComponent, Ref, toRefs } from '@vue/composition-api'import i18n from '@/plugins/i18n'function useCardTitle(tag: Ref<string>, rawTitle?: Ref<string>) {    const title = computed(() => {        if (rawTitle?.value) {            return rawTitle.value        }        if (!tag.value) {            return ''        }        return i18n.t(`tags.${tag.value}`)    })    return title}export default defineComponent({    name: 'HarukaCard',    props: {        tag: {            type: String,            default: '',        },        rawTitle: {            type: String,            default: '',        },    },    setup(props, ctx) {        const { rawTitle, tag } = toRefs(props)        // 就像这样调用这个函数        const title = useCardTitle(tag, rawTitle)        return {            title,        }    },})</script><style lang="scss" scoped>@import '@/styles/index.scss';.haruka-card {    box-shadow: 1px 5px 22px rgb(255, 174, 166, 0.6) !important;}</style></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3新特性</title>
      <link href="/2020/10/27/vue3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/10/27/vue3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>就是一个简单的对vue3的一个新特性学习和记录</p><p><a href="https://www.jb51.net/article/198200.htm" target="_blank" rel="noopener">参考文章</a></p><p><a href="https://www.vue3js.cn/docs/zh/guide/migration/array-refs.html" target="_blank" rel="noopener">官网参考</a></p><p><a href="https://vue-composition-api-rfc.netlify.app/zh/api.html#setup" target="_blank" rel="noopener">官方文档</a></p><p>如何将vue-cli创建的vue2.x项目转换为vue3的项目</p><pre><code>vue add vue-next</code></pre><p>Performance (⽐ vue2 runtime快了2倍) </p><p>• Tree shaking（按需编译代码）</p><p>• Ts support （更优秀的Ts⽀持）</p><p>• Composition API（组合式 API） </p><p>• Custom Renderer API （⾃定义渲染器）</p><p>• 内置新特性组件</p><p>这三个是在开课吧里面介绍的几个新特性点，后面可能会重复记录</p><h4 id="1-不限于单根节点"><a href="#1-不限于单根节点" class="headerlink" title="1.不限于单根节点"></a>1.不限于单根节点</h4><p>即不再只能包含在一个div里面了,不再限于模板中的单个根节点</p><h4 id="2-composition-API"><a href="#2-composition-API" class="headerlink" title="2.composition API"></a>2.composition API</h4><p>更好的逻辑复用与代码组织，更好的类型推导，在对写大型组件的时候，可以逻辑更清晰</p><p>对options api的改变，对mixin的替代，将生命周期这些直接可以抽离出组件，进行封装，进行逻辑共用</p><p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201027191959787.png" alt="image-20201027191959787"></p><p>在调用composition api的时候，必须在vue文件的script里面调用setup( ) {}函数进行初始化,对系统的api进行函数式的调用，可基于不同的功能点进行拆分</p><pre class=" language-vue"><code class="language-vue"><template><p @click = "handleclick">    count:{{count}}    state:{{state.timer}}    double:{{double}}    </p></template><script>    //组合式api的引入    import {ref,reactive,readonly,computed,watch} from 'vue'    export default {        //注意这个setup()函数，vue3的重点        setup(){            //第一种响应式的方式ref    值类型string number             //创建一个响应式数据对象，以vue3的方式。如果传入 ref 的是一个对象，将调用 reactive 方法进行深层响应转换。            const count  = ref(0);                const handleclick = ()=>{                count.value++;    //因为现在的count变成了一个对象了，需要控制的是其中的value                state.timer++;            }            //第二种响应式的方式reactive    引用类型{} []            //当 ref 作为 reactive 对象的 property 被访问或修改时，也将自动解套 value 值            const state  = reactive({timer:0,count});    //创建出来是一个proxy对象            //readonly格式类似reactive，但是只能初始化进行读取，无法进行更改            //响应式系统api,传入一个 getter 函数，返回一个默认不可手动修改的 ref 对象。            const double = computed(()=>{                return count.value * 2            });            watch(double,(value,prevValue)=>{                console.log(value)            });            //注意所有的变量包括函数都需要返回            return {                count,//注意这里只需要传出count，不需要里面的value，它会自动解套                handleclick,                state,                double            }        }    }</script></code></pre><p><code>watchEffect</code></p><p>立即执行传入的一个函数，并响应式追踪其依赖，并在其依赖变更时重新运行该函数。可在后面显式的进行调用返回值停止监听</p><h4 id="3-vtu"><a href="#3-vtu" class="headerlink" title="3.vtu"></a>3.vtu</h4><p>官方指定的单元测试库，帮助我们快速测试一个组件</p><p><strong>测试原则</strong></p><p>• input<br>​    • props<br>​    • ⽤户交互<br>• output<br>​    • dom 的渲染<br>​    • Events<br>• 测试功能，⽽不是测试细节</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201027202241342.png" alt="image-20201027202241342" style="zoom:50%;" /><p><strong>测试三部曲</strong></p><p>• given<br>​    • 准备测试数据<br>• when<br>​    • 触发要测试的动作<br>• then<br>​    • 验证结果</p><h4 id="4-v-for-中的-Ref-数组"><a href="#4-v-for-中的-Ref-数组" class="headerlink" title="4.v-for 中的 Ref 数组"></a>4.v-for 中的 Ref 数组</h4><p>在 Vue 2 中，在 <code>v-for</code> 里使用的 <code>ref</code> attribute 会用 ref 数组填充相应的 <code>$refs</code> property。当存在嵌套的 <code>v-for</code> 时，这种行为会变得不明确且效率低下。</p><p>在 Vue 3 中，这样的用法将不再在 <code>$ref</code> 中自动创建数组。要从单个绑定获取多个 ref，请将 <code>ref</code> 绑定到一个更灵活的函数上 (这是一个新特性)：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">:ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setItemRef<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>结合选项式 API:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      itemRefs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">setItemRef</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>itemRefs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>itemRefs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>itemRefs<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结合组合式 API:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onBeforeUpdate<span class="token punctuation">,</span> onUpdated <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> itemRefs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> setItemRef <span class="token operator">=</span> el <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      itemRefs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">onBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      itemRefs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itemRefs<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      itemRefs<span class="token punctuation">,</span>      setItemRef    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：</p><ul><li><code>itemRefs</code> 不必是数组：它也可以是一个对象，其 ref 会通过迭代的 key 被设置。</li><li>如果需要，<code>itemRef</code> 也可以是响应式的且可以被监听。</li></ul><h4 id="5-异步组件"><a href="#5-异步组件" class="headerlink" title="5.异步组件"></a>5.异步组件</h4><p>以下是对变化的高层次概述：</p><ul><li>新的 <code>defineAsyncComponent</code> 助手方法，用于显式地定义异步组件</li><li><code>component</code> 选项重命名为 <code>loader</code></li><li>Loader 函数本身不再接收 <code>resolve</code> 和 <code>reject</code> 参数，且必须返回一个 Promise</li></ul><p>以前，异步组件是通过将组件定义为返回 Promise 的函数来创建的，例如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> asyncPage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./NextPage.vue'</span><span class="token punctuation">)</span></code></pre><p>或者，对于带有选项的更高阶的组件语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> asyncPage <span class="token operator">=</span> <span class="token punctuation">{</span>  component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./NextPage.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  delay<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  error<span class="token punctuation">:</span> ErrorComponent<span class="token punctuation">,</span>  loading<span class="token punctuation">:</span> LoadingComponent<span class="token punctuation">}</span></code></pre><p>现在，在 Vue 3 中，由于函数式组件被定义为纯函数，因此异步组件的定义需要通过将其包装在新的 <code>defineAsyncComponent</code> 助手方法中来显式地定义：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ErrorComponent <span class="token keyword">from</span> <span class="token string">'./components/ErrorComponent.vue'</span><span class="token keyword">import</span> LoadingComponent <span class="token keyword">from</span> <span class="token string">'./components/LoadingComponent.vue'</span><span class="token comment" spellcheck="true">// 不带选项的异步组件</span><span class="token keyword">const</span> asyncPage <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./NextPage.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 带选项的异步组件</span><span class="token keyword">const</span> asyncPageWithOptions <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//注意，component 选项现在被重命名为 loader，以便准确地传达不能直接提供组件定义的信息。</span>  loader<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./NextPage.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  delay<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  errorComponent<span class="token punctuation">:</span> ErrorComponent<span class="token punctuation">,</span>  loadingComponent<span class="token punctuation">:</span> LoadingComponent<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Loader 函数本身不再接收 `resolve` 和 `reject` 参数，且必须返回一个 Promise</span><span class="token comment" spellcheck="true">// 2.x 版本</span><span class="token keyword">const</span> oldAsyncComponent <span class="token operator">=</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3.x 版本</span><span class="token keyword">const</span> asyncComponent <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* ... */</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="6-自定义指令"><a href="#6-自定义指令" class="headerlink" title="6.自定义指令"></a>6.自定义指令</h4><h5 id="2-x-语法"><a href="#2-x-语法" class="headerlink" title="2.x 语法"></a>2.x 语法</h5><p>在 Vue 2，自定义指令是通过使用下面列出的钩子来创建的，这些钩子都是可选的</p><ul><li><strong>bind</strong> - 指令绑定到元素后发生。只发生一次。</li><li><strong>inserted</strong> - 元素插入父 DOM 后发生。</li><li><strong>update</strong> - 当元素更新，但子元素尚未更新时，将调用此钩子。</li><li><strong>componentUpdated</strong> - 一旦组件和子级被更新，就会调用这个钩子。</li><li><strong>unbind</strong> - 一旦指令被移除，就会调用这个钩子。也只调用一次。</li></ul><p>下面是一个例子：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-highlight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>高亮显示此文本亮黄色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> binding<span class="token punctuation">.</span>value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在这里，在这个元素的初始设置中，指令通过传递一个值来绑定样式，该值可以通过应用程序更新为不同的值。</p><h5 id="3-x-语法"><a href="#3-x-语法" class="headerlink" title="3.x 语法"></a>3.x 语法</h5><p>然而，在 Vue 3 中，我们为自定义指令创建了一个更具凝聚力的 API。正如你所看到的，它们与我们的组件生命周期方法有很大的不同，即使我们正与类似的事件钩子，我们现在把它们统一起来了：</p><ul><li>bind → <strong>beforeMount</strong></li><li>inserted → <strong>mounted</strong></li><li><strong>beforeUpdate</strong>：新的！这是在元素本身更新之前调用的，很像组件生命周期钩子。</li><li>update → 移除！有太多的相似之处要更新，所以这是多余的，请改用 <code>updated</code>。</li><li>componentUpdated → <strong>updated</strong></li><li><strong>beforeUnmount</strong>：新的！与组件生命周期钩子类似，它将在卸载元素之前调用。</li><li>unbind -&gt; <strong>unmounted</strong></li></ul><p>最终 API 如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> MyDirective <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 新</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生成的 API 可以这样使用，与前面的示例相同：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-highlight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>高亮显示此文本亮黄色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> binding<span class="token punctuation">.</span>value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="7-data选项"><a href="#7-data选项" class="headerlink" title="7.data选项"></a>7.data选项</h4><p>在 2.x 中，开发者可以定义 <code>data</code> 选项是 <code>object</code> 或者是 <code>function</code>。</p><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Object 声明 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      apiKey<span class="token punctuation">:</span> <span class="token string">'a1b2c3'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Function 声明 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        apiKey<span class="token punctuation">:</span> <span class="token string">'a1b2c3'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>虽然这对于具有共享状态的根实例提供了一些便利，但是由于只有在根实例上才有可能，这导致了混乱。</p><p>在 3.x，<code>data</code> 选项已标准化为只接受返回 <code>object</code> 的 <code>function</code>。</p><p>使用上面的示例，代码只有一个可能的实现：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        apiKey<span class="token punctuation">:</span> <span class="token string">'a1b2c3'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>此外，当来自组件的 <code>data()</code> 及其 mixin 或 extends 基类被合并时，现在将<em>浅层次</em>执行合并：</p><p>在 Vue 2.x中，生成的 <code>$data</code> 是：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  user<span class="token operator">:</span> <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> 'Jack'  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 3.0 中，其结果将会是：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  user<span class="token operator">:</span> <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="8-事件API"><a href="#8-事件API" class="headerlink" title="8.事件API"></a>8.事件API</h4><p>我们整个从实例中移除了 <code>$on</code>，<code>$off</code> 和 <code>$once</code> 方法，<code>$emit</code> 仍然是现有 API 的一部分，因为它用于触发由父组件以声明方式附加的事件处理程序</p><h4 id="9-过滤器"><a href="#9-过滤器" class="headerlink" title="9.过滤器"></a>9.过滤器</h4><p>在 3.x 中，过滤器已删除，不再支持。相反地，我们建议用方法调用或计算属性替换它们。</p><h4 id="10-片段"><a href="#10-片段" class="headerlink" title="10.片段"></a>10.片段</h4><p>在 Vue 3 中，组件现在正式支持多根节点组件，即片段！</p><h4 id="11-全局API"><a href="#11-全局API" class="headerlink" title="11.全局API"></a>11.全局API</h4><p>从技术上讲，Vue 2 没有“app”的概念，我们定义的应用只是通过 <code>new Vue()</code> 创建的根 Vue 实例。从同一个 Vue 构造函数<strong>创建的每个根实例共享相同的全局配置</strong></p><p>在 Vue 3 中我们引入…   </p><p>一个新的全局 API：<code>createApp</code></p><p>调用 <code>createApp</code> 返回一个应用实例，这是 Vue 3 中的新概念：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>应用实例暴露当前全局 API 的子集，经验法则是，任何全局改变 Vue 行为的 API 现在都会移动到应用实例上，以下是当前全局 API 及其相应实例 API 的表：</p><table><thead><tr><th>2.x 全局 API</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config</td><td>app.config</td></tr><tr><td>Vue.config.productionTip</td><td><em>removed</em> (<a href="https://www.vue3js.cn/docs/zh/guide/migration/global-api.html#config-productiontip-removed" target="_blank" rel="noopener">见下方</a>)</td></tr><tr><td>Vue.config.ignoredElements</td><td>app.config.isCustomElement (<a href="https://www.vue3js.cn/docs/zh/guide/migration/global-api.html#config-ignoredelements-is-now-config-iscustomelement" target="_blank" rel="noopener">见下方</a>)</td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use (<a href="https://www.vue3js.cn/docs/zh/guide/migration/global-api.html#a-note-for-plugin-authors" target="_blank" rel="noopener">见下方</a>)</td></tr></tbody></table><p>所有其他不全局改变行为的全局 API 现在被命名为 exports，文档见<a href="https://www.vue3js.cn/docs/zh/guide/migration/global-api-treeshaking.html" target="_blank" rel="noopener">全局 API Treeshaking</a></p><h5 id="插件使用者须知"><a href="#插件使用者须知" class="headerlink" title="插件使用者须知"></a>插件使用者须知</h5><p>插件开发者通常使用 <code>Vue.use</code>。例如，官方的 <code>vue-router</code> 插件是如何在浏览器环境中自行安装的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> inBrowser <span class="token operator">=</span> <span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token comment" spellcheck="true">/* … */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inBrowser <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  window<span class="token punctuation">.</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>由于 <code>use</code> 全局 API 在 Vue 3 中不再使用，此方法将停止工作并停止调用 <code>Vue.use()</code> 现在将触发警告，于是，开发者必须在应用程序实例上显式指定使用此插件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>MyApp<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span></code></pre><h5 id="挂载-App-实例"><a href="#挂载-App-实例" class="headerlink" title="挂载 App 实例"></a>挂载 App 实例</h5><p>使用 <code>createApp(/* options */)</code> 初始化后，应用实例 <code>app</code> 可用于挂载具有 <code>app.mount(domTarget)</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> MyApp <span class="token keyword">from</span> <span class="token string">'./MyApp.vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>MyApp<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>经过所有这些更改，我们在指南开头的组件和指令将被改写为如下内容：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>MyApp<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;button @click="count++">Clicked {{ count }} times.&lt;/button>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  mounted<span class="token punctuation">:</span> el <span class="token operator">=</span><span class="token operator">></span> el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 现在所有应用实例都挂载了，与其组件树一起，将具有相同的 “button-counter” 组件 和 “focus” 指令不污染全局环境</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><h4 id="12-key属性"><a href="#12-key属性" class="headerlink" title="12.key属性"></a>12.key属性</h4><ul><li>新增：对于 v-if/v-else/v-else-if的各分支项key将不再是必须的，因为现在 Vue 会自动生成唯一的key<ul><li><strong>非兼容</strong>：如果你手动提供 <code>key</code>，那么每个分支必须使用唯一的 <code>key</code>。你不能通过故意使用相同的 <code>key</code> 来强制重用分支。</li></ul></li><li><strong>非兼容</strong>：<code>&lt;template v-for&gt;</code> 的 <code>key</code> 应该设置在 <code>&lt;template&gt;</code> 标签上 (而不是设置在它的子节点上)。</li></ul><p>在 Vue 2.x 中 <code>&lt;template&gt;</code> 标签不能拥有 <code>key</code>。不过你可以为其每个子节点分别设置 <code>key</code>。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Vue 2.x --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>在 Vue 3.x 中 <code>key</code> 则应该被设置在 <code>&lt;template&gt;</code> 标签上。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Vue 3.x --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="13-按键修饰符"><a href="#13-按键修饰符" class="headerlink" title="13.按键修饰符"></a>13.按键修饰符</h4><ul><li><strong>非兼容</strong>：不再支持使用数字 (即键码) 作为 <code>v-on</code> 修饰符</li><li><strong>非兼容</strong>：不再支持 <code>config.keyCodes</code></li></ul><p>在 Vue 2 中，支持 <code>keyCodes</code> 作为修改 <code>v-on</code> 方法的方法。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 键码版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 别名版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>此外，你可以通过全局 <code>config.keyCodes</code> 选项。</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes <span class="token operator">=</span> <span class="token punctuation">{</span>  f1<span class="token punctuation">:</span> <span class="token number">112</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 键码版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.112</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showHelpText<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 自定别名版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.f1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showHelpText<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>从<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode" target="_blank" rel="noopener"><code>KeyboardEvent.keyCode</code> has been deprecated</a> 开始，Vue 3 继续支持这一点就不再有意义了。因此，现在建议对任何要用作修饰符的键使用 kebab-cased (短横线) 大小写名称。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Vue 3 在 v-on 上使用 按键修饰符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.delete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirmDelete<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>因此，这意味着 <code>config.keyCodes</code> 现在也已弃用，不再受支持。</p><h4 id="14-渲染函数API"><a href="#14-渲染函数API" class="headerlink" title="14.渲染函数API"></a>14.渲染函数API</h4><h5 id="2-x-语法-1"><a href="#2-x-语法-1" class="headerlink" title="2.x 语法"></a>2.x 语法</h5><p>在 2.x 中，e <code>render</code> 函数将自动接收 <code>h</code> 函数 (它是 <code>createElement</code> 的常规别名) 作为参数：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Vue 2 渲染函数示例</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-x-语法-1"><a href="#3-x-语法-1" class="headerlink" title="3.x 语法"></a>3.x 语法</h5><p>在 3.x 中，<code>h</code> 现在是全局导入的，而不是作为参数自动传递。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Vue 3 渲染函数示例</span><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="15-过渡的class名更改"><a href="#15-过渡的class名更改" class="headerlink" title="15.过渡的class名更改"></a>15.过渡的class名更改</h4><p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p><p>为了更加明确易读，我们现在将这些初始状态重命名为：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.v-enter-from</span>,<span class="token class">.v-leave-to</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.v-leave-from</span>,<span class="token class">.v-enter-to</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在，这些状态之间的区别就清晰多了。</p><p><code>&lt;transition&gt;</code> 组件相关属性名也发生了变化：</p><ul><li><code>leave-class</code> 已经被重命名为 <code>leave-from-class</code> (在渲染函数或 JSX 中可以写为：<code>leaveFromClass</code>)</li><li><code>enter-class</code> 已经被重命名为 <code>enter-from-class</code> (在渲染函数或 JSX 中可以写为：<code>enterFromClass</code>)</li></ul><h4 id="16-v-if-与-v-for-的优先级对比"><a href="#16-v-if-与-v-for-的优先级对比" class="headerlink" title="16.v-if 与 v-for 的优先级对比"></a>16.v-if 与 v-for 的优先级对比</h4><p>2.x 版本中在一个元素上同时使用 <code>v-if</code> 和 <code>v-for</code> 时，<code>v-for</code> 会优先作用。</p><p>3.x 版本中 <code>v-if</code> 总是优先于 <code>v-for</code> 生效</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp初学习</title>
      <link href="/2020/10/25/uniapp%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/10/25/uniapp%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>对B站上面的一个uniapp的课程的简单学习记录</p><p><a href="https://www.bilibili.com/video/BV1y7411p7JC?from=search&seid=841327782786397173" target="_blank" rel="noopener">视频地址</a></p><p><a href="https://github.com/lookroot/vuestu/tree/master/unibasicdemo" target="_blank" rel="noopener">另一个文档地址</a>：介绍的更广泛一些</p><p>上面文档的话，其实感觉最重要的还是给我带来了一个关于组件的库，可以更方便的进行使用了</p><p><a href="http://www.uviewui.com/components/intro.html" target="_blank" rel="noopener">uview组件库</a>：直接用于uniapp端的组件库，还是比较完善的</p><h4 id="uni-app的基本使用"><a href="#uni-app的基本使用" class="headerlink" title="uni-app的基本使用"></a>uni-app的基本使用</h4><p>课程介绍：</p><p>基础部分：</p><ul><li>环境搭建</li><li>页面外观配置</li><li>数据绑定</li><li>uni-app的生命周期</li><li>组件的使用</li><li>uni-app中样式学习</li><li>在uni-app中使用字体图标和开启scss</li><li>条件注释跨端兼容</li><li>uni中的事件</li><li>导航跳转</li><li>组件创建和通讯，及组件的生命周期</li><li>uni-app中使用uni-ui库</li></ul><h5 id="uni-app介绍-官方网页"><a href="#uni-app介绍-官方网页" class="headerlink" title="uni-app介绍 官方网页"></a>uni-app介绍 <a href="https://uniapp.dcloud.io/resource" target="_blank" rel="noopener">官方网页</a></h5><h5 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h5><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p><p><strong>注意：</strong></p><ul><li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li><li>微信开发者工具在设置中安全设置，服务端口开启</li></ul><h5 id="介绍项目目录和文件作用"><a href="#介绍项目目录和文件作用" class="headerlink" title="介绍项目目录和文件作用"></a>介绍项目目录和文件作用</h5><p><code>pages.json</code> 文件用来对 uni-app 进行<strong>全局配置</strong>，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等，注意，这个文件很重要，含有pages、tabBar、globalStyle等属性</p><p><code>manifest.json</code> 文件是<strong>应用的配置文件</strong>，用于指定应用的名称、图标、权限等。</p><p><code>App.vue</code>是我们的<strong>根组件</strong>，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用<strong>应用的</strong>生命周期函数。</p><p><code>main.js</code>是我们的<strong>项目入口文件</strong>，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><p><code>unpackage</code> 就是打包目录，在这里有<strong>各个平台的打包文件</strong></p><p><code>pages</code> 所有的<strong>页面存放目录</strong>，我们一般在这个目录里面添加页面</p><p><code>static</code> 静态资源目录，例如图片等</p><p><code>components</code> <strong>组件存放</strong>目录，所有引入的组件都在这里面</p><p>为了实现多端兼容，综合考虑编译速度、运行性能等因素，<code>uni-app</code> 约定了如下开发规范：</p><ul><li>页面文件遵循 <a href="https://vue-loader.vuejs.org/zh/spec.html" target="_blank" rel="noopener">Vue 单文件组件 (SFC) 规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README" target="_blank" rel="noopener">uni-app 组件规范</a></li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 <code>wx</code> 替换为 <code>uni</code>，详见<a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">uni-app接口规范</a></li><li>数据绑定及事件处理同 <code>Vue.js</code> 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul><h4 id="全局配置和页面配置-在pages-json里面"><a href="#全局配置和页面配置-在pages-json里面" class="headerlink" title="全局配置和页面配置 在pages.json里面"></a>全局配置和页面配置 <strong>在pages.json里面</strong></h4><p><strong>更具体的配置直接去查官网文档即可</strong></p><h5 id="通过globalStyle属性进行全局配置"><a href="#通过globalStyle属性进行全局配置" class="headerlink" title="通过globalStyle属性进行全局配置"></a>通过globalStyle属性进行全局配置</h5><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle" target="_blank" rel="noopener">详细文档</a></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f" target="_blank" rel="noopener">页面生命周期</a>。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f" target="_blank" rel="noopener">页面生命周期</a></td></tr></tbody></table><h5 id="创建新的message页面"><a href="#创建新的message页面" class="headerlink" title="创建新的message页面"></a>创建新的message页面</h5><p>右键pages目录新建页面，在里面选择基本模板，输入名称，勾选创建同名目录即可自动创建vue文件</p><p>在pages.json文件里面就会<strong>自动将这个页面的路径添加进去</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        这是信息页面    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h5 id="通过pages来配置页面"><a href="#通过pages来配置页面" class="headerlink" title="通过pages来配置页面"></a>通过pages来配置页面</h5><p><strong>相当于vue的路由</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style" target="_blank" rel="noopener">pageStyle</a></td></tr></tbody></table><p>pages数组数组中<strong>第一项表示应用启动页</strong></p><pre class=" language-html"><code class="language-html">"pages": [ 、        {            "path":"pages/message/message"        },        {            "path": "pages/index/index",            "style": {                "navigationBarTitleText": "uni-app"            }        }    ]</code></pre><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><pre class=" language-js"><code class="language-js"><span class="token string">"pages"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span>        <span class="token punctuation">{</span>            <span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"pages/message/message"</span><span class="token punctuation">,</span>            <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"navigationBarBackgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#007AFF"</span><span class="token punctuation">,</span>                <span class="token string">"navigationBarTextStyle"</span><span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>                <span class="token string">"enablePullDownRefresh"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token string">"disableScroll"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token string">"h5"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"pullToRefresh"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#007AFF"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span></code></pre><h5 id="配置tabbar"><a href="#配置tabbar" class="headerlink" title="配置tabbar"></a>配置tabbar</h5><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p>类似于vue的公共组件tabbar，但是在uinapp里面没有这个概念，其使用的分页切换的概念</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black/white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 <strong>list</strong> 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>案例代码：</p><pre class=" language-js"><code class="language-js"><span class="token string">"tabBar"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"list"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>                <span class="token string">"pagePath"</span><span class="token punctuation">:</span><span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>                <span class="token string">"iconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/home.png"</span><span class="token punctuation">,</span>                <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/home-active.png"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"信息"</span><span class="token punctuation">,</span>                <span class="token string">"pagePath"</span><span class="token punctuation">:</span><span class="token string">"pages/message/message"</span><span class="token punctuation">,</span>                <span class="token string">"iconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/message.png"</span><span class="token punctuation">,</span>                <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/message-active.png"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>                <span class="token string">"pagePath"</span><span class="token punctuation">:</span><span class="token string">"pages/contact/contact"</span><span class="token punctuation">,</span>                <span class="token string">"iconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/contact.png"</span><span class="token punctuation">,</span>                <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span><span class="token string">"static/tabs/contact-active.png"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span></code></pre><h5 id="condition启动模式配置"><a href="#condition启动模式配置" class="headerlink" title="condition启动模式配置"></a>condition启动模式配置</h5><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><pre class=" language-js"><code class="language-js"><span class="token string">"condition"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//模式配置，仅开发期间生效</span>    <span class="token string">"current"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前激活的模式（list 的索引项）</span>    <span class="token string">"list"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"swiper"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//模式名称</span>            <span class="token string">"path"</span><span class="token punctuation">:</span> <span class="token string">"pages/component/swiper/swiper"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//启动页面，必选</span>            <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token string">"interval=4000&amp;autoplay=false"</span> <span class="token comment" spellcheck="true">//启动参数，在页面的onLoad函数里面得到。</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>            <span class="token string">"path"</span><span class="token punctuation">:</span> <span class="token string">"pages/component/switch/switch"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f" target="_blank" rel="noopener">onLoad</a> 函数里获得</td></tr></tbody></table><h4 id="组件的基本使用"><a href="#组件的基本使用" class="headerlink" title="组件的基本使用"></a>组件的基本使用</h4><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p><p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p><h5 id="text文本组件的用法"><a href="#text文本组件的用法" class="headerlink" title="text文本组件的用法"></a>text文本组件的用法</h5><h6 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h6><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">默认值</th><th align="center">必填</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">selectable</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">文本是否可选</td></tr><tr><td align="center">space</td><td align="center">string</td><td align="center">.</td><td align="center">否</td><td align="center">显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td align="center">decode</td><td align="center">boolean</td><td align="center">false</td><td align="center">否</td><td align="center">是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签、在同一行显示</li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><h6 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h6><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 长按文本是否可选 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">selectable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 显示连续空格的方式 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ensp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了  老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>emsp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了  老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>nbsp<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>来了  老弟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>skyblue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 是否解码 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">decode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> <span class="token entity" title="&lt;">&amp;lt;</span> <span class="token entity" title="&gt;">&amp;gt;</span> <span class="token entity" title="&amp;">&amp;amp;</span> <span class="token entity" title="&apos;">&amp;apos;</span> <span class="token entity" title="&ensp;">&amp;ensp;</span> <span class="token entity" title="&emsp;">&amp;emsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h5 id="view视图容器组件的用法"><a href="#view视图容器组件的用法" class="headerlink" title="view视图容器组件的用法"></a>view视图容器组件的用法</h5><blockquote><p>View 视图容器， 类似于 HTML 中的 div</p></blockquote><h6 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h6><p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/2view.png" alt=""></p><h6 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h6><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2_active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>box1<span class="token punctuation">'</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>active<span class="token punctuation">'</span></span> <span class="token attr-name">hover-stop-propagation</span> <span class="token attr-name">:hover-start-time</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span> <span class="token attr-name">:hover-stay-time</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>2000<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h5 id="button按钮组件的用法"><a href="#button按钮组件的用法" class="headerlink" title="button按钮组件的用法"></a>button按钮组件的用法</h5><h6 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h6><table><thead><tr><th align="center">属性名</th><th align="center">类型</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">size</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的大小</td></tr><tr><td align="center">type</td><td align="center">String</td><td align="center">default</td><td align="center">按钮的样式类型</td></tr><tr><td align="center">plain</td><td align="center">Boolean</td><td align="center">false</td><td align="center">按钮是否镂空，背景色透明</td></tr><tr><td align="center">disabled</td><td align="center">Boolean</td><td align="center">false</td><td align="center">是否按钮</td></tr><tr><td align="center">loading</td><td align="center">Boolean</td><td align="center">false</td><td align="center">名称是否带 loading 图标</td></tr></tbody></table><ul><li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><h6 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h6><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mini<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>primary<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mini<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>default<span class="token punctuation">'</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mini<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>warn<span class="token punctuation">'</span></span> <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>true<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h5 id="image组件的使用"><a href="#image组件的使用" class="headerlink" title="image组件的使用"></a>image组件的使用</h5><h6 id="image"><a href="#image" class="headerlink" title="image"></a><a href="https://uniapp.dcloud.io/component/image?id=image" target="_blank" rel="noopener">image</a></h6><p>图片。</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image{will-change: transform}</code> ,可优化此问题。</li></ul><h4 id="uni-app中的样式"><a href="#uni-app中的样式" class="headerlink" title="uni-app中的样式"></a>uni-app中的样式</h4><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p><pre><code> @font-face {     font-family: test1-icon;     src: url(&#39;~@/static/iconfont.ttf&#39;); }</code></pre></li></ul></li><li><p>如何使用scss或者less</p></li></ul><h4 id="uni-app中的数据绑定"><a href="#uni-app中的数据绑定" class="headerlink" title="uni-app中的数据绑定"></a>uni-app中的数据绑定</h4><p>在页面中需要定义数据，和我们之前的vue一摸一样，直接在data中定义数据即可</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'hello-uni'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="插值表达式的使用"><a href="#插值表达式的使用" class="headerlink" title="插值表达式的使用"></a>插值表达式的使用</h5><ul><li><p>利用插值表达式渲染基本数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre></li><li><p>在插值表达式中使用三元运算</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{ flag ? '我是真的':'我是假的' }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre></li><li><p>基本运算</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{1+1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre></li></ul><h5 id="v-bind动态绑定属性"><a href="#v-bind动态绑定属性" class="headerlink" title="v-bind动态绑定属性"></a>v-bind动态绑定属性</h5><p>在data中定义了一张图片，我们希望把这张图片渲染到页面上</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      img<span class="token punctuation">:</span> <span class="token string">'http://destiny001.gitee.io/image/monkey_02.jpg'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>利用v-bind进行渲染</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span></code></pre><p>还可以缩写成:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span></code></pre><h5 id="v-for的使用"><a href="#v-for的使用" class="headerlink" title="v-for的使用"></a>v-for的使用</h5><p>data中定以一个数组，最终将数组渲染到页面上</p><pre class=" language-js"><code class="language-js">data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'刘能'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">29</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'赵四'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">39</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'宋小宝'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">49</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'小沈阳'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">59</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>利用v-for进行循环</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>view v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,i) in arr"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"i"</span><span class="token operator">></span>名字：<span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">-</span>年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span></code></pre><h4 id="uni中的事件"><a href="#uni中的事件" class="headerlink" title="uni中的事件"></a>uni中的事件</h4><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><p>在uni中事件绑定和vue中是一样的，通过v-on进行事件的绑定，也可以简写为@</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tapHandle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我啊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>事件函数定义在methods中</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  tapHandle <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'真的点我了'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h5><ul><li><p>默认如果没有传递参数，事件函数第一个形参为事件对象</p><pre><code>// template&lt;button @click=&quot;tapHandle&quot;&gt;点我啊&lt;/button&gt;// scriptmethods: {  tapHandle (e) {    console.log(e)  }}</code></pre></li><li><p>如果给事件函数传递参数了，则对应的事件函数形参接收的则是传递过来的数据</p><pre><code>// template&lt;button @click=&quot;tapHandle(1)&quot;&gt;点我啊&lt;/button&gt;// scriptmethods: {  tapHandle (num) {    console.log(num)  }}</code></pre></li><li><p>如果获取事件对象也想传递参数</p><pre><code>// template&lt;button @click=&quot;tapHandle(1,$event)&quot;&gt;点我啊&lt;/button&gt;// scriptmethods: {  tapHandle (num,e) {    console.log(num,e)  }}</code></pre></li></ul><h4 id="uni的生命周期"><a href="#uni的生命周期" class="headerlink" title="uni的生命周期"></a>uni的生命周期</h4><h5 id="应用的生命周期"><a href="#应用的生命周期" class="headerlink" title="应用的生命周期"></a>应用的生命周期</h5><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><p>在这里面可携带一个<strong>option</strong>参数，显示一些场景信息，比如是从什么地方进来的（像扫码进来的，小程序进来的）还有一些杂七杂八的场景，总之，这个option可以获取这个应用到底是在什么场景下面，需要干什么</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td></tr></tbody></table><h5 id="页面的生命周期"><a href="#页面的生命周期" class="headerlink" title="页面的生命周期"></a>页面的生命周期</h5><p><code>uni-app</code> 支持如下页面生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto" target="_blank" rel="noopener">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><h5 id="开启下拉刷新"><a href="#开启下拉刷新" class="headerlink" title="开启下拉刷新"></a>开启下拉刷新</h5><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h6 id="通过配置文件开启"><a href="#通过配置文件开启" class="headerlink" title="通过配置文件开启"></a>通过配置文件开启</h6><p>创建list页面进行演示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        杭州学科        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in arr<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{item}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'前端'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'ui'</span><span class="token punctuation">,</span><span class="token string">'大数据'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"pages/list/list"</span><span class="token punctuation">,</span>    <span class="token string">"style"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token string">"enablePullDownRefresh"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="通过API开启"><a href="#通过API开启" class="headerlink" title="通过API开启"></a>通过API开启</h6><p><a href="https://uniapp.dcloud.io/api/ui/pulldown" target="_blank" rel="noopener">api文档</a></p><pre class=" language-html"><code class="language-html">uni.startPullDownRefresh()</code></pre><h5 id="监听下拉刷新"><a href="#监听下拉刷新" class="headerlink" title="监听下拉刷新"></a>监听下拉刷新</h5><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'前端'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'ui'</span><span class="token punctuation">,</span><span class="token string">'大数据'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    startPull <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      uni<span class="token punctuation">.</span><span class="token function">startPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onPullDownRefresh <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发下拉刷新了'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="关闭下拉刷新"><a href="#关闭下拉刷新" class="headerlink" title="关闭下拉刷新"></a>关闭下拉刷新</h5><p>uni.stopPullDownRefresh()</p><p>停止当前页面下拉刷新。</p><p>案例演示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>startPull<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开启下拉刷新<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        杭州学科        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in arr<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{item}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'前端'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'ui'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            startPull <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                uni<span class="token punctuation">.</span><span class="token function">startPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        onPullDownRefresh <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'前端'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'ui'</span><span class="token punctuation">,</span><span class="token string">'大数据'</span><span class="token punctuation">]</span>                uni<span class="token punctuation">.</span><span class="token function">stopPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h4><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><pre class=" language-vue"><code class="language-vue"><template>    <view>        <button type="primary" @click="startPull">开启下拉刷新</button>        杭州学科        <view v-for="(item,index) in arr" :key="index">            {{item}}        </view>    </view></template><script>    export default {        data () {            return {                arr: ['前端','java','ui','大数据','前端','java','ui','大数据']            }        },        onReachBottom () {            console.log('触底了')        }    }</script><style>    view{        height: 100px;        line-height: 100px;    }</style></code></pre><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><p><strong>发送get请求</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"sendGet"</span><span class="token operator">></span>发送请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            sendGet <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    url<span class="token punctuation">:</span> <span class="token string">'http://localhost:8082/api/getlunbo'</span><span class="token punctuation">,</span>                    <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>发送post请求</strong></p><h4 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h4><h5 id="uni-setStorage"><a href="#uni-setStorage" class="headerlink" title="uni.setStorage"></a><strong>uni.setStorage</strong></h5><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage" target="_blank" rel="noopener">官方文档</a></p><p>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个异步接口。</p><p>代码演示</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"setStor"</span><span class="token operator">></span>存储数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            setStor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                uni<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                     key<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                     data<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                     success <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'存储成功'</span><span class="token punctuation">)</span>                     <span class="token punctuation">}</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h5 id="uni-setStorageSync"><a href="#uni-setStorageSync" class="headerlink" title="uni.setStorageSync"></a>uni.setStorageSync</h5><p>将 data 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个同步接口。</p><p>代码演示</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>view<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"setStor"</span><span class="token operator">></span>存储数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            setStor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                uni<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h5 id="uni-getStorage"><a href="#uni-getStorage" class="headerlink" title="uni.getStorage"></a>uni.getStorage</h5><p>从本地缓存中异步获取指定 key 对应的内容。</p><p>代码演示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStorage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                id<span class="token punctuation">:</span> <span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            getStorage <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                uni<span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    key<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span>  res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> res<span class="token punctuation">.</span>data                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="uni-getStorageSync"><a href="#uni-getStorageSync" class="headerlink" title="uni.getStorageSync"></a>uni.getStorageSync</h5><p>从本地缓存中同步获取指定 key 对应的内容。</p><p>代码演示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStorage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            getStorage <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> id <span class="token operator">=</span> uni<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="uni-removeStorage"><a href="#uni-removeStorage" class="headerlink" title="uni.removeStorage"></a>uni.removeStorage</h5><p>从本地缓存中异步移除指定 key。</p><p>代码演示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeStorage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            removeStorage <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                uni<span class="token punctuation">.</span><span class="token function">removeStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    key<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="uni-removeStorageSync"><a href="#uni-removeStorageSync" class="headerlink" title="uni.removeStorageSync"></a>uni.removeStorageSync</h5><p>从本地缓存中同步移除指定 key。</p><p>代码演示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>removeStorage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            removeStorage <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                uni<span class="token punctuation">.</span><span class="token function">removeStorageSync</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="上传图片、预览图片"><a href="#上传图片、预览图片" class="headerlink" title="上传图片、预览图片"></a>上传图片、预览图片</h4><h5 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h5><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chooseImg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in imgArr<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                imgArr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            chooseImg <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                uni<span class="token punctuation">.</span><span class="token function">chooseImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span> res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>imgArr <span class="token operator">=</span> res<span class="token punctuation">.</span>tempFilePaths                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="预览图片"><a href="#预览图片" class="headerlink" title="预览图片"></a>预览图片</h5><p>结构</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in imgArr<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>previewImg(item)<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>预览图片的方法</p><pre class=" language-js"><code class="language-js">previewImg <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">previewImage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    urls<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imgArr<span class="token punctuation">,</span>    current  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="条件注释实现跨段兼容"><a href="#条件注释实现跨段兼容" class="headerlink" title="条件注释实现跨段兼容"></a>条件注释实现跨段兼容</h4><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/" target="_blank" rel="noopener">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/" target="_blank" rel="noopener">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started" target="_blank" rel="noopener">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/" target="_blank" rel="noopener">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction" target="_blank" rel="noopener">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序</td><td></td></tr></tbody></table><h5 id="组件的条件注释"><a href="#组件的条件注释" class="headerlink" title="组件的条件注释"></a>组件的条件注释</h5><p>代码演示</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- #ifdef H5 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  h5页面会显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #endif --></span><span class="token comment" spellcheck="true">&lt;!-- #ifdef MP-WEIXIN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  微信小程序会显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #endif --></span><span class="token comment" spellcheck="true">&lt;!-- #ifdef APP-PLUS --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  app会显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- #endif --></span></code></pre><h5 id="api的条件注释"><a href="#api的条件注释" class="headerlink" title="api的条件注释"></a>api的条件注释</h5><p>代码演示</p><pre class=" language-js"><code class="language-js">onLoad <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//#ifdef MP-WEIXIN</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'微信小程序'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//#endif</span>  <span class="token comment" spellcheck="true">//#ifdef H5</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'h5页面'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//#endif</span><span class="token punctuation">}</span></code></pre><p>样式的条件注释</p><p>代码演示</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* #ifdef H5 */</span><span class="token selector">view</span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* #endif */</span><span class="token comment" spellcheck="true">/* #ifdef MP-WEIXIN */</span><span class="token selector">view</span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* #endif */</span></code></pre><h4 id="uni中的导航跳转"><a href="#uni中的导航跳转" class="headerlink" title="uni中的导航跳转"></a>uni中的导航跳转</h4><h5 id="利用navigator进行跳转"><a href="#利用navigator进行跳转" class="headerlink" title="利用navigator进行跳转"></a>利用navigator进行跳转</h5><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator" target="_blank" rel="noopener">文档地址</a></p><p>跳转到普通页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/pages/about/about<span class="token punctuation">"</span></span> <span class="token attr-name">hover-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navigator-hover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到关于页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span></code></pre><p>跳转到tabbar页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/pages/message/message<span class="token punctuation">"</span></span> <span class="token attr-name">open-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>switchTab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到message页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span></code></pre><h5 id="利用编程式导航进行跳转"><a href="#利用编程式导航进行跳转" class="headerlink" title="利用编程式导航进行跳转"></a>利用编程式导航进行跳转</h5><p><a href="https://uniapp.dcloud.io/api/router?id=navigateto" target="_blank" rel="noopener">导航跳转文档</a></p><p><strong>利用navigateTo进行导航跳转</strong></p><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goAbout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到关于页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>通过navigateTo方法进行跳转到普通页面</p><pre class=" language-js"><code class="language-js">goAbout <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/pages/about/about'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到message页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><p>通过switchTab方法进行跳转</p><pre class=" language-js"><code class="language-js">goMessage <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/pages/message/message'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>redirectTo进行跳转</strong> </p><p>关闭当前页面，跳转到应用内的某个页面。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- template --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到message页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- js --></span>goMessage () {  uni.switchTab({    url: '/pages/message/message'  })}</code></pre><p>通过onUnload测试当前组件确实卸载</p><pre class=" language-js"><code class="language-js">onUnload <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'组件卸载了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="导航跳转传递参数"><a href="#导航跳转传递参数" class="headerlink" title="导航跳转传递参数"></a>导航跳转传递参数</h5><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><pre class=" language-js"><code class="language-js">goAbout <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/pages/about/about?id=80'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接收参数的页面</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        onLoad <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="uni-app中组件的创建"><a href="#uni-app中组件的创建" class="headerlink" title="uni-app中组件的创建"></a>uni-app中组件的创建</h4><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建test组件，在component中创建test目录，然后新建test.vue文件</p><pre><code>&lt;template&gt;    &lt;view&gt;        这是一个自定义组件    &lt;/view&gt;&lt;/template&gt;&lt;script&gt;&lt;/script&gt;&lt;style&gt;&lt;/style&gt;</code></pre></li><li><p>在其他组件中导入该组件并注册</p><pre><code>import test from &quot;@/components/test/test.vue&quot;</code></pre></li><li><p>注册组件</p><pre class=" language-js"><code class="language-js">components<span class="token punctuation">:</span> <span class="token punctuation">{</span>test<span class="token punctuation">}</span></code></pre></li><li><p>使用组件</p><pre><code>&lt;test&gt;&lt;/test&gt;</code></pre></li></ul><h5 id="组件的生命周期函数"><a href="#组件的生命周期函数" class="headerlink" title="组件的生命周期函数"></a>组件的生命周期函数</h5><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate" target="_blank" rel="noopener">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created" target="_blank" rel="noopener">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount" target="_blank" rel="noopener">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted" target="_blank" rel="noopener">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick" target="_blank" rel="noopener">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate" target="_blank" rel="noopener">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated" target="_blank" rel="noopener">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy" target="_blank" rel="noopener">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed" target="_blank" rel="noopener">详见</a></td><td></td><td></td></tr></tbody></table><h4 id="组件的通讯"><a href="#组件的通讯" class="headerlink" title="组件的通讯"></a>组件的通讯</h4><h5 id="父组件给子组件传值"><a href="#父组件给子组件传值" class="headerlink" title="父组件给子组件传值"></a>父组件给子组件传值</h5><p>通过props来接受外界传递到组件内部的值</p><pre><code>&lt;template&gt;    &lt;view&gt;        这是一个自定义组件 {{msg}}    &lt;/view&gt;&lt;/template&gt;&lt;script&gt;    export default {        props: [&#39;msg&#39;]    }&lt;/script&gt;&lt;style&gt;&lt;/style&gt;</code></pre><p>其他组件在使用login组件的时候传递值</p><pre><code>&lt;template&gt;    &lt;view&gt;        &lt;test :msg=&quot;msg&quot;&gt;&lt;/test&gt;    &lt;/view&gt;&lt;/template&gt;&lt;script&gt;    import test from &quot;@/components/test/test.vue&quot;    export default {        data () {            return {                msg: &#39;hello&#39;            }        },        components: {test}    }&lt;/script&gt;</code></pre><h5 id="子组件给父组件传值"><a href="#子组件给父组件传值" class="headerlink" title="子组件给父组件传值"></a>子组件给父组件传值</h5><p>通过$emit触发事件进行传递参数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        这是一个自定义组件 {{msg}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sendMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>给父组件传值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                status<span class="token punctuation">:</span> <span class="token string">'打篮球'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>                value<span class="token punctuation">:</span> <span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            sendMsg <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'myEvent'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对父组件传入的方法进行调用</span>                uni<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'onemit'</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对uniapp自带的监听函数的调用</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>父组件定义自定义事件并接收参数</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@myEvent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">"@/components/test/test.vue"</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">'hello'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">onload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//对子组件所有的触发了onemit函数的监听</span>          uni<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'onemit'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>rel<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rel<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//还有$once</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//传入子组件的方法</span>            getMsg <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>test<span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="兄弟组件通讯"><a href="#兄弟组件通讯" class="headerlink" title="兄弟组件通讯"></a>兄弟组件通讯</h5><h4 id="uni-ui的使用"><a href="#uni-ui的使用" class="headerlink" title="uni-ui的使用"></a>uni-ui的使用</h4><p><a href="https://uniapp.dcloud.io/component/README?id=uniui" target="_blank" rel="noopener">uni-ui文档</a></p><p>1、进入Grid宫格组件</p><p>2、使用HBuilderX导入该组件</p><p>3、导入该组件</p><pre class=" language-html"><code class="language-html">import uniGrid from "@/components/uni-grid/uni-grid.vue"import uniGridItem from "@/components/uni-grid-item/uni-grid-item.vue"</code></pre><p>4、注册组件</p><pre class=" language-html"><code class="language-html">components: {uniGrid,uniGridItem}</code></pre><p>5、使用组件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uni-grid</span> <span class="token attr-name">:column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uni-grid-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uni-grid-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uni-grid-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uni-grid-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uni-grid-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uni-grid-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>uni-grid</span><span class="token punctuation">></span></span></code></pre><h4 id="vuex的使用"><a href="#vuex的使用" class="headerlink" title="vuex的使用"></a>vuex的使用</h4><p>1.直接新建store目录，在里面新建index.js文件，在里面引入vuex并进行数据添加</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><p>2.直接在main.js里面挂载vuex</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment" spellcheck="true">//引入vuex</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token comment" spellcheck="true">//把vuex定义成全局组件</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$store <span class="token operator">=</span> storeVue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>App<span class="token punctuation">.</span>mpType <span class="token operator">=</span> <span class="token string">'app'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span>App<span class="token punctuation">,</span>    store<span class="token comment" spellcheck="true">//挂载</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>3.之后在其他文件里面就可以直接使用了</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> uniapp 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git简单使用</title>
      <link href="/2020/10/18/Git%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/10/18/Git%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>就是把git方面的知识写下来，方便回忆和查看，虽然之前零零散散看了一些，但还是不清不楚的，主要记录一些操作方面的知识</p><p><a href="https://www.bilibili.com/video/BV1FE411P7B3" target="_blank" rel="noopener">狂神说的git视频</a></p><p><a href="https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ" target="_blank" rel="noopener">文档</a></p><h4 id="1-基础指令"><a href="#1-基础指令" class="headerlink" title="1.基础指令"></a>1.基础指令</h4><p>1）、cd : 改变目录。</p><p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3）、pwd : 显示当前所在的目录路径。</p><p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p><p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p><pre><code>rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！强制删除根目录</code></pre><p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p><p>10）、reset 重新初始化终端/清屏。</p><p>11）、clear 清屏。</p><p>12）、history 查看命令历史。</p><p>13）、help 帮助。</p><p>14）、exit 退出。</p><p>15）、#表示注释</p><h4 id="2-git配置"><a href="#2-git配置" class="headerlink" title="2.git配置"></a>2.git配置</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看系统config</span><span class="token function">git</span> config --system --list　　<span class="token comment" spellcheck="true">#查看当前用户（global）配置</span><span class="token function">git</span> config --global  --list</code></pre><h5 id="Git相关的配置文件："><a href="#Git相关的配置文件：" class="headerlink" title="Git相关的配置文件："></a><strong>Git相关的配置文件：</strong></h5><p>1）、Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</p><p>2）、C:\Users\Administrator\ .gitconfig   只适用于当前登录用户的配置  –global 全局</p><h5 id="设置用户名与邮箱（用户标识，必要）"><a href="#设置用户名与邮箱（用户标识，必要）" class="headerlink" title="设置用户名与邮箱（用户标识，必要）"></a>设置用户名与邮箱（用户标识，必要）</h5><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"kuangshen"</span>  <span class="token comment" spellcheck="true">#名称</span><span class="token function">git</span> config --global user.email 24736743@qq.com   <span class="token comment" spellcheck="true">#邮箱</span></code></pre><p>如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要<strong>–global</strong>选项。总之–global为全局配置，不加为某个项目的特定配置。</p><h4 id="3-git基本理论"><a href="#3-git基本理论" class="headerlink" title="3.git基本理论"></a>3.git基本理论</h4><p>Git本地有<strong>三个工作区域</strong>：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p0NJ4L9OPI9ia1MmibpvDd6cSddBdvrlbdEtyEOrh4CKnWVibyfCHa3lzXw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img" style="zoom:67%;" /><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>git的<strong>工作流程</strong>一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p09iaOhl0dACfLrMwNbDzucGQ30s3HnsiaczfcR6dC9OehicuwibKuHjRlzg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img" style="zoom: 50%;" /><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li><li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><p>查看文件状态</p><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看指定文件状态</span><span class="token function">git</span> status <span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#查看所有文件状态</span><span class="token function">git</span> status<span class="token comment" spellcheck="true"># git add .                  添加所有文件到暂存区</span><span class="token comment" spellcheck="true"># git commit -m "消息内容"    提交暂存区中的内容到本地仓库 -m 提交信息</span></code></pre><h4 id="4-主要操作流程"><a href="#4-主要操作流程" class="headerlink" title="4.主要操作流程"></a>4.主要操作流程</h4><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p0AII6YVooUzibpibzJnoOHHXUsL3f9DqA4horUibfcpEZ88Oyf2gQQNR6w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img" style="zoom:50%;" /><p>注意：<code>[]</code>中括号可用<code>&quot;&quot;</code>双引号代替，输入法英文模式下</p><p>1.建立仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在当前目录新建一个Git代码库</span>$ <span class="token function">git</span> init<span class="token comment" spellcheck="true"># 新建一个目录，将其初始化为Git代码库</span>$ <span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 下载一个项目和它的整个代码历史</span>$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span></code></pre><p>2.修改文件之后，添加文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加指定文件到暂存区</span>$ <span class="token function">git</span> add <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 添加指定目录到暂存区，包括子目录</span>$ <span class="token function">git</span> add <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 添加当前目录的所有文件到暂存区</span>$ <span class="token function">git</span> add <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 添加每个变化前，都会要求确认</span><span class="token comment" spellcheck="true"># 对于同一个文件的多处变化，可以实现分次提交</span>$ <span class="token function">git</span> add -p<span class="token comment" spellcheck="true"># 删除工作区文件，并且将这次删除放入暂存区</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 停止追踪指定文件，但该文件会保留在工作区</span>$ <span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 改名文件，并且将这个改名放入暂存区</span>$ <span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span></code></pre><p>3.提交到本地仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 提交暂存区到仓库区</span>$ <span class="token function">git</span> commit -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交暂存区的指定文件到仓库区</span>$ <span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交工作区自上次commit之后的变化，直接到仓库区</span>$ <span class="token function">git</span> commit -a<span class="token comment" spellcheck="true"># 提交时显示所有diff信息</span>$ <span class="token function">git</span> commit -v<span class="token comment" spellcheck="true"># 使用一次新的commit，替代上一次提交</span><span class="token comment" spellcheck="true"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>$ <span class="token function">git</span> commit --amend -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重做上一次commit，并包括指定文件的新变化</span>$ <span class="token function">git</span> commit --amend <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.</code></pre><p>4.远程同步</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载远程仓库的所有变动，一般就是在远程创建了分支之后，使用这个命令拉去这个分支到本地</span>$ <span class="token function">git</span> fetch <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用这个命令得到所有本地的分支</span>$ <span class="token function">git</span> branch -a<span class="token comment" spellcheck="true"># 使用这个命令切换在本地的分支</span>$ Git checkout 分支名<span class="token comment" spellcheck="true"># 显示所有远程仓库</span>$ <span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 显示某个远程仓库的信息</span>$ <span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 增加一个新的远程仓库，并命名</span>$ <span class="token function">git</span> remote add <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 取回远程仓库的变化，并与本地分支合并</span>$ <span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 上传本地指定分支到远程仓库，常用，</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 强行推送当前分支到远程仓库，即使有冲突</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --force<span class="token comment" spellcheck="true"># 推送所有分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --all</code></pre><p>5.撤销</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 恢复暂存区的指定文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 恢复某个commit的指定文件到暂存区和工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 恢复暂存区的所有文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置暂存区与工作区，与上一次commit保持一致</span>$ <span class="token function">git</span> reset --hard<span class="token comment" spellcheck="true"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>$ <span class="token function">git</span> reset --hard <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>$ <span class="token function">git</span> reset --keep <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个commit，用来撤销指定commit</span><span class="token comment" spellcheck="true"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>$ <span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>暂时将未提交的变化移除，稍后再移入$ <span class="token function">git</span> stash$ <span class="token function">git</span> stash pop</code></pre><p><strong>一个流程</strong></p><p>为了方便，其实可以远程网站上创建一个仓库，之后再git clone下来进行操作</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#clone的</span>$ <span class="token function">git</span> clone url$ <span class="token function">git</span> add filename/dir$ <span class="token function">git</span> commit -m <span class="token string">"注释"</span>$ <span class="token function">git</span> push<span class="token comment" spellcheck="true">#init的</span>$ <span class="token function">git</span> init  <span class="token comment" spellcheck="true"># 初始化git</span><span class="token comment" spellcheck="true">#这两步一般不用</span>$ <span class="token function">git</span> config  user.name <span class="token string">"username"</span>  <span class="token comment" spellcheck="true"># 配置用户名</span>$ <span class="token function">git</span> config  user.email <span class="token string">"email"</span>  <span class="token comment" spellcheck="true"># 配置邮箱名</span>$ <span class="token function">git</span> remote -v  <span class="token comment" spellcheck="true"># 查看远程仓库信息</span>$ <span class="token function">git</span> remote add <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 添加一个指定名字的远程仓库，一般可先创建好</span><span class="token comment" spellcheck="true"># 示例 git remote add jx git@gitee.com:jxl/laravel.git</span>$ <span class="token function">git</span> pull <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">></span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">></span> <span class="token comment" spellcheck="true"># git pull命令用于从另一个存储库或本地分支获取并集成(整合)。git pull命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并，它的完整格式稍稍有点复杂。</span>$ <span class="token function">git</span> add <span class="token keyword">.</span> <span class="token comment" spellcheck="true"># 提交当前所有文件到缓存区</span>$ <span class="token function">git</span> commit -m <span class="token string">"注释"</span>$ <span class="token function">git</span> push <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>本地分支名<span class="token operator">></span>:<span class="token operator">&lt;</span>远程分支名<span class="token operator">></span> <span class="token comment" spellcheck="true"># git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相似。</span></code></pre><h4 id="5-sourcetree"><a href="#5-sourcetree" class="headerlink" title="5.sourcetree"></a>5.sourcetree</h4><p>这是一个客户端程序，可通过这个可视化工具，更方便的进行文件的操作管理</p><p>注意要在里面的工具-选项里面对自己本地电脑的密钥添加到里面去，只有才能使用ssh进行访问拉取上传</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode记录的一些题</title>
      <link href="/2020/10/12/leetcode%E8%AE%B0%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98/"/>
      <url>/2020/10/12/leetcode%E8%AE%B0%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>就是对LeetCode里面碰见的一些比较好的算法题目的一个记录，后面可以方便的回顾一下</p><h4 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h4><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><ol><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnpvdm/" target="_blank" rel="noopener">外观序列</a>：有一个正则表达式的神奇解法</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnr003/" target="_blank" rel="noopener">实现 strStr()</a>：kmp算法的题目</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnoilh/" target="_blank" rel="noopener">字符串转换整数（atoi）</a>：尽量不使用库函数，<strong>通过自动机</strong>这种思想做出来</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xne8id/" target="_blank" rel="noopener">验证回文串</a>：正则匹配的简单用法</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xn5z8r/" target="_blank" rel="noopener">字符串中的第一个唯一字符</a>：js的常用函数的建议解法</li><li></li></ol><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ol><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnhhkv/" target="_blank" rel="noopener">旋转图像</a>：转置加交换</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2jrse/" target="_blank" rel="noopener">两数之和</a></li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2ba4i/" target="_blank" rel="noopener">移动0</a>：巧妙地算法</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x21ib6/" target="_blank" rel="noopener">只出现一次的数字（有限定条件）</a>：位异或，巧妙地思想</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/x2zsx1/" target="_blank" rel="noopener">买卖股票的最佳时机</a>：有多种条件下的不同算法</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnumcr/" target="_blank" rel="noopener">合并两个有序数组</a>：此题数组的特殊结构，可从数组尾部处理数据，对两个数组元素进行大小判断</li></ol><h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><p>注意可以使用另一个相同的节点来存储头结点的位置，后面可进行返回。但是链表节点都是引用地址，不是实际数据地址，改变这个节点也会影响原来的链表节点</p><ol><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnarn7/" target="_blank" rel="noopener">删除链表中的节点</a>：这道题有些讲解不清，但对链表删除节点有了一个不太常规的思路</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnnbp2/" target="_blank" rel="noopener">合并两个有序链表</a>：递归的神奇解法</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnv1oc/" target="_blank" rel="noopener">回文链表</a>：快慢指针的巧妙方法得到链表的中间节点</li></ol><h5 id="树"><a href="#树" class="headerlink" title="树"></a>树</h5><ol><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnldjj/" target="_blank" rel="noopener">层序遍历树</a>：注意<strong>DFS</strong>和<strong>BFS</strong>在树中的常用模板</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xn7ihv/" target="_blank" rel="noopener">对称二叉树</a>：BFS的巧解</li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xn08xg/" target="_blank" rel="noopener">验证二叉搜索树</a>：DFS的递归传递参数，对于DFS的递归函数来说，如果需要的话，可以自己在函数里面传递两个参数，在左右子树递归时，各维持其中一个不变，可方便对左右子树的值进行检查，递归函数的写法也更简洁清晰</li></ol><h5 id="动规"><a href="#动规" class="headerlink" title="动规"></a>动规</h5><ol><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xn8fsh/" target="_blank" rel="noopener">只允许买卖一次的股票最高价</a></li><li><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnq4km/" target="_blank" rel="noopener">打家劫舍</a>：都是对那一个递归公式的寻找，对最优子结构和重复子问题的寻找和解决</li></ol><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>   1.<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xn1m0i/" target="_blank" rel="noopener">求二进制中位1的个数</a>：很多巧妙地解法，可以看下题解</p>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js各种知识</title>
      <link href="/2020/09/30/js%E5%90%84%E7%A7%8D%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/09/30/js%E5%90%84%E7%A7%8D%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>就是对一些js比较高级一点的知识的简单提及，现在可能会包括其他各种各样的前端碰见的问题和方法了</p><h2 id="各种杂乱知识点"><a href="#各种杂乱知识点" class="headerlink" title="各种杂乱知识点"></a>各种杂乱知识点</h2><h3 id="1-变量提升"><a href="#1-变量提升" class="headerlink" title="1.变量提升"></a>1.变量提升</h3><p><a href="https://blog.csdn.net/nokiaguy/article/details/106073431" target="_blank" rel="noopener">参考一道题</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非严格模式下，输出99，严格模式下就不会出现这种奇怪的错误</span></code></pre><p>var是函数作用域（包含它的函数的局部变量），let是块级作用域（类似一个大括号里面的作用域包括if，while，function等）。</p><p>使用var时，会自动将声明提升到函数的顶部，如果在全局里面声明的，就提升到全局的顶部，而且只是对声明进行提升，实际上的赋值还是在原来的地方，所以可以看见var的多次声明一个变量并赋值，其实只是声明了一次，后面都是赋值。但let就不会进行提升，所以不能重复声明同一变量，也不能在定义之前进行使用。</p><p>对于函数定义，还有<strong>函数声明提升</strong>，类似于var。但函数表达式就不可以了</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//函数声明</span>consolo<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> num<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//函数表达式，在之前调用会error，而且不是let的原因</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> num<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//除此之外，这两种方式等价</span></code></pre><h3 id="2-堆栈，深拷贝，浅拷贝"><a href="#2-堆栈，深拷贝，浅拷贝" class="headerlink" title="2.堆栈，深拷贝，浅拷贝"></a>2.堆栈，深拷贝，浅拷贝</h3><p><a href="https://biaochenxuying.cn/articleDetail?article_id=5d1b1e2cb9e26b1e10d2e5d5" target="_blank" rel="noopener">参考文章</a></p><p><strong>堆</strong>其实是一种特殊的树。只要满足这两点，它就是一个堆。</p><ul><li>堆是一个完全二叉树。 完全二叉树：除了最后一层，其他层的节点个数都是满的，最后一层的节点都靠左排列。</li><li>堆中每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。 也可以说：堆中每个节点的值都大于等于（或者小于等于）其左右子节点的值。这两种表述是等价的。</li></ul><p>对于数据存储：</p><ul><li><strong>基本类型</strong>是保存在栈内存中的简单数据段，它们的值都有固定的大小，保存在栈空间，通过按值访问，并由系统自动分配和自动释放。 这样带来的好处就是，内存可以及时得到回收，相对于堆来说，更加容易管理内存空间。 JavaScript 中的 <code>Boolean、Null、Undefined、Number、String、Symbol</code> 都是基本类型。</li><li><strong>引用类型</strong>（如对象、数组、函数等）是保存在堆内存中的对象，值大小不固定，栈内存中存放的该对象的访问地址指向堆内存中的对象，JavaScript 不允许直接访问堆内存中的位置，因此操作对象时，实际操作对象的引用。 JavaScript 中的 <code>Object、Array、Function、RegExp、Date</code> 是引用类型。为什么引用类型要存在堆里面，是为了加快运算的速度</li></ul><p>深拷贝：复制得到的访问地址指向<code>不同的内存空间，互不相干</code>。所以修改其中一个值，另外一个不会改变。</p><p>平时使用数组复制时，我们大多数会使用 <code>=</code>，这只是浅拷贝，存在很多问题，会相互影响</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或arr2 = Object.assign(arr)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 2, 3, 4, 5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 2, 3, 4, 5]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[6, 2, 3, 4, 5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[6, 2, 3, 4, 5]</span>arr2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[6, 2, 3, 4, 7]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[6, 2, 3, 4, 7]</span></code></pre><p><strong>深拷贝的的复制过程</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//先转换成字符类型，再转成object类型，成功在堆里面生成了一个新的对象数据，但是在这是一个function对象的时候就会发生错误</span><span class="token keyword">let</span> b <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><p>在原文章中还有一些对数组这些的一些方法（如slice，concat）的测试，实现深拷贝</p><h3 id="3-各种遇见的小技巧"><a href="#3-各种遇见的小技巧" class="headerlink" title="3.各种遇见的小技巧"></a>3.各种遇见的小技巧</h3><p>取得两个值的中间值，因为有可能两个值之间相加可能会超出表示范围，虽然一般使用了bigint之后，不太可能会这样，但还是注意一下</p><p>使用    left+Math.floor( (right-left)/2 )</p><p>随机数的生成    Math.floor( random* (m-n +1) + n) )    包含n，也包含m</p><p>或者封装成一个函数进行调用</p><pre class=" language-js"><code class="language-js">number <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> total_number_of_choices <span class="token operator">+</span> first_possible_value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 取随机数</span><span class="token keyword">function</span> <span class="token function">selectFrom</span><span class="token punctuation">(</span>lowerValue<span class="token punctuation">,</span> upperValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> choices <span class="token operator">=</span> upperValue <span class="token operator">-</span> lowerValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> choices <span class="token operator">+</span> lowerValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">selectFrom</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2~10 范围内的值，其中包含 2 和 10</span></code></pre><h4 id="koa-class写controller"><a href="#koa-class写controller" class="headerlink" title="koa class写controller"></a><a href="https://gitee.com/gfzl-open-source/vue-koa2#http://sinn.boyagirl.com/detail/58d9072cc1a5bd0001672cdc" target="_blank" rel="noopener">koa class写controller</a></h4><p>class+async/await的结合，可以使得我们更好的组织api的逻辑层，语义和结构都会更加清晰。这样做就不用写一个逻辑处理函数都exports一次。直接暴露一个class出去就可以了。async函数作为class的静态方法,所有我们可以直接className.[xxx]来访问这些控制器。</p><p>先上代码:</p><pre class=" language-js"><code class="language-js"># 逻辑层（来自server<span class="token operator">/</span>controllers<span class="token operator">/</span>article<span class="token punctuation">.</span>js）<span class="token keyword">const</span> Article <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/article.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ArticleController</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建文章</span>    <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">createArticle</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//发布文章</span>    <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">ifPublishArticle</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取所有文章</span>    <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getAllArticles</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取所以已发布的文章</span>    <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getAllPublishedArticles</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span>exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> ArticleController<span class="token punctuation">;</span># <span class="token function">接口层</span><span class="token punctuation">(</span>来自server<span class="token operator">/</span>routes<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//引入class这个类</span><span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controllers/article.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/articles/:id'</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span>getArticleById<span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/articles'</span><span class="token punctuation">,</span> checkToken<span class="token punctuation">,</span> A<span class="token punctuation">.</span>createArticle<span class="token punctuation">)</span>  </code></pre><h3 id="4-各种小知识点"><a href="#4-各种小知识点" class="headerlink" title="4.各种小知识点"></a>4.各种小知识点</h3><h4 id="1：CommonJS-规范总结与扩展"><a href="#1：CommonJS-规范总结与扩展" class="headerlink" title="1：CommonJS 规范总结与扩展"></a>1：<a href="https://github.com/sisterAn/blog/issues/4" target="_blank" rel="noopener">CommonJS 规范总结与扩展</a></h4><p>前后端 JS 分别搁置在 HTTP 的两端，它们扮演的角色不同，侧重点也不一样。 浏览器端的 JS 需要经历从一个服务器端分发到多个客户端执行，而服务器端 JS 则是相同的代码需要多次执行。前者的瓶颈在于宽带，后者的瓶颈则在于 CPU 等内存资源。前者需要通过网络加载代码，后者则需要从磁盘中加载， 两者的加载速度也不是在一个数量级上的。<br>纵观 Node 的模块引入过程，几乎全都是同步的，尽管与 Node 强调异步的行为有些相反，但它是合理的，但前端如果也用同步方式引入，试想一下，在 UI 加载的过程中需要花费很多时间来等待脚本加载完成，这会造成用户体验的很大问题。</p><p>CommonJS 为后端 JS 制定的；     AMD（异步模块定义），ES6模块化（<code>export</code>和<code>import</code>）是 JS 前端的规范。</p><p><code>CommonJS</code>和ES6中模块化的两者区别</p><ul><li>前者支持动态导入，也就是 <code>require(${path}/xx.js)</code>，后者目前不支持，但是已有提案</li><li>前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响</li><li>前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化</li><li>后者会编译成 <code>require/exports</code> 来执行的</li></ul><h4 id="2：ES6的class使用"><a href="#2：ES6的class使用" class="headerlink" title="2：ES6的class使用"></a>2：<a href="https://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">ES6的class使用</a></h4><p>主要是在class定义的constructor中，在这里面定义的在this上面的变量才是实例变量，在constructor外面定义的变量和函数都是类本身的（也可称是在原型中）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义类</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//实例变量</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>point<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (2, 3)</span>point<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>point<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>point<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>point<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h4 id="3：js单线程和异步"><a href="#3：js单线程和异步" class="headerlink" title="3：js单线程和异步"></a>3：<a href="https://www.cnblogs.com/zhengyufeng/p/10895895.html" target="_blank" rel="noopener">js单线程和异步</a></h4><p><a href="https://www.bilibili.com/video/BV1K4411D7Jb?t=664" target="_blank" rel="noopener">B站视频</a></p><p><img src="https://img2018.cnblogs.com/blog/1681656/201905/1681656-20190521094010441-614833594.png" alt="img"></p><p>​    WebAPIs：浏览器为异步任务单独开辟的线程（服务JavaScript的，处理JavaScript的异步）</p><p>​    虚线那一块（看图）：堆（heap）和栈（stack）共同组成了js主线程（这个就是我们JavaScript的线程）</p><p>​    callback queue（最下面的那个长方形）：任务队列，里面放着各种事件，比如我们点击所触发的事件，浏览器会帮我们以任务的形式，把他放入任务队列中</p><p>​    event loop（那个转圈圈）：任务循环，又叫事件循环。</p><p><strong>流程：</strong></p><p>  当我们的程序运行时，执行我们JavaScript的主线程，堆（heap）和栈（stack）共同组成了JavaScript的主线程，函数的执行就是通过进栈和出栈实现的。比如图中有一个foo()函数，主线程把它推入栈中，在执行函数体时，发现还需要执行上面的那几个函数，所以又把这几个函数推入栈中，等到函数执行完，就让函数出栈。当栈中的函数需要异步的时候，主线程会把需要异步的部分推给WebAPIs（浏览器开辟的线程），由WebAPIs去执行。</p><p>  当所有函数都执行完毕后，所有的函数就都被推出了栈。这个时候，程序就会通过event loop（事件循环）去callback queue（任务队列）中寻找下一个任务推入栈中。而WebAPIs（浏览器开辟的线程）执行完主程序推给他的异步之后，将处理后的结果以事件的形式丢到callback queue（任务队列）中，这个事件就是我们写代码的时候的回调函数。而这个时候任务队列里的任务正在往栈（stack）中推，所以异步之后的事件也会被推到栈（stack）中执行，但这个时候他已经不在是异步的了而是同步的，JavaScript的主线程是可以执行的。由此无论是同步还是异步，所有的函数全部执行完毕。</p><p><strong>（event loop（事件循环）总是会循环的查找任务队列里是否还有任务，有就往栈（stack）中推）</strong></p><img src="https://img2018.cnblogs.com/blog/1681656/201906/1681656-20190602140133041-896205690.png" alt="img" style="zoom: 50%;" /><p><a href="https://github.com/biaochenxuying/blog/issues/64" target="_blank" rel="noopener">promise async await过程</a></p><p><a href="https://github.com/sisterAn/blog/issues/21" target="_blank" rel="noopener">浏览器的Tasks、microtasks、 queues 和 schedules</a></p><p><strong>任务队列 分为<a href="https://www.jianshu.com/p/bfc3e319a96b" target="_blank" rel="noopener">宏任务和微任务</a>：</strong></p><p>宏任务队列：<code>setTimeout，setInterval ，setImmediate，I/O ，UI rendering （浏览器渲染）</code><br>微任务队列：<code>process.nextTick（下一个事件轮询的时间点上执行），Promise callback，Object.observer， MutationObserver（监视 DOM 变动的接口）</code></p><p><strong>关键：</strong></p><ol><li>当前在调用栈 (call stack) 内的所有函数会被执行。当它们返回值的时候，会被从栈内弹出。</li><li>当调用栈是空的时，所有排队的微任务会一个接一个从微任务任务队列中弹出进入调用栈中，然后在调用栈中被执行！(微任务自己也能返回一个新的微任务，有效地创建无限的微任务循环 )</li><li>如果调用栈和微任务队列都是空的，事件循环会检查宏任务队列里是否还有任务。如果宏任务中还有任务，会从宏任务队列中弹出进入调用栈，被执行后会从调用栈中弹出！</li></ol><p>一般微任务是先于宏任务执行的</p><h4 id="4：js对象方法"><a href="#4：js对象方法" class="headerlink" title="4：js对象方法"></a>4：<a href="https://www.w3school.com.cn/js/js_object_methods.asp" target="_blank" rel="noopener">js对象方法</a></h4><p>类似于这样的一个对象里面有一个属性为一个function</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> group <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">"Our Group"</span><span class="token punctuation">,</span>    students<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Pete"</span><span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//对象方法 </span>    show<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is a object function'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//主要是说这个，这个es6对其的简化，让其不在使用function关键字这些，例如vue里面的data(){ return {}}就使用了简化写法</span>    <span class="token function">showList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>          student <span class="token operator">=</span><span class="token operator">></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> student<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="5：formdata文件上传"><a href="#5：formdata文件上传" class="headerlink" title="5：formdata文件上传"></a>5：<a href="https://blog.csdn.net/liuyalu_/article/details/105836451" target="_blank" rel="noopener">formdata文件上传</a></h4><p>其实也是一个像key：value的类型</p><p>一般使用axios的post进行文件上传，这里使用vant组件库的文件上传作为例子，因为vant没有对文件上传进行封装，可以更清晰的了解一下上传的全过程</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这里是vue里面的一个使用formdata传文件的方法</span><span class="token keyword">async</span> <span class="token function">afterRead</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//这里的file.file就是实际上传的文件内容（或许是二进制形式？）</span>      formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>      formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"cheng"</span><span class="token punctuation">,</span> <span class="token string">"chengsong123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">"url/uploadimg"</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 这里要更改一下请求头</span>        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> formdata      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>这里面的formdata有两个字段，一个是file，一个是cheng。第一个是一个上传的图片文件，第二个是一个字符串</p><p>这两个在node后端里面所处的位置也不一样，前面的file是直接在req里面，使用req.file就可以拿到，而后面的字符串就在req.body里面了，需要使用req.body.cheng才能拿到，注意这里的req.body是使用了body-parser中间件的</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201213115607145.png" alt="image-20201213115607145" style="zoom: 80%;" /><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201213120630601.png" alt="image-20201213120630601" style="zoom:80%;" /><p>至于跟在url后面的query参数，想下面的id这种</p><pre><code>http://localhost:3000/users/send?test=test&amp;id=21</code></pre><p>可以直接在req.query里面拿到全部的query参数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这是nodejs后端的一个接口代码</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/send"</span><span class="token punctuation">,</span>upload<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>cheng <span class="token operator">===</span> undefined <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>cheng <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">"文件不能为空"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'req:'</span><span class="token punctuation">,</span>req<span class="token punctuation">)</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>cheng        <span class="token keyword">let</span> file <span class="token operator">=</span> req<span class="token punctuation">.</span>file<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span>data<span class="token punctuation">,</span>file<span class="token punctuation">:</span>file<span class="token punctuation">,</span>id<span class="token punctuation">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>发送的数据为：</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201213120504718.png" alt="image-20201213120504718" style="zoom:80%;" /><p>返回的数据为</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"song123"</span><span class="token punctuation">,</span>    <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"fieldname"</span><span class="token operator">:</span> <span class="token string">"file"</span><span class="token punctuation">,</span>        <span class="token property">"originalname"</span><span class="token operator">:</span> <span class="token string">"rcd.db"</span><span class="token punctuation">,</span>        <span class="token property">"encoding"</span><span class="token operator">:</span> <span class="token string">"7bit"</span><span class="token punctuation">,</span>        <span class="token property">"mimetype"</span><span class="token operator">:</span> <span class="token string">"application/octet-stream"</span><span class="token punctuation">,</span>        <span class="token property">"destination"</span><span class="token operator">:</span> <span class="token string">"./public/uploads/"</span><span class="token punctuation">,</span>        <span class="token property">"filename"</span><span class="token operator">:</span> <span class="token string">"ebe916462f40761bac5531a62815ab0a"</span><span class="token punctuation">,</span>        <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"public\\uploads\\ebe916462f40761bac5531a62815ab0a"</span><span class="token punctuation">,</span>        <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">3805</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"ts"</span><span class="token operator">:</span> <span class="token string">"ds"</span><span class="token punctuation">,</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"21"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6：浏览器console-log"><a href="#6：浏览器console-log" class="headerlink" title="6：浏览器console.log"></a>6：<a href="https://blog.csdn.net/Ideality_hunter/article/details/71633995?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control" target="_blank" rel="noopener">浏览器console.log</a></h4><p>谷歌的浏览器内核在设计的时候为了对性能进行调优，防止因为过多的console.log影响到原来的程序的性能，所以console.log其实是异步的，只是在展开的时候对快照进行实时计算得到的，骑在右边会有一个小感叹号的图标进行提示（在nodejs里面console.log是同步的）</p><h4 id="7：css的-important"><a href="#7：css的-important" class="headerlink" title="7：css的 !important"></a>7：<a href="https://www.cnblogs.com/planetwithpig/p/11804355.html" target="_blank" rel="noopener">css的 !important</a></h4><p>简单的说，这就是一个增加样式权重的，这里的权重表示的是在多个地方对同一个元素样式进行改变之后，最终会呈现出什么样式</p><p><strong>注意</strong>：这里的 <strong>!important</strong> 不是 <strong>z-index</strong> ，一个是样式优先级，一个是堆叠优先级</p><h4 id="8：css自定义属性"><a href="#8：css自定义属性" class="headerlink" title="8：css自定义属性"></a>8：<a href="https://www.cnblogs.com/cangqinglang/p/11384703.html" target="_blank" rel="noopener">css自定义属性</a></h4><p><code>--*</code>来声明变量名，<code>var(--*)</code>来使用</p><pre class=" language-css"><code class="language-css">--a<span class="token property">margin</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--a<span class="token punctuation">)</span></code></pre><h4 id="9：vue动态绑定样式的bug"><a href="#9：vue动态绑定样式的bug" class="headerlink" title="9：vue动态绑定样式的bug"></a>9：<a href="https://www.bilibili.com/video/av926272235" target="_blank" rel="noopener">vue动态绑定样式的bug</a></h4><p>因为vue对动态绑定样式的一些数据侦听延迟，会造成样式的判断条件改变了，但样式并没有同步更新，需要更新一下界面。所以为了解决这个问题，就需要我们自己来使用 <strong>vue.set</strong> 来自己强制将数据侦听，或者说将数据改变之后，使用 <strong>Object.assign</strong> 重新给这个数据赋值给自己，也可以解决这个问题</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a href="https://www.jianshu.com/p/71b1807b1815" target="_blank" rel="noopener">参考vue.set使用</a></p><h4 id="10：vue项目eslint和本地冲突"><a href="#10：vue项目eslint和本地冲突" class="headerlink" title="10：vue项目eslint和本地冲突"></a><a href="https://www.cnblogs.com/webhmy/p/12060651.html" target="_blank" rel="noopener">10：vue项目eslint和本地冲突</a></h4><p>就是当你创建了一个项目之后，或者下载了一个别人的项目之后，发现别人的eslint格式与你的有一些区别，有时候会报错</p><p>一般是因为Vetur是使用prettier进行格式化，因为自己vscode的prettier插件的配置不同，就会导致不同的结果</p><p>这个时候一般可以直接在项目根目录下面创建 <strong>.prettierrc.json</strong> 文件，写你的项目局部使用格式</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"singleQuote"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>     // 是否对string使用单引号    <span class="token property">"semi"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> // 是否每行末尾都添加分号    <span class="token property">"trailingComma"</span><span class="token operator">:</span><span class="token string">"none"</span> // 对象末尾属性是否添加逗号<span class="token punctuation">}</span></code></pre><p>还有一个 <strong>.eslintrc.js</strong> 里面存储一些局部eslint的使用格式，也可以在这里进行修改，使之不与本地发送冲突</p><h4 id="11：setTimeout-func-4-7"><a href="#11：setTimeout-func-4-7" class="headerlink" title="11：setTimeout(func,4.7)"></a>11：setTimeout(func,4.7)</h4><p>这一段代码</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>其实并不会一直的以0毫秒的时间进行执行，js会自动给其加一个间隔时间，这个时间大概是4.7秒</p><h4 id="12：js事件循环原理"><a href="#12：js事件循环原理" class="headerlink" title="12：js事件循环原理"></a><a href="https://www.bilibili.com/video/BV1K4411D7Jb?t=664" target="_blank" rel="noopener">12：js事件循环原理</a></h4><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20210315182440827.png" alt="image-20210315182440827" style="zoom: 50%;" /><p>这张图左边是js脚本的运行，中间的一个环是事件环，右边的是渲染任务。而渲染任务是需要在事件执行之后才能进行执行</p><p>记住一个函数 <a href="https://www.jianshu.com/p/fa5512dfb4f5" target="_blank" rel="noopener"><strong>requestAnimationFrame</strong></a> 会让动画更加的流畅</p><h4 id="13：vue-router的特殊用法"><a href="#13：vue-router的特殊用法" class="headerlink" title="13：vue-router的特殊用法"></a>13：vue-router的特殊用法</h4><p>一般的嵌套路由是这样的</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/components"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"Components"</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/NavView/Components.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">"/components/button"</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">"button"</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"Button"</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/Button.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">"icon"</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"Icon"</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/views/Icon.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 后面的页面路由</span><span class="token operator">/</span>components<span class="token operator">/</span>button<span class="token comment" spellcheck="true">// 其&lt;router-view />是在Components.vue文件里面</span></code></pre><p>现在看见了一种新的方式</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// redirect: "/welcome",</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/welcome"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Welcome <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/less"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Less <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/variable"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Variable <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/mixins"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Mixins <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/nestedRules"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> NestedRules <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/operations"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> operations <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/namespace"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Namespace <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/important"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Important <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 后面的页面路由</span><span class="token operator">/</span>less<span class="token comment" spellcheck="true">// 其&lt;router-view />是在Home.vue文件里面</span></code></pre><p>直接就通过 <strong>/</strong> 变为绝对地址，就不需要加上前面的那个 /home 的前缀了</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><h3 id="js高级程序设计（第四版）"><a href="#js高级程序设计（第四版）" class="headerlink" title="js高级程序设计（第四版）"></a>js高级程序设计（第四版）</h3><p>p236    实例只有指向原型的指针，没有指向构造函数的指针</p><p>p237    原型的问题还是源自其自身的共享特性，当原型上面存在引用类型（如数组）的时候，这个引用类型是共享的。当一个实例修改了这个数组，其他实例也能得到这个数组，一般而言，每个实例应该有自身的属性副本。</p><p>可使用<code>盗用构造函数（在子类构造函数中使用call()或apply()调用父类构造函数）</code>和<strong>组合继承(主流)</strong>（结合原型链和盗用构造函数，两者都使用）解决</p><p>p240    默认情况下，所有引用类型都继承自Object</p><p>p284    代理进行对赋值操作的属性检验</p><p>p289    因为函数名是指向函数的指针，所以一个函数可以有多个名称</p><p>p300    function定义的函数里面的this引用的是这个函数被调用时所处的作用域，而箭头函数就只是被<strong>定义</strong>时的上下文</p><p>p352    await关键字只能直接出现在异步函数的定义中</p><p>p467    css属性名使用连字符表示法，所以就算使用的时候必须将其转为驼峰命名</p><h3 id="你所不知道的js–上"><a href="#你所不知道的js–上" class="headerlink" title="你所不知道的js–上"></a>你所不知道的js–上</h3><p>感觉这一个系列的三本书有些久远了，都是15年的了，有一些跟不上现在的发展，所以简单看下就好，不必深究</p><p><strong>解析/语法分析（Parsing）</strong> </p><p>这个过程是将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法 结构的树。这个树被称为“抽象语法树”（Abstract Syntax Tree，AST）。</p><p>eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书 写时就存在于程序中这个位置的代码。换句话说，可以在你写的代码中用程序生成代码并运行，就好像代码是写在那个位置的一样</p><p>要避免书写eval和with这两个语法，因为会影响js引擎的编译性能</p><p>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复 用（事实上在嵌套的作用域中也可以使用）。</p><p><strong>闭包</strong></p><p>本质上无论何时何地，如果将函数（访问它们各自的词法作用域）当作第一级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步（或者同步）任务中，只要使 用了回调函数，实际上就是在使用闭包！</p><p>理解闭包的关键在于：外部函数调用之后其变量对象本应该被销毁，但闭包的存在使我们仍然可以访问外部函数的变量对象，这就是闭包的重要概念</p><p>闭包有3个特性：</p><p>①函数嵌套函数</p><p>②函数内部可以引用函数外部的参数和变量</p><p>③参数和变量不会被垃圾回收机制回收 </p><p>P48 在循环里面的settimeout函数里面定义的函数的作用域解释</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//其实直接用let就行，但需要明白后面的原理</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> i<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果是：会以每秒一次的频率输出五次 6。这就是作用域的使用不当，js是单线程的，所以在执行for循环的时候定时器setTimeout被安排到任务队列中排队等待执行，而在等待过程中for循环就已经在执行，等到setTimeout可以执行的时候，for循环已经结束，i的值也已经编程5</span><span class="token comment" spellcheck="true">//改进</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> j <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> j<span class="token operator">*</span><span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>for 循环头部的 let 声明还会有一 个特殊的行为。这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随 后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p><p>简单来说闭包实则是词法作用域的产物；一个函数只要是在内部函数访问到外部函数的作用域我们则可以称之为<code>闭包</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这也是一个闭包</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'out var'</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于闭包，更常见的方式应该是<strong>模块模式</strong>，模块里面运行定义私有的实现（函数，变量 ），同时也可以暴露一些方法作为公开的API</p><p><a href="https://baijiahao.baidu.com/s?id=1625874168103299234&wfr=spider&for=pc" target="_blank" rel="noopener">参考</a></p><p><a href="https://zh.javascript.info/closure" target="_blank" rel="noopener">参考2</a></p><hr><p><strong>this和原型</strong></p><p>this 是在运行时进行绑定的，并不是在编写时绑定，它的上下文取决于函数调 用时的各种条件。this 的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式</p><p>函数的调用栈，绑定规则</p><p>就可以顺序应用下面这四条规则来判断 this 的绑定对象。 </p><ol><li><p>由 new 调用？绑定到新创建的对象。 </p></li><li><p>由 call 或者 apply（或者 bind）调用？绑定到指定的对象。 </p></li><li><p>由上下文对象调用？绑定到那个上下文对象。 </p></li><li><p>默认：在严格模式下绑定到 undefined，否则绑定到全局对象</p></li></ol><p>P115 [[PUT]] 和 [[GET]]是对对象的描述表示，而setter和getter是对对象单个属性值的表示</p><p>setter 会覆盖单个属性默认的 [[Put]]（也被称为赋值）操作</p><p>in 操作符可以检查容器内是否有某个值，但是它实际上检查的是某 个属性名是否存在。对于数组来说这个区别非常重要，<br><code>4 in [2, 4, 6]</code>的结 果并不是你期待的 True，因为 [2, 4, 6] 这个数组中包含的属性名是 0、1、 2，没有 4。</p><p>Object.keys(..) 会返回一个数组，包含所有可枚举属性，Object.getOwnPropertyNames(..) 会返回一个数组，包含所有属性，无论它们是否可枚举。 </p><p>in 和 hasOwnProperty(..) 的区别在于是否查找 [[Prototype]] 链(in会查找原型链)，然而，Object.keys(..) 和 Object.getOwnPropertyNames(..) 都只会找对象直接包含的属性</p><h3 id="你所不知道的js–中"><a href="#你所不知道的js–中" class="headerlink" title="你所不知道的js–中"></a>你所不知道的js–中</h3><p><strong>类型与语法</strong></p><p>JavaScript 中的变量是没有类型的，只有值才有。变量可以随时持有任何类型的值</p><p>变量在未持有值的时候为 undefined。此时 typeof 返回 “undefined”：</p><p>数组通过数字进行索引，但有趣的是它们也是对象，所以也可以包含字符串键值和属性（但这些并不计算在数组长度内）</p><pre class=" language-js"><code class="language-js">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>a<span class="token punctuation">[</span><span class="token string">'bc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>a<span class="token punctuation">.</span>lenght <span class="token comment" spellcheck="true">// 1</span>a<span class="token punctuation">.</span>bc <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">//注意这个点的强制转换</span>a<span class="token punctuation">[</span><span class="token string">'23'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span>a<span class="token punctuation">.</span>length <span class="token comment" spellcheck="true">// 24</span></code></pre><p>• undefined 指从未赋值</p><p>• null 指曾赋过值，但是目前没有值</p><p>null 是一个特殊关键字，不是标识符，我们不能将其当作变量来使用和赋值。然而</p><p>undefined 却是一个标识符，可以被当作变量来使用和赋值。</p><p>由于 NaN 和自身不相等，所以必须使用 ES6 中的 Number.isNaN(..)</p><p>ES6 中新加入了一个工具方法 Object.is(..) 来判断两个值是否绝对相等，主要用于特殊的判断，如NAN和+0，-0，Infinity，-Infinity</p><p>以下这些是假值：</p><p>• undefined</p><p>• null</p><p>• false</p><p>• +0、-0 和 NaN</p><p>• “”</p><p>假值的布尔强制类型转换结果为 false。</p><p>从逻辑上说，假值列表以外的都应该是真值（truthy）。但 JavaScript 规范对此并没有明确定义，只是给出了一些示例，例如规定所有的对象都是真值，<strong>我们可以理解为假值列表以外的值都是真值</strong>。</p><p>例如：[],    {},    function(){}都是真值</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20201107165428413.png" alt="image-20201107165428413" style="zoom: 80%;" /><p>我们要对 == 两边的值认真推敲，以下两个原则可以让我们有效地避免出错。</p><p>• 如果两边的值中有 true 或者 false，千万不要使用 ==。</p><p>• 如果两边的值中有 []、”” 或者 0，尽量不要使用 ==。这时最好用 === 来避免不经意的强制类型转换。这两个原则可以让我们避开几乎所有强制类型转换的坑。</p><p>所以 == 和 === 选择哪一个取决于是否允许在相等比较中发生强制类型转换</p><p>语句都有一个结果值（statement completion value，undefined 也算），获得结果值最直接的方法是在浏览器开发控制台中输入语句，默认情况下控制台会显示<strong>所执行的最后一条语句的结果值</strong>。</p><p>如果在控制台中输入 var a = 42 会得到结果值 undefined，而非 42</p><p>换句话说，代码块的结果值就如同一个隐式的返回，即返回最后一个语句的结果值</p><p>delete 用来删除对象中的属性和数组中的单元</p><p><strong>JavaScript 中的 &amp;&amp; 和 || 运算符返回它们其中一个操作数的值，而非true 或 false</strong></p><ul><li><p>42 || ’b‘;     // 42</p></li><li><p>​    true || false &amp;&amp; false; // true</p></li><li><p>​    (true || false) &amp;&amp; false; // false</p></li><li><p>​    true || (false &amp;&amp; false); // true</p></li></ul><p>这说明 &amp;&amp; 运算符先于 || 执行，而且执行顺序并非我们所设想的从左到右。原因就在于运算符优先级</p><p>暂时性死区：指的是由于代码中的变量还没有初始化而不能被引用的情况，对此，最直观的例子是 ES6 规范中的 let 块作用域，另一个 TDZ 违规的例子是 ES6 中的参数默认值</p><p>{<br> a = 2; // ReferenceError!<br> let a;<br>}</p><p>异步函数的<strong>回调地狱</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//假设所有的函数都是异步回调函数，最后的运行顺序会是ABCDEF</span><span class="token function">doA</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">doC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doD</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">doF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">)</span>  <span class="token function">doE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过回调表达程序异步和管理并发的两个主要缺陷：缺乏顺序性和可信任性(控制反转)。</p><p><strong>PROMISE</strong></p><p>虽然之前也写过一些关于promise的文字，但现在还是为了加深记忆，再写一些吧</p><p><a href="https://segmentfault.com/a/1190000017312249" target="_blank" rel="noopener">一篇比较好的文章</a></p><p>注意异步<strong>任务队列</strong>这个东西，会决定异步代码和同步代码的运行顺序</p><p><strong>链式流</strong></p><p>如果向 Promise.resolve(..) 传递一个非 Promise、非 thenable 的立即值，就会得到一个用这个值填充的 promise</p><p>而如果向 Promise.resolve(..) 传递一个真正的 Promise，就只会返回同一个 promise.对传入的 thenable 则会展开。如果这个 thenable 展开得到一个拒绝状态，那么从 Promise.resolve(..) 返回的 Promise 实际上就是这同一个拒绝状态</p><p>reject(..) 不会像 resolve(..) 一 样 进 行 展 开。 如 果 向reject(..) 传入一个 Promise/thenable 值，它会把这个值原封不动地设置为</p><p>拒绝理由。后续的拒绝处理函数接收到的是你实际传给 reject(..) 的那个Promise/thenable，而不是其底层的立即值</p><p>Promise 链的一个最佳实践就是最后总以一个 catch(..) 结束</p><p>catch也会返回一个promise实例，并且是resolved状态。<code>throw new Error()</code>抛出错误变为rejected状态</p><pre><code>var p = Promise.resolve( 21 ); p.then( function(v){ console.log( v ); // 21 // 创建一个promise并将其返回return new Promise( function(resolve,reject){ // 用值42填充    resolve( v  * 2 );         } );     } )     .then( function(v){         console.log( v ); // 42 } ); </code></pre><p>虽然我们把 42 封装到了返回的 promise 中，但它仍然会被展开并最终成为链接的 promise的决议，因此第二个 then(..) 得到的仍然是 42。如果我们向封装的 promise 引入异步，一切都仍然会同样工作</p><p><strong>Promise.all([promise1,promise2… ])</strong></p><p>同时执行两个或更多步骤（也就是“并行执行”）。它们的完成顺序并不重要，但是必须都要完成，才能继续进行其他步骤</p><p>Promise.all([ .. ]) 需要一个参数，是一个数组，通常由 Promise 实例组成，当然就算不是promise也行，因为其实里面的都会被resolve一次，确保得到一有个真正的promise。如果数组是空的，主 Promise 就会立即完成。</p><p>从 Promise.all([ .. ]) 调用返回的 promise 会收到一个完成消息。这是一个由所有传入 promise 的完成消息组成的<strong>数组，与指定的顺序一致（与完成顺序无关）</strong></p><p>Promise.all([ .. ]) 返回的主 promise 在且仅在所有的成员 promise 都完成后才会完成。如果这些 promise 中有任何一个被拒绝的话，主 Promise.all([ .. ])promise 就会立即被拒绝，并丢弃来自其他所有 promise 的全部结果。</p><p><strong>Promise.race([promise1,promise2…])</strong></p><p>与 Promise.all([ .. ]) 类似，一旦有任何一个 Promise 决议为完成，Promise.race([ .. ])就会完成；一旦有任何一个 Promise 决议为拒绝，它就会拒绝。但不能传递空数组，不然会被一直挂住，不会返回</p><p><strong>web worker</strong></p><p>在js中运行一个类似多线程的程序</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1/mycoolworker.js"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意是一个js文件，Worker 之间以及它们和主程序之间，不会共享任何作用域或资源，不会发生抢占，锁这些多线程的东西</p><p>Worker w1 对象是一个事件侦听者和触发者，可以通过订阅它来获得这个 Worker 发出的事件以及发送事件给这个 Worker</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//主线程侦听事件</span>w1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// evt.data </span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送 "message" 事件给这个 Worker：</span>w1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span> <span class="token string">"something cool to say"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在这个 Worker 内部，收发消息是完全对称的：</span><span class="token comment" spellcheck="true">// "mycoolworker.js" </span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// evt.data </span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">postMessage</span><span class="token punctuation">(</span> <span class="token string">"a really cool reply"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>要在创建 Worker 的程序中终止 Worker，可以调用 Worker 对象（就像前面代码中的 w1）上的 terminate()。突然终止 Worker 线程不会给它任何机会完成它的工作或者清理任何资源。这就类似于通过关闭浏览器标签页来关闭页面</p><p>Web Worker 通常应用于哪些方面呢？</p><ul><li>处理密集型数学计算</li><li>大数据集排序</li><li>数据处理（压缩、音频分析、图像处理等）</li><li>高流量网络通信</li></ul><p>具体的实现和操作，到时候看文档吧</p><h3 id="你所不知道的js–下"><a href="#你所不知道的js–下" class="headerlink" title="你所不知道的js–下"></a>你所不知道的js–下</h3><p>这本书感觉更像是上面两本书的一个简单总结，不打算对这本书进行记录</p>]]></content>
      
      
      
        <tags>
            
            <tag> js other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2020/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
      <url>/2020/09/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>虽然之前上了一些关于数据结构、算法之类的课，但之前都没有怎么搞懂，尤其是算法里面的一些算法思想，现在看能不能补上，就是一些大佬的算法指导，刷LeetCode的一些题，回看之前的书上面的重点。</p><p>教材是清华大学出版社的数据结构(C语言版)、计算机算法分析与设计(第四版)</p><h4 id="1-算法复杂度分析"><a href="#1-算法复杂度分析" class="headerlink" title="1.算法复杂度分析"></a>1.算法复杂度分析</h4><h5 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1.时间复杂度"></a>1.时间复杂度</h5><p><strong>大 O 时间复杂度表示法</strong>( T(n) =O(f(n)) ） 实际上并不具体表示代码真正的执行时间，而是表示 <strong>代码执行时间随数据规模增长的变化趋势</strong>，所以也叫 <strong>渐进时间复杂度</strong>，简称 <strong>时间复杂度</strong></p><p>由于 <strong>时间复杂度</strong> 描述的是算法执行时间与数据规模的 <strong>增长变化趋势</strong>，所以 <strong>常量、低阶、系数</strong> 实际上对这种增长趋势不产生决定性影响，所以在做时间复杂度分析时 <strong>忽略</strong> 这些项</p><p>例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cal</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> sum_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>     j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>       sum_3 <span class="token operator">=</span> sum_3 <span class="token operator">+</span>  i <span class="token operator">*</span> j<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上代码也是求和，两层 for 循环 ，求 sum_3 的数据规模为 m 和 n，所以时间复杂度为 O(m*n)。</p><p>时间复杂度可以分为：</p><ul><li><strong>最好情况时间复杂度</strong>（best case time complexity）：在最理想的情况下，执行这段代码的时间复杂度。</li><li><strong>最坏情况时间复杂度</strong>（worst case time complexity）：在最糟糕的情况下，执行这段代码的时间复杂度。</li><li><strong>平均情况时间复杂度</strong>（average case time complexity），用代码在所有情况下执行的次数的加权平均值表示。也叫 <strong>加权平均时间复杂度</strong> 或者 <strong>期望时间复杂度</strong>。</li><li><strong>均摊时间复杂度</strong>（amortized time complexity）: 在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度</li></ul><p>一般我们最关心的还是<strong>最坏情况</strong>下的时间复杂度或<strong>平均</strong>复杂度</p><p><strong>O(1) &lt; O(logn) &lt; (n) &lt; O(nlogn) &lt; O(n2) &lt; O(n3) &lt; O(2n) &lt; O(n!) &lt; O(nn)</strong></p><h5 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2.空间复杂度"></a>2.空间复杂度</h5><p>类比一下，空间复杂度全称就是 <strong>渐进空间复杂度</strong>（asymptotic space complexity），表示 <strong>算法的存储空间与数据规模之间的增长关系</strong></p><p>例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">const</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第 2 行</span> newArr<span class="token punctuation">.</span>length <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第 3 行</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 newArr ，是个空数组。第 3 行把 newArr 的长度修改为 n 的长度的数组，每项的值为 undefined ，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p><hr><h4 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2.数据结构"></a>2.数据结构</h4><h5 id="1-KPM算法和next数组求值"><a href="#1-KPM算法和next数组求值" class="headerlink" title="1.KPM算法和next数组求值"></a>1.KPM算法和next数组求值</h5><p>这是一个进行字符串匹配的算法，原理是求一个字符串的某一个字符的前面的字符串最大相等的前缀和后缀</p><p>kmp算法为</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span>string t<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//s为主串，t为模式串</span>    i <span class="token operator">=</span> pos<span class="token punctuation">;</span>    j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这两个0的位置存储的是string的长度</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//j=0表示主串第i个字符和模式串第1个字符不匹配，需从第i+1个字符从新匹配</span>        <span class="token keyword">else</span>    j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token operator">-</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配成功</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>求next数组的算法是仿照kmp的算法来的，<strong>i</strong>不进行后退，只有模式串滑动。<strong>因为求next也就是主串和模式串都是自己</strong>，可进行模仿kmp</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">get_next</span><span class="token punctuation">(</span>string t<span class="token punctuation">,</span><span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">}</span>        <span class="token keyword">else</span>    j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>核心就是next[i]=j，先进行++是因为前面相等，则后面一个字符的next就是在if里相等的最后一个字符<strong>j</strong>的后面一个字符。符合前缀等于后缀的原则。</p><p>改进后的next算法</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">get_nextval</span><span class="token punctuation">(</span>string t<span class="token punctuation">,</span><span class="token keyword">int</span> nextval<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> nextval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">||</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">else</span>    nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> j <span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-树"><a href="#2-树" class="headerlink" title="2.树"></a>2.树</h5><p>一般研究<strong>二叉树</strong></p><p>1.第i层至多有2^(i-1)个节点</p><p>2.深度为k的二叉树至多有2^k-1个节点</p><p>3.任何一颗二叉树t，若其叶子节点数为N0，度为2的节点数为N2，则N0=N2+1</p><p>​    对于完全二叉树，就是对每一个节点，若有右孩子，则必有左孩子，且右分支的子孙的最大层次为l，则其左分支下的子孙的最大层次必为l或l+1.就是节点从左到右排顺序，这个顺序不能断。</p><p>4.有n个节点的完全二叉树的深度为<strong>log2 n向下取整+1</strong></p><p>5.对任意节点i，若2i&gt;n，则节点i无左孩子；如果有左孩子，其左孩子必是节点2i</p><p>6.若2i+1&gt;n，则节点i无右孩子；如果有右孩子，其右孩子必是节点2i+1</p><p>7.i=1，则为根节点，若i&gt;1，则双亲节点为i/2向下取余</p><p>二叉树可使用二叉链表进行存储，例如<code>lchild | data | rchild</code>。</p><p><strong>遍历</strong></p><p>先序，中序，后序。为根节点在查序中的位置</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//先序的递归算法</span>Status <span class="token function">preorderTraverse</span><span class="token punctuation">(</span>Bitree t<span class="token punctuation">,</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token operator">*</span> visit<span class="token punctuation">)</span><span class="token punctuation">(</span>TElemType e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    status <span class="token function">printelement</span><span class="token punctuation">(</span>telemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印输出节点,    调用实例preorderTraverse(t,printelement);</span>        <span class="token keyword">return</span> ok<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">visit</span><span class="token punctuation">(</span>t<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preorderTraverse</span><span class="token punctuation">(</span>t<span class="token operator">-></span>lchild<span class="token punctuation">,</span>visit<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preorderTraverse</span><span class="token punctuation">(</span>t<span class="token operator">-></span>rchild<span class="token punctuation">,</span>visit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ok<span class="token punctuation">;</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> ok<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//二叉树数据结构 js语法</span>function <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      this<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>      this<span class="token punctuation">.</span>left <span class="token operator">=</span> this<span class="token punctuation">.</span>right <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span>function <span class="token function">DFStraval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traval</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traval</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>function <span class="token function">BFStraval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        let len  <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>            let node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>left<span class="token operator">&amp;&amp;</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>right<span class="token operator">&amp;&amp;</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            len<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-图"><a href="#3-图" class="headerlink" title="3.图"></a>3.图</h5><p><a href="https://blog.csdn.net/czsupercar/article/details/88735143" target="_blank" rel="noopener">图的邻接表存储</a></p><p><strong>图的遍历</strong></p><p>深度优先，广度优先</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//深度优先遍历</span>Boolean visited<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//访问标志数组，初始值为false，当此节点被访问了，对应的visited[i]变为true</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token operator">*</span>Visitedfunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//函数变量</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token operator">*</span>visit<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    VisitedFunc <span class="token operator">=</span> Visit<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对未访问过的节点调用DFS</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">DFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token function">VisitFunc</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出v节点</span>    <span class="token comment" spellcheck="true">//FirstAdjVex返回v的第一个邻接节点，NextAdjVex返回v的相对于w的下一个节点，若w是v的最后一个节点，返回空</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>w<span class="token operator">=</span><span class="token function">FirstAdjVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token function">NextAdjVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visted<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对v的未访问过的邻接节点w递归调用DFS</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>最小生成树</strong></p><p>稀疏图用Kruskal，稠密图用Prim</p><p>n个节点至少需要n-1条边连通，但边上还有权值，选择权值之和最小的n-1条边，可能不唯一</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//最小生成树，普里姆算法，最小生成树不断壮大的过程，选顶点.使用邻接矩阵存储的网</span><span class="token comment" spellcheck="true">//不断寻找与逐渐生成的最小生成树相连的边权最小的点加入</span><span class="token keyword">void</span> <span class="token function">MiniSpanTree_prim</span><span class="token punctuation">(</span>MGraph G <span class="token punctuation">,</span>vertexType u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从第u个顶点出发构造最小生成树</span>    <span class="token comment" spellcheck="true">//closedge记录从顶点集U到V-U的代价最小的边的辅助数组定义。就是未加入的节点和这棵生成树之间的权值</span>    <span class="token keyword">struct</span> <span class="token punctuation">{</span>        VertexType adjvex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储该边依附在顶点集U中的顶点</span>        VRtype lowcost<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储在该边上的权值</span>    <span class="token punctuation">}</span>closedge<span class="token punctuation">[</span>MAX_VERTEX_NUM<span class="token punctuation">]</span>        k <span class="token operator">=</span> <span class="token function">LocateVex</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开始的顶点的位置</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//辅助数组初始化,lowcost为开始节点u与其他节点之间的权值，权值可为无穷大</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">!=</span> k<span class="token punctuation">)</span> closedge<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>u<span class="token punctuation">,</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//{adjvex,lowcost}</span>    <span class="token punctuation">}</span>    closedge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始U={u}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//选择剩下的G.vexnum-1个顶点</span>        k<span class="token operator">=</span><span class="token function">minimum</span><span class="token punctuation">(</span>closedge<span class="token punctuation">)</span>；    <span class="token comment" spellcheck="true">//选择一个在closedge里边权值最小的顶点的序号，将其顶点和边加入最小生成树        </span>        <span class="token function">printf</span><span class="token punctuation">(</span>closedge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>adjvex<span class="token punctuation">,</span>G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出边</span>        closedge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第K顶点并入U集</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//新顶点并入U后，重新选择最小边。就是更新closedge里面的lowcost的值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arcs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token operator">&lt;</span>closedge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>lowcost<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//权值比原有的lowcost小，更新。    注意是k节点和其他节点之间的权值与之前节点的权值进行比较</span>                closedge<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>arcs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>adj<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>另一个就是Kruskal算法，即连通分量（即不能形成环）不断合并的过程。在开始就将n个顶点加入U，选边。</p><p>每次选择边权最小的边链接两个端点是kruskal的规则，并实时判断两个点之间有没有间接联通形成环。</p><p><a href="https://blog.csdn.net/mgsky1/article/details/77840286" target="_blank" rel="noopener">参考链接</a></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n端点总数，m边数，tot记录最终答案，k已经连接了多少边 </span><span class="token keyword">int</span> fat<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录集体老大。</span><span class="token comment" spellcheck="true">//并查集就是一个用双亲表示法所表示的森林，我们可以利用这个结构来查找某一个顶点的双亲，进而找到根结点。这样，我们就能判断某两个顶点是否同源，在图中的表现就是加上这条边后会不会形成环。并查集以顶点为基准，有几个顶点，就有几项。</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>dis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结构体储存边,dis为权值 </span><span class="token punctuation">}</span>edge<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//sort排序（当然你也可以快排） </span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>dis<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>dis<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">father</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找集体老大，并查集的一部分，就是寻找这个顶点的根 </span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果这不是根，就继续向上查找，直至找到根</span>    <span class="token keyword">return</span> <span class="token function">father</span><span class="token punctuation">(</span>fat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unionn</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//加入团体，并查集的一部分 </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//fat[father(x)]=father(y);    //这感觉有些不能理解，甚至fat[x]=y好像也行</span>    fat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">father</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这样也行</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入点数，边数 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span><span class="token operator">&amp;</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span><span class="token operator">&amp;</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入边的信息 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> fat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自己最开始就是自己的老大（初始化），自己的根就是自己</span>    <span class="token function">sort</span><span class="token punctuation">(</span>edge<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>edge<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按权值排序（kruskal的体现） </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从小到大遍历 </span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n个点需要n-1条边连接 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">father</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">father</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//假如不在一个团体，其根不一样，就是判断形不形成环 </span>        <span class="token punctuation">{</span>            <span class="token function">unionn</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入这个根的团体 </span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"from=%d to=%d \n"</span><span class="token punctuation">,</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">,</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印加入的边的路径</span>            tot<span class="token operator">+</span><span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录边权 </span>            k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已连接边数+1 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试用例</span><span class="token comment" spellcheck="true">//6 7                        </span><span class="token comment" spellcheck="true">//0 2 1</span><span class="token comment" spellcheck="true">//2 5 4</span><span class="token comment" spellcheck="true">//5 3 2</span><span class="token comment" spellcheck="true">//2 1 5</span><span class="token comment" spellcheck="true">//1 4 3</span><span class="token comment" spellcheck="true">//4 5 6</span><span class="token comment" spellcheck="true">//0 4 3</span></code></pre><hr><p><strong>拓扑排序</strong></p><p>在有向图中选一个没有前驱的顶点（<strong>入度为0</strong>）输出，在图中删除该顶点和所有<strong>以它为尾的弧（也就是边）</strong></p><p>可通过拓扑排序判断网中是否存在环，<strong>若所有的顶点都在拓扑排序序列中，则不存在环</strong>。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//拓扑排序，判断是否有环</span>Status <span class="token function">topologicalSort</span><span class="token punctuation">(</span>AlGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">findinDegree</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>indegree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对各个顶点求入度 indegree[0……vexnum-1]</span>    <span class="token function">InitStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    `<span class="token comment" spellcheck="true">//入度为0的顶点入栈</span>    <span class="token punctuation">}</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对输出顶点计数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出i号顶点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>G<span class="token punctuation">.</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span> p<span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-></span>nextarc<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断这个输出顶点的邻接点</span>            k <span class="token operator">=</span> p<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对i号顶点的每个邻接点的入度-1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">--</span>indegree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Push</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//若入度为0，则入栈</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">)</span>    <span class="token keyword">return</span> error<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//该有向图有回路</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> Ok<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p><strong>单源最短路径</strong></p><p><a href="https://www.cnblogs.com/RioTian/p/12597634.html" target="_blank" rel="noopener">参考此链接</a></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 单源最短路径：Dijkstra 算法 </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span>  matrix<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 邻接矩阵</span>bool visited<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 标记数组</span><span class="token keyword">int</span>  dist<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 源点到顶点 i 的最短距离</span><span class="token keyword">int</span>  path<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记录最短路的路径</span><span class="token keyword">int</span>  source<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 源点</span><span class="token keyword">int</span>  vertex_num<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 顶点数</span><span class="token keyword">int</span>  edge_num<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 边数</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化标记数组</span>    visited<span class="token punctuation">[</span>source<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开始节点被访问</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>source<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开始节点到其他节点之间的权值</span>        path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> min_cost<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 权值最小</span>    <span class="token keyword">int</span> min_cost_index<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 权值最小的下标</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 找到源点到另外 vertex_num-1 个点的最短路径</span>    <span class="token punctuation">{</span>        min_cost <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先设为最大值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertex_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> false <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min_cost<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 先找到与之相连的权值最小的节点</span>            <span class="token punctuation">{</span>                min_cost <span class="token operator">=</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                min_cost_index <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        visited<span class="token punctuation">[</span>min_cost_index<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该点已找到，进行标记</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertex_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 更新 dist 数组</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> false <span class="token operator">&amp;&amp;</span>    <span class="token comment" spellcheck="true">//表示这个节点还未被访问</span>                matrix<span class="token punctuation">[</span>min_cost_index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INT_MAX <span class="token operator">&amp;&amp;</span>  <span class="token comment" spellcheck="true">// 确保两点之间有边</span>                matrix<span class="token punctuation">[</span>min_cost_index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> min_cost <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//**算法核心</span>            <span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>min_cost_index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> min_cost<span class="token punctuation">;</span>                path<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min_cost_index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入图的顶点数（&lt;100）："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> vertex_num<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入图的边数："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> edge_num<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertex_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> INT_MAX <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化 matrix 数组</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入边的信息：\n"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edge_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span>        matrix<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入源点（&lt;"</span> <span class="token operator">&lt;&lt;</span> vertex_num <span class="token operator">&lt;&lt;</span> <span class="token string">"）："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> source<span class="token punctuation">;</span>    <span class="token function">Dijkstra</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertex_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> source<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> source <span class="token operator">&lt;&lt;</span> <span class="token string">" 到 "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" 的最短距离是："</span> <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"，路径是："</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> source<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--"</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">;</span>                t <span class="token operator">=</span> path<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--"</span> <span class="token operator">&lt;&lt;</span> source <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果</span></code></pre><hr><h5 id="4-查找"><a href="#4-查找" class="headerlink" title="4.查找"></a>4.查找</h5><p><strong>1.顺序表查找</strong></p><p><strong>二分法查找</strong>，low和high作为待元素的下界和上界，mid指示区间的中间位置。mid=(low+high)/2 向下取整，若mid对应的值大于被查找值key，则high = mid-1，否则low = mid+1，若相等则返回mid。当low&lt;=high时，返回未查找到。</p><p><strong>索引顺序表或分块查找</strong></p><p>将表分成几个子表，对每个子表建立一个索引项，包含关键字项（子表里面最大的数）和一个指针项。</p><p>索引表暗关键字有序，则表有序或块有序</p><p>所以最后的查找是分两步进行，先确定待查记录所在的块，然后在块里面顺序查找</p><p><strong>2.动态查找表</strong></p><p><strong>二叉排序树</strong></p><p>动态树表，若左子树不空，则左子树所有节点均小于根节点的值，同理，右子树的节点均大于根节点的值。若查找不成功，就将关键字插入查找路径的访问的最后一个节点的左孩子或右孩子中。</p><p>一个无序列表就可通过构造二叉排序树成为一个有序序列。</p><p><strong>3.哈希表</strong></p><p>使每一个关键字和结构中一个唯一的存储位置相对应。</p><p>哈希表有些<strong>构造方法</strong>，但注意不要产生同义词，产生冲突</p><p>1.直接定址法</p><p>2.数字分析法</p><p>3.平方取中法</p><p>4.折叠法</p><p>5.随机数法</p><p><strong>6.除留余数法</strong>    主流</p><p><strong>H(key) = key mod p</strong> ; p&lt;=m    m为表长</p><p>核心是对<strong>p</strong>的取值</p><p>一般经验：P可选为质数或不包含小于20的质因数的合数</p><p><strong>处理冲突的方法</strong></p><p><strong>1.开放定址法</strong></p><p>Hi = (H(key) + di) mod m    i = 1,2,3…,k  (k&lt;=m-1)    </p><p>H(key)为hash函数，m为hash表长，di为增量序列</p><p>di有三种取法</p><ol><li>线性探测再散列    di = 1,2,3….,m-1</li><li>二次探测再散列    di = 1,-1,4,-4,9,…,k^2    (k&lt;= m/2)</li><li>随机探测再散列    di = 随机数</li></ol><p><strong>2.再hash法</strong></p><p>Hi = RHi (key)</p><p>当产生冲突时计算另一个hash函数地址</p><p><strong>3.链地址法</strong>    主流</p><p>将所有关键字为同义词的记录存储在同一线性链表中，凡hash地址为i的记录都插入到线性链表中对应的头节点中，需保持同义词在同一线性链表中按关键字有序。</p><hr><p>对<strong>hash表的查找</strong>和hash表的构造过程基本一致</p><p>给定K值，根据构造表的hash函数求得hash地址，若表中此位置没有记录，则查找不成功，否则比较关键字，若相等，则查找成功</p><hr><h5 id="5-排序"><a href="#5-排序" class="headerlink" title="5.排序"></a>5.排序</h5><p>有两个基本操作，1.比较两个关键字的大小。    2.将记录从一个位置移到另一个位置。    一般改变存储方式避免2.</p><p><strong>1.插入排序</strong>    O(n^2)</p><p> 将一个记录插入到已排好序的有序表中，从而的到一个新的、记录值+1的有序表</p><p>也有一种折半插入排序，优化了查找，结合了之前的二分法查询，进行关键字的判断，进而得到位置    仍是O(n^2)</p><p><strong>2.希尔排序</strong></p><p>优化了时间复杂度</p><p>先将整个待排记录序列分割成若干个子序列分别进行直接插入排序，待记录基本有序之后，再对全体记录进行一次直接插入排序</p><p>特点是：子排序的构成不是简单的“逐段分割”，而是将<strong>相隔某个“增量”</strong>的记录组成的一个子序列。增量最好为质数，最后一次排序必须为1，通常为5,3,1</p><p><strong>3.快速排序</strong></p><p>1.起泡排序    O(n^2)</p><p>若为逆序（r[1.key&gt;r[2].key）交换两个记录的位置，然后比较第二个记录和第三个记录关键字，直至n-1和n进行比较过为止。</p><p>这算一次起泡排序，结果为最大的记录值被排到了最后一个的位置，之后进行第二次起泡排序，对前n-1个记录进行相同操作</p><p>2.快速排序</p><p>其是对起泡排序的一个改进</p><p><strong>核心思想</strong>为通过一次排序将待排记录分割成独立的两部分，其中一部分的关键字均比另一组的关键字小，则可分别对这两部分记录继续排序，以达到整个序列的有序</p><p>首先需要选取一个枢轴，一般为第一个记录，之后将比他小的记录移到左边，大的移到右边。这样的一次操作称作一次快排</p><p><strong>具体做法</strong>为附设两个指针low和high，初值指向low和high，还有一个枢轴记录的关键字pivotkey，之后首先从high的位置向前搜索找到第一个关键字小于pivotkey的记录并和枢轴记录交换位置，之后从low的位置向后搜索找到 一个比privotkey大的记录，并交换位置，重复这两部操作，直至low==high。<strong>可使用L[0]存储pivotkey</strong>，因为对枢轴的复制是多余的，只需要最后进行移位即可</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//快速排序</span><span class="token keyword">int</span> <span class="token function">Prtition</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//子表的第一个记录做枢轴记录</span>    privotkey <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从表的两端交替向中间扫描</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">>=</span>privotkey<span class="token punctuation">)</span>    <span class="token operator">--</span>high<span class="token punctuation">;</span>            L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//比枢轴记录小的记录移到左边</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token operator">>=</span>privotkey<span class="token punctuation">)</span>    <span class="token operator">++</span>low<span class="token punctuation">;</span>            L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span>  <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//比枢轴记录大的记录移到右边</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//枢轴记录到位</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.<strong>选择排序</strong></p><p>1.简单选择排序</p><p>通过n-i次关键字比较，选出最小的一个记录，并和第i个记录交换</p><p>2.树形选择排序</p><p>首先n个关键字进行两两比较，然后再n/2(向上取整)个较小者之间再两两比较，如此重复，直至选出最小的关键字为止</p><p>可使用有n个叶子节点的完全二叉树表示，两两比较，最后的<strong>根</strong>即是最小，之后选出次最小关键字，只需<strong>将原来的叶子节点里面的最小关键字，即上一次选出来的根的那个关键字，变为无穷大</strong>，这样就选出了次最小关键字</p><p>3.堆排序</p><p>堆排序是对树形选择排序的优化，主要是“筛选”，“建堆”</p><p>4归并排序</p><p>将两个或以上的有序表组合成一个新的有序表</p><hr><h4 id="3-计算机算法思想"><a href="#3-计算机算法思想" class="headerlink" title="3.计算机算法思想"></a>3.计算机算法思想</h4><h5 id="1-递归与分治"><a href="#1-递归与分治" class="headerlink" title="1.递归与分治"></a>1.递归与分治</h5><p>递归看之前的一些就行，这里主要说分治法，各个击破，分而治之</p><p>基本思想是将一个规模为n的问题分解成k个规模较小的子问题，这些子问题相互独立，不包含公共的子问题，且与原问题相同，递归的解这些子问题（将这些子问题继续划分），然后将各个子问题的解合并得到原问题的解。常见的 k = 2</p><p>例：二分查找技术，棋盘覆盖，归并排序，快速排序等的具体实现</p><h5 id="2-动态规划"><a href="#2-动态规划" class="headerlink" title="2.动态规划"></a>2.动态规划</h5><p>适用于解最优化问题，依赖于问题本身的两个核心性质：最优子结构性质和子问题重叠性质。分解的子问题往往不是互相独立的</p><p>最优子结构性质：动态规划算法的第一步首先是构造最优解的结构，当问题的最优解包含了其子问题的最优解，称为最优子结构</p><p>重叠子问题：递归运算自顶向下解此问题时，每次产生的子问题并不总是新问题，有些种子问题被计算多次，动态规划利用此性质，对每个子问题只解一次，而后将其解保存在一个表格中，当需要再次解此子问题时，只需要查看一下表格。</p><p>其每一步的选择都依赖于相关子问题的解，只有相关子问题的解出来后，才进行选择</p><ol><li>找出最优解的性质，并刻画其结构特征</li><li>递归的定义最优值</li><li>以自底向上的方式计算出最优值</li><li>根据计算最优值时得到的信息，构造最优解</li><li>定义动态规划式，给出动态规划递归式，给出非递归代码</li></ol><p>例：矩阵连乘，最长公共子序列，最大子段和（分治与动规的区分），租用游艇问题</p><p>分治和动规都是自底向上解决问题</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//租用游艇问题</span><span class="token keyword">int</span> <span class="token function">getMinRent</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//令dp[i]为从出租站1到出租站n所需要的最少租金 </span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化 </span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先初始化dp[i]为第1到i站的租金 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//状态转移方程 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回n个 </span><span class="token punctuation">}</span></code></pre><hr><h5 id="3-贪心算法"><a href="#3-贪心算法" class="headerlink" title="3.贪心算法"></a>3.贪心算法</h5><p>并不从整体最优上进行考虑，而是在局部最优进行选择，我们希望最后的结果也是整体最优的，虽然一些时候并不知道最优解，但最终结果确实最优解的很好地近似解。通常自顶向下进行求解</p><p>贪心每次仅做局部最优解，之后去解做出这个选择后产生的相应的子问题。</p><p>贪心算法基本要素：最优子结构性质，</p><p>贪心选择性质：所求问题的整体最优解可通过一系列局部最优的选择来达到。而且需要证明每一步做的贪心选择最终导致问题的整体最优解</p><p>例：活动安排问题，最优装载，多机调度问题，dijkstra最短路径算法，最小生成树算法</p><hr><h5 id="4-回溯法"><a href="#4-回溯法" class="headerlink" title="4.回溯法"></a>4.回溯法</h5><p>深度遍历解空间树，从根节点进行遍历，当发现某一节点肯定不包含问题的解，则跳过对其子树的遍历，逐层向祖先节点回溯</p><p>通常解题步骤为：首先定义问题的解空间树；确定易于搜索的解空间结构；深度优先搜索解空间，并在搜索过程中使用剪枝函数避免无效搜索</p><p>通常使用剪枝函数避免无效搜索：</p><p>1.用约束函数咋扩展节点处剪去不满足约束的子树</p><p>2.用限界函数减去得不到最优解的子树</p><p>一般可使用递归回溯，迭代回溯，子集树与排列树</p><p>子集树：从n个元素中找出满足要求的子集</p><p>排列树：确定n个元素满足某种性质的排列</p><img src="https://img-blog.csdnimg.cn/20200702193813843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzY2ODgz,size_16,color_FFFFFF,t_70" alt="图" style="zoom: 50%;" /><p>例：0-1背包问题，旅行售货员问题 ，装载问题</p><hr><h5 id="5-分支限界法"><a href="#5-分支限界法" class="headerlink" title="5.分支限界法"></a>5.分支限界法</h5><p>广度优先+剪枝</p><p>一般来说，回溯法是求出问题的所有解；分支限界是求出一个解，或者说是在满足某一约束的最优解</p><p>在分支限界法中，活节点一旦成为扩展节点，就一次性生成所有子节点，舍弃所有不可行解或非最优解的儿子节点，其余儿子节点加入活结点表中。</p><p>从活节点表中选择下一扩展节点有几种方式</p><p>1.先入先出方式</p><p>2.优先队列式分支限界法（看哪一个节点先成为扩展节点）</p><p>例：装载问题，旅行员售货问题</p><p>总之先写到这里了，后面再改吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础</title>
      <link href="/2020/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>机械工业出版社的大黑书(计算机网络-自顶向下方法)和课程，慕课的一个的总结，主要根据tcp/ip的五层体系结构。介绍一些大概</p><p>下面放一些他人的总结，当做补充资料或者细节</p><p><a href="https://www.cnblogs.com/zyx110/p/11891335.html" target="_blank" rel="noopener">五层结构简解</a></p><p><a href="https://www.jianshu.com/p/ef892323e68f" target="_blank" rel="noopener">tcp协议详解</a></p><p><a href="https://blog.csdn.net/baidu_37964071/article/details/80467838?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160005926919725247451603%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=160005926919725247451603&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v4-1-80467838.first_rank_ecpm_v3_pc_rank_v4&utm_term=ip%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3&spm=1018.2118.3001.4187" target="_blank" rel="noopener">IP协议简解</a></p><p><a href="https://www.jianshu.com/p/80e25cb1d81a" target="_blank" rel="noopener">HTTP协议详解</a></p><p><a href="https://blog.csdn.net/qq_34468186/article/details/82146754" target="_blank" rel="noopener">get/post详解</a></p><p><a href="https://blog.csdn.net/x1179194525/article/details/90370685" target="_blank" rel="noopener">本书前六章简解</a></p><p><a href="https://blog.csdn.net/qq_40323844/article/details/94488975?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">本书大致结构梳理</a></p><h4 id="1-总览"><a href="#1-总览" class="headerlink" title="1.总览"></a>1.总览</h4><h5 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h5><p>互联网组成：边缘部分+核心部分。</p><p>边缘部分就是各种主机，端系统，用户直接使用。<strong>每个端系统都具有一个唯一的IP地址</strong>，通过ISP与网络相连。</p><p>核心部分就是网络，交换机，<strong>路由器</strong>这些，为边缘部分提供服务(连通性和交换)。每台路由器都有一个转发表，用于将目的地址映射为输出链路。</p><p>端系统的常见通信方式是<strong>客户服务器方式</strong>，客户和服务器都是指通信中涉及到的两个应用进程。客户和服务器都要使用网络核心部分提供的服务。另一种是<strong>对等方式</strong>，本质上看还是客户服务器方式，只不过通信双方都是客户和服务器。</p><p>客户和服务器建立连接之后，通信是双向的，两者都可以接收/发送信息</p><p><strong>协议：定义了两个或多个通信实体之间交换的报文的格式和顺序，以及报文发送，接收采取的一系列动作。</strong></p><hr><p>主机是为用户<strong>进行信息处理</strong>的，并向网络发送分组，或者从网络接收分组。</p><p>路由器是实现<strong>分组交换</strong>(packet switching)的关键构件，其任务是对分组进行<strong>存储转发</strong>，最后把分组交付目的主机，这是网络核心部分最重要的功能。</p><p><strong>分组交换</strong>：是以分组为单位进行传输和交换的，它是一种存储-转发交换方式。简单地说，就是一个数据报文太长了，超过了传输限制，需要将其分割分组，为每一个分组添加<strong>首部</strong>(包含地址等信息)，进行传输，最后在目的地接收后取出首部，进行拼接得到完整数据。但是有可能<strong>丢包</strong>，因为存储的队列满了，一般通过重发解决。<br><strong>存储转发</strong>：路由器收到一个分组，先暂时存储下来，再<strong>检查其首部，查找转发表</strong>，按照首部中的目的地址，找到合适的接口转发出去。</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200913161533494.png" alt="image-20200913161438568" style="zoom:50%;" /><h5 id="1-2-性能指标"><a href="#1-2-性能指标" class="headerlink" title="1.2 性能指标"></a>1.2 性能指标</h5><p>1.速率：数据的传送速率，单位bit/s等</p><p>2.带宽：单位时间内，某信道能通过的“最高数据率”，单位bit/s</p><p>3.吞吐量：单位时间内，通过某个网络的数据量</p><p>4.<strong>时延</strong>：数据(一个报文或分组)从网络(或链路)的一端到另一端传送所需的时间。通常有</p><p>发送时延/传输时延：从发送数据帧的第一个比特到最后一个比特发送完成到链路上所需的时间</p><p>传播时延：电磁波在信道中需要一定的时间进行传播</p><p>处理时延：主机或路由器在收到分组时，为处理分组（例如分析首部、提取数据、差错检验或查找路由）所花费的时间。</p><p>排队时延：分组在路由器输入输出队列中排队等待处理所经历的时间。</p><p>总时延为上面相加</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200913161503961.png" alt="image-20200913161347953" style="zoom:50%;" /><p>一个小点：宽带线路和窄带线路上比特的传播速率是一样的。宽带线路:每秒有更多比特从计算机注入到线路。而且宽带不等于并行传输。</p><p>5.时延带宽积</p><p>6.往返时间RTT</p><p>7.利用率：信道利用率和网络利用率</p><h5 id="1-3-体系结构"><a href="#1-3-体系结构" class="headerlink" title="1.3 体系结构"></a>1.3 体系结构</h5><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200913161438568.png" alt="" style="zoom: 67%;" /><p>消息自上向下<strong>逐层封装</strong>，目标系统自下向上逐层拆封，由最高层将消息提供给目标进程。</p><p><strong>协议数据单元</strong>(PDU):协议控制信息(称为协议头/首部)+数据。协议头包含地址，序号，长度，分段标志等控制信息</p><p><strong>封装</strong>：<img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200913161414234.png" alt="image-20200913161503961" style="zoom:50%;" /></p><p>在计算机网络中数据交换必须准守事先约定的协议。</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200913161347953.png" alt="image-20200913161414234" style="zoom: 67%;" /><p>应用层：网络应用程序及应用层协议存留的地方，包括HTTP.SMTP.FTP协议。分布在多个端系统上。</p><p>运输层：在应用程序端点之间传输应用层报文。有两种传输协议，<strong>TCP/UDP</strong>。TCP面向连接服务和可靠数据传输服务，UDP提供无连接服务。</p><p>网络层：负责将称为<strong>数据报</strong>的网络层分组从一台主机移到另一台主机，通过TCP/UDP得到报文段和目的地址。协议仅有一个为著名的<strong>IP</strong>协议。</p><p>链路层：为了将分组从一个节点(主机或路由器)移到另一个节点，网络层必须需要链路层提供服务。链路层分组称为帧。</p><p>物理层：链路层是将整个帧从一个网络元素移动到邻近的网络元素，物理层的任务是将帧中的一个个比特从一个节点移到下一个节点。与双绞铜线，同轴电缆，光纤相关。</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200915205119264.png" alt="image-20200915205119264" style="zoom:57%;" /><hr><h4 id="2-应用层"><a href="#2-应用层" class="headerlink" title="2.应用层"></a>2.应用层</h4><p>规定应用进程在通信是遵守的协议，协议大多基于客户服务器方式。进程通过一个称为<strong>套接字软件接口</strong>向网络发送，接收报文。</p><p>可供应用程序使用的运输服务：1.可靠的数据传输  2.定时 3.吞吐量 4.安全</p><h5 id="2-1-HTTP"><a href="#2-1-HTTP" class="headerlink" title="2.1 HTTP"></a>2.1 HTTP</h5><p>定义了web客户向web服务器请求web页面的方式，以服务器向客户发送web页面的方式。使用TCP作为他的支撑运输协议。因为HTTP服务器不保存客户的任何信息，所以称HTTP协议是一个<strong>无状态协议</strong>，每一次请求都认为是一个全新的请求。默认是持续连接，也可改成非持续连接。</p><p><strong>HTTP报文格式</strong></p><p><a href="https://www.jianshu.com/p/6e86903d74f7" target="_blank" rel="noopener">常见响应头字段详解</a></p><p><strong>请求报文</strong>：第一行称为请求行，包含方法字段(get/post/put……)、URL字段、HTTP版本字段。后续的行称为首部行。</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200913192706036.png" alt="image-20200913192706036" style="zoom:70%;" /><p>请求数据一般在post存在；get为空，参数直接在URL里存在。</p><pre><code>GET /books/?sex=man&amp;name=Professional HTTP/1.1Host: www.wrox.comUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)Gecko/20050225 Firefox/1.0.1Connection: Keep-Alive</code></pre><p><strong>响应报文</strong>：包括初始状态行(版本，状态码，短语)，6个首部行，一个实体体(数据)。结构与上面相似，只是第一行有变化。</p><pre><code>HTTP/1.1 200 OK  //初始状态行Date: Sat, 31 Dec 2005 23:59:59 GMTContent-Type: text/html;charset=ISO-8859-1Content-Length: 122...name=Professional%20Ajax&amp;publisher=Wiley    //响应数据</code></pre><p>cookie：客户与服务器的交互，因为HTTP是无状态的，所以需要cookie进行保存会话，免得重新再来全部请求一遍。</p><p>web缓存：内容分发网络CDN，减少访问和数据传输的时间</p><h5 id="2-2-SMTP"><a href="#2-2-SMTP" class="headerlink" title="2.2 SMTP"></a>2.2 SMTP</h5><p>使用TCP可靠数据传输协议，是一个电子邮件传输协议。用户代理发送信息到用户的邮件服务器，此服务器发送邮件到接收方的邮件服务器，接收方的服务器将邮件放入接收方的邮箱中。</p><p>电子邮件组成：用户代理，邮件服务器，协议。</p><h5 id="2-3-SMTP与HTTP的对比"><a href="#2-3-SMTP与HTTP的对比" class="headerlink" title="2.3 SMTP与HTTP的对比"></a>2.3 SMTP与HTTP的对比</h5><ol><li>HTTP主要是一个<strong>拉协议</strong>，TCP连接由想要接收文件的机器发起。即在使用的时候，某些人在Web服务器上装载信息，用户使用HTTP从该服务器上拉取这些信息。</li><li>SMTP基本上是一个<strong>推协议</strong>，TCP连接由想要发送该文件的机器发起。即发送邮件服务器到接收邮件服务器</li><li>SMTP要求每个报文使用7比特ASCLL码形式。HTTP<strong>不受限制</strong></li><li>处理一个既包含文本又包含图形的文档，HTTP把<strong>每个对象</strong>封装到自己的<strong>HTTP响应报文</strong>中，SMTP则把所有的报文对象放在<strong>一个报文</strong>之中。</li></ol><p>邮件访问协议：取报文是一个拉操作，而SMTP为一个推协议，通过一个特殊的协议实现邮件服务器到用户代理。</p><ol><li>第三版的邮局协议：POP3 授权 (代理 &lt;–&gt;服务器) 并下载</li><li>因特网邮件访问协议：IMAP 更多特色 (更复杂) 操作存储在服务器上的报文</li></ol><h5 id="2-4-DNS域名系统"><a href="#2-4-DNS域名系统" class="headerlink" title="2.4 DNS域名系统"></a>2.4 DNS域名系统</h5><p>1.一个由分层的DNS服务器实现的分布式数据库。</p><p>2.一个使得主机能够查询分布式数据库的应用层协议。（DNS协议运行在UDP之上，使用53号端口）</p><p>DNS能够进行主机名(如localhost等)到IP地址(127.0.0.1)转换的目录服务。</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200913200420786.png" alt="image-20200913200420786" style="zoom:60%;" /><p><strong>域名的解析过程</strong><br>主机向本地域名服务器的查询一般都是采用<strong>递归查询</strong>。<br>如果主机所询问的本地域名服务器不知道被查询域名的P地址，那么本地域名服务器就以DNS客户的身份，向其他<strong>根域名服务器</strong>继续发出查询请求报文。</p><p>本地域名服务器向根域名服务器的查询通常是采用<strong>迭代查询</strong>。<br>当根域名服务器收到本地域名服务器的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地域名服务器:“你下一步应当向哪一个域名服务器进行查询”。然后让本地域名服务器进行后续的查询，这就叫迭代。</p><p><strong>DNS缓存</strong>：存放最近使用过的主机名和ip的映射，再次访问的时候就直接进行域名解析得到ip地址，一般只会保存两天</p><hr><h4 id="3-运输层"><a href="#3-运输层" class="headerlink" title="3.运输层"></a>3.运输层</h4><p>为运行在不同主机上的应用程序之间提供了<strong>逻辑通信功能</strong>，ip协议提供了主机之间的逻辑通信功能。</p><p>将运输层分组称为<strong>报文段</strong>。<strong>数据交付和差错检查</strong>是两种最低程度的运输层服务，也是UDP仅能提供的两种服务。</p><p>多路复用，多路分解。通过<strong>源端口号字段和目的端口号字段</strong>在套接字中进行标识</p><h5 id="3-1-UDP服务"><a href="#3-1-UDP服务" class="headerlink" title="3.1 UDP服务"></a><strong>3.1 UDP服务</strong></h5><p>UDP（User Datagram Protocol 用户数据报协议）是<strong>不可靠，无连接</strong>的(发送数据前不需要建立连接)，尽最大可能交付，没有拥塞控制，<strong>面向报文</strong>（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部，一次发送一个报文），支持一对一、一对多、多对一和多对多的交互通信，首部开销小(只有8个字节)。适用于高实时性的场合，比如电话，音视频播放等。</p><h5 id="3-1-2-TCP服务"><a href="#3-1-2-TCP服务" class="headerlink" title="3.1-2 TCP服务"></a><strong>3.1-2 TCP服务</strong></h5><p>传输控制协议：可靠，面向连接的服务，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一），连接的端点叫<strong>套接字</strong></p><p><strong>套接字socket(IP地址：端口号)    TCP连接=(socket1，socket2)</strong></p><p>面向连接的服务：<strong>三次握手</strong>，建立一个TCP连接，是在两个进程的套接字之间建立。这条连接是<strong>全双工</strong>的，即双方都可进行报文收发。结束传输之后，必须<strong>四次挥手</strong>断开连接。</p><p>一个点是双方都有发送接收<strong>缓存</strong>，应用程序是从缓存中写入数据，读取数据</p><p><a href="https://blog.csdn.net/qq_43977818/article/details/108577151" target="_blank" rel="noopener">三次握手/四次挥手的简要解析</a></p><p>TCP本身没有提供加密服务，现在主要依靠<strong>安全套接字层(SSL)</strong>提供安全保证，在应用层上进行实现，是一种对TCP的加强。</p><hr><h5 id="3-1可靠的数据传送服务"><a href="#3-1可靠的数据传送服务" class="headerlink" title="3-1可靠的数据传送服务"></a>3-1<strong>可靠的数据传送服务</strong></h5><p>其实书上关于这里的描述是最细致的，关于rdt1、2、3的演变，GBN或SR的选择，这一方面都很重要</p><p>进程依靠TCP，无差错，按适当的顺序交付所有传输的数据。具有<strong>自动重传请求协议</strong>，需要差错检测，接收方反馈，重传三种功能处理比特差错的情况。还有<strong>超时重传(但这个时间的设置是一个问题)</strong>，检测冗余(因为过早超时，进行了数据重发，接收方产生了数据冗余)。</p><p>接收方一般有累计确认机制</p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20200915173418221.png" alt="image-20200915173418221" style="zoom:67%;" /><hr><h5 id="3-2-TCP首部格式"><a href="#3-2-TCP首部格式" class="headerlink" title="3.2 TCP首部格式"></a><strong>3.2 TCP首部格式</strong></h5><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/55dc4e84-573d-4c13-a765-52ed1dd251f9.png" width="700" style="zoom:60%;" /><ul><li><strong>序号</strong>   ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。因为MTU（最大传输单元）的限制，TCP将数据报分成MSS（最大报文段长度）大小的字节流。</li><li><strong>确认号</strong>   ：期望收到的下一个报文段的<strong>序号</strong>。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li><li><strong>数据偏移</strong>   ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</li><li><strong>确认 ACK</strong>   ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</li><li><strong>同步 SYN</strong>   ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</li><li><strong>终止 FIN</strong>   ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</li><li><strong>窗口</strong>   ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</li><li><strong>选项</strong> ：规定了最大报文长度MSS，告诉对方TCP：“我的缓存所能接收的报文段的数据字段的最大长度是MSS个字节。”,与窗口用于流量控制，后面的填充十位了保证4字节对齐。</li></ul><hr><h5 id="3-3-TCP-的三次握手"><a href="#3-3-TCP-的三次握手" class="headerlink" title="3.3 TCP 的三次握手"></a>3.3 TCP 的三次握手</h5><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e92d0ebc-7d46-413b-aec1-34a39602f787.png" width="600" style="zoom:75%;" /><p>类比于：A:我要与你建立连接了，B:真的吗，A:是真的。</p><p>假设 A 为客户端，B 为服务器端。</p><ul><li><p>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</p></li><li><p>A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。</p></li><li><p>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</p></li><li><p>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</p></li><li><p>B 收到 A 的确认后，连接建立。</p></li></ul><p><strong>三次握手的原因</strong>  </p><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><hr><h5 id="3-4-TCP-的四次挥手"><a href="#3-4-TCP-的四次挥手" class="headerlink" title="3.4 TCP 的四次挥手"></a>3.4 TCP 的四次挥手</h5><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg" width="600" style="zoom:75%;" /><p>类比于：A:我要与你断开连接了，B:好的，B:但我也要与你断开连接，A:好的</p><p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</p><ul><li><p>A 发送连接释放报文，FIN=1。</p></li><li><p>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</p></li><li><p>当 B 不再需要连接时，发送连接释放报文，FIN=1。</p></li><li><p>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</p></li><li><p>B 收到 A 的确认后释放连接。</p></li></ul><p><strong>四次挥手的原因</strong>  </p><p>这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p><p><strong>TIME_WAIT</strong>  </p><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li></ul><hr><h5 id="3-5-流量控制"><a href="#3-5-流量控制" class="headerlink" title="3.5 流量控制"></a>3.5 流量控制</h5><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。因为可能接收方的接收缓存因为应用程序读取数据过慢，导致接收缓存溢出</p><p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。可依靠传输中的滑动窗口进行流量控制。</p><hr><h5 id="3-6-拥塞控制"><a href="#3-6-拥塞控制" class="headerlink" title="3.6 拥塞控制"></a>3.6 拥塞控制</h5><p>如果网络出现拥塞，因为缓冲区溢出，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/51e2ed95-65b8-4ae9-8af3-65602d452a25.jpg" width="500" style="zoom: 67%;" /><p>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p><p>发送方需要维护一个叫做<strong>拥塞窗口</strong>（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p><p>TCP通过感知<strong>超时</strong>或者出现<strong>3次冗余ACK</strong>判断出现了拥塞，需要拥塞控制</p><p>为了便于讨论，做如下假设：</p><ul><li>接收方有足够大的接收缓存，因此不会发生流量控制；</li><li>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段<strong>MSS</strong>。</li></ul><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/910f613f-514f-4534-87dd-9b4699d59d31.png" width="800" style="zoom: 67%;" /><h6 id="3-6-1-慢开始与拥塞避免"><a href="#3-6-1-慢开始与拥塞避免" class="headerlink" title="3.6.1  慢开始与拥塞避免"></a>3.6.1  慢开始与拥塞避免</h6><p>发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当<strong>收到确认后</strong>，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p><p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个<strong>慢开始门限 ssthresh</strong>，<strong>当 cwnd &gt;= ssthresh 时，进入拥塞避免</strong>，之后每个轮次只将 cwnd 加 1。</p><p>如果出现了<strong>超时</strong>，则令 <strong>ssthresh = cwnd / 2</strong>，然后重新执行慢开始。</p><h6 id="3-6-2-快重传与快恢复"><a href="#3-6-2-快重传与快恢复" class="headerlink" title="3.6.2  快重传与快恢复"></a>3.6.2  快重传与快恢复</h6><p>在接收方，要求每次接收到报文段都应该对最后一个已收到的<strong>有序</strong>报文段进行确认。例如已经接收到 M<sub>1</sub> 和 M<sub>2</sub>，此时收到 M<sub>4</sub>，应当发送对 M<sub>2</sub> 的确认。</p><p>在发送方，如果<strong>收到三个重复确认ACK</strong>，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M<sub>2</sub>，则 M<sub>3</sub> 丢失，立即重传 M<sub>3</sub>。</p><p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。</p><p><strong>慢开始和快恢复的快慢指的是 cwnd 的设定值</strong>，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p><hr><h4 id="4-网络层"><a href="#4-网络层" class="headerlink" title="4.网络层"></a>4.网络层</h4><h5 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h5><p>网络层不保证数据报的交付，和按序交付，也不保证数据的完整性。IP协议提供了主机之间的逻辑通信功能。</p><p>数据平面：即是网络层中路由器的功能，决定到达网络层的<strong>数据报</strong>(网络层中的分组)如何转发到该路由器的输出链路之一，涉及<strong>IP转发和通用的转发</strong></p><p>控制平面：即网络范围的逻辑，控制数据报沿着源主机到目的主机的端到端的路径中路由器之间的路由方式，涉及<strong>路由选择算法，路由选择协议</strong></p><p>网络层的核心功能：<strong>转发</strong>（将分组从路由器的输入链路移到合适的输出链路的一个路由器本地动作，一般只有几纳秒，由硬件实现），<strong>路由选择</strong>（分组从发送方流向接收方，网络层必须决定这些分组所采取的路径或路由，称为路由选择算法，通常为几秒，由软件处理）<strong>匹配+动作</strong></p><p>路由器有个关键元素<strong>转发表</strong>，通过在里面查找索引进行转发，路由器由输入端口，交换结构，输出端口，路由选择处理器组成。</p><p>关于地址解析协议(ARP),将IP地址转换成MAC物理地址，我们放在链路层里面细讲。</p><h5 id="4-2-数据平面"><a href="#4-2-数据平面" class="headerlink" title="4.2 数据平面"></a>4.2 数据平面</h5><p><strong>IP转发</strong>：路由器的转发表结构</p><p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200915205940655.png" alt="image-20200915205940655" style="zoom:50%;" /><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200915210414390.png" alt="image-20200915210414390" style="zoom:50%;" /></p><p>主机所在网络为目的地址的前缀，这么使用是为了简化转发表的大小。还有一些特定主机路由和默认路由(类似宿舍路由器)</p><p><strong>交换</strong>：经内存交换、经总线交换、经互联网络交换。</p><p><strong>排队</strong>：因为路由器的缓存有限，可能在输入端口和输出端口出现排队现象，当缓存满了之后，可能出现<strong>丢包</strong>，就是前面的分组丢失</p><p><strong>分组调度</strong>：确定次序，即排队的分组如何经链路传输的次序。先入先出、优先权排队、循环和加权公平排队。</p><hr><h5 id="4-2-2-IP协议"><a href="#4-2-2-IP协议" class="headerlink" title="4.2-2 IP协议"></a>4.2-2 IP协议</h5><p>数据报格式：</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg" width="700" style="zoom: 67%;" /><ul><li><p><strong>版本</strong>   : 有 4（IPv4）和 6（IPv6）两个值；</p></li><li><p><strong>首部长度</strong>   : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</p></li><li><p><strong>区分服务</strong>   : 用来获得更好的服务，一般情况下不使用。</p></li><li><p><strong>总长度</strong>   : 包括首部长度和数据部分长度。不超过65535字节，但一般不会超过1500字节，必须不超过最大传送单元<strong>MTU（一个链路层能承载的最大数据量）</strong>。</p></li><li><p><strong>生存时间</strong>   ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</p></li><li><p><strong>协议</strong>  ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</p></li><li><p><strong>首部检验和</strong>  ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量，用于帮助路由器检测收到的IP数据报中的比特错误。</p></li><li><p><strong>标识</strong>   : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</p></li><li><p><strong>片偏移</strong>   : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。</p></li></ul><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/23ba890e-e11c-45e2-a20c-64d217f83430.png" width="700" style="zoom:67%;" /><hr><h5 id="4-2-3-IP-地址编址方式"><a href="#4-2-3-IP-地址编址方式" class="headerlink" title="4.2-3 IP 地址编址方式"></a>4.2-3 IP 地址编址方式</h5><p>IP 地址的编址方式经历了三个历史阶段：前两个为其他书的补充知识，只需了解</p><ul><li>分类</li><li>子网划分</li><li>无分类（主流）</li></ul><p><code>1. 分类</code></p><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p><p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 主机号 &gt;}</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cbf50eb8-22b4-4528-a2e7-d187143d57f7.png" width="500" style="zoom:77%;" /><p> <code>2. 子网划分</code></p><p>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。</p><p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}</p><p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p><p>注意，外部网络看不到子网的存在。</p><p><strong>子网定义</strong>：</p><p>1.无需通过路由器就能够物理上互相到达，在路由器同一侧（接入路由器同一接口），一般处于同一局域网</p><p>2.设备接口被配置的IP地址具有相同的网络地址（即共同的IP地址前缀）</p><p>3.IP地址 AND 子网掩码 = 网络地址 （与操作，注意是子网掩码）</p><p>子网的表示方法：</p><p>1、子网掩码(使用子网划分)：用从最高位开始的连续1表示IP地址中的子网号部分，后面为0的标识子网内的主机号 255.255.255.0</p><p>2、前缀/长度(使用无分类的IP编址)：223.1.1.0/24，表示前24位为前缀部分</p><img src="https://gitee.com/cheng_song/picgo-img/raw/master/img/image-20200916085108569.png" alt="image-20200916085108569" style="zoom:67%;" /><p><strong>3、无分类(目前主流)</strong></p><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，<strong>使用网络前缀和主机号来对 IP 地址进行编码(变为两级编址)</strong>，网络前缀的长度可以根据需要变化。</p><p>IP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p><p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p><p>CIDR 的地址掩码可以继续称为<strong>掩码</strong>（不叫子网掩码），掩码的数字 1 的长度为网络前缀的长度，掩码全为 1。</p><p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为   <strong>构成超网</strong>  </p><p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用<strong>最长前缀匹配</strong>来确定应该匹配哪一个。</p><p>动态主机配置协议(<strong>DHCP</strong>)：组织被分配了一块地址后，主机可以自动获取一个IP地址，而且能通过配置，给一个主机临时分配一个IP地址。</p><p><strong>通用转发</strong>：IP转发是一个查找目的IP地址，发送到特定端口的 <strong>匹配+动作</strong>；通用转发在每台分组交换机里包含一张匹配加动作表，该表由远程控制器计算和分发，实现与基于目的地址的转发类似的功能，还能丢弃，复制一个分组或重写第2,3,4层的首部。</p><p><strong>网络地址转换 NAT</strong></p><p>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</p><p>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2719067e-b299-4639-9065-bed6729dbf0b.png" width=""/> <p><strong>IPv4与IPv6</strong></p><p>32比特的IP地址空间即将耗尽，应对大IP地址空间的要求，开发新的IP协议即IPv6</p><p>区别：</p><p>1.扩大地址容量 从32比特到128比特。</p><p>2.除单播和多播外加入任播地址。这种地址可以使数据报交付给一组主机中的任意一个</p><p>3.简单高效的40字节首部</p><p>4.留标签和优先级</p><p>5.IPV6不允许在中间路由器上进行分片组装，只能在源和目的地上进行</p><p>6.去除首部检验和</p><p>7.选项不再是标准IP首部一部分。</p><p>可通过建隧道的方式将IPV4迁移到IPV6</p><p><strong>地址解析协议 ARP</strong></p><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/66192382-558b-4b05-a35d-ac4a2b1a9811.jpg" width="700" style="zoom:67%;" /><p>ARP 实现由 IP 地址得到 MAC 地址。</p><hr><h5 id="4-3-控制平面"><a href="#4-3-控制平面" class="headerlink" title="4.3 控制平面"></a>4.3 控制平面</h5><p><strong>构件控制平面的两大类方法</strong>：</p><p>传统的每路由器控制：每台路由器中运算算法，并且路由器中的路由选择组件与其他路由器的路由选择组件通信；</p><p>软件定义网络(SDN)控制：在一个逻辑上集合的控制器计算，并向每台路由器分发转发表为他们所用</p><hr><p><strong>路由选择算法</strong>：为了得到一条有最低开销的路径，可基于<strong>图</strong>进行最短路径选择</p><p>链路状态算法(LS)：Djikstra算法，最差情况下复杂性为O(N^2)，使用全局信息的算法</p><p>距离向量算法(DV)：Bellman-Ford方程，属一种迭代，异步，分布式的算法。<strong>当遇到路由选择环路的时候可能会产生无穷计数的问题</strong>。</p><hr><p>互联网可以划分为许多较小的<strong>自治系统 AS</strong>，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p><p>可以把路由选择协议划分为两大类：</p><ul><li>自治系统内部的路由选择：RIP 和 OSPF</li><li>自治系统间的路由选择：BGP</li></ul><p><strong>1.内部网关协议 RIP</strong>（补充知识，）</p><p>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</p><p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p><p>距离向量算法：</p><ul><li>对地址为 X 的相邻路由器发来的 RIP 报文,先修改报文中的所有项目,把下一跳字段中的地址改为 X，并把所有的距离字段加 1</li><li>对修改后的 RIP 报文中的每一个项目，进行以下步骤：<ul><li>若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；</li><li>否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。</li></ul></li><li>若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。</li></ul><p>RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p><p><strong>2.内部网关协议 OSPF</strong></p><p>开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p><p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。</p><p>且有安全，多条相同开销的路径，对单播和多播路由选择的综合支持，支持在单个AS中的层次结构的优点。</p><p>OSPF 具有以下特点：</p><ul><li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li><li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li><li>只有当链路状态发生变化时，路由器才会发送信息。</li></ul><p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p><p><strong>3.外部网关协议 BGP</strong>（极为重要，可与IP协议一比）</p><p>BGP（Border Gateway Protocol，边界网关协议），ISP之间的路由选择</p><p>AS 之间的路由选择很困难，主要是由于：</p><ul><li>互联网规模很大；</li><li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li><li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</li></ul><p>BGP 只能寻找一条比较好的路由，而不是最佳路由。</p><p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p><hr><p><strong>SDN控制平面</strong></p><p>具有4个特征：基于流的转发，数据平面和控制平面分离，网络控制功能：位于数据平面交换机外面，可编程的网络</p><p>ICMP（网际控制报文协议）：最典型的用途是差错报告，其体系结构位于IP之上，是承载在IP分组中的</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e3124763-f75e-46c3-ba82-341e6c98d862.jpg" width="500"/><hr><h4 id="5-链路层"><a href="#5-链路层" class="headerlink" title="5.链路层"></a>5.链路层</h4><h5 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h5><p>沿着通信路径连接相邻节点的通信信道称为链路。有两种信道：广播信道(一对多 )、点对点通信链路</p><p><strong>数据链路层提供的服务：</strong></p><ul><li><p>成帧 （网络层数据报经链路传送前，链路层协议将其用链路层帧封装起来）<img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/29a14735-e154-4f60-9a04-c9628e5d09f4.png" width="300"/></p></li><li><p>链路接入  （<strong>MAC</strong>协议规定了帧在链路传输的规则。链路的一段仅有一个发送方，另一端只有一个接收方的点对点链路）</p></li><li><p>可靠交付 （保证无差错地经链路层移动每个网络数据报）</p></li><li><p>差错检验和纠正  </p></li></ul><h5 id="5-2-差错检验与纠正"><a href="#5-2-差错检验与纠正" class="headerlink" title="5.2  差错检验与纠正"></a>5.2  差错检验与纠正</h5><p>奇偶校验：有单个奇偶校验位和二维奇偶校验（通过校验出错，比特值改变的行和列的索引，可以进行纠正）</p><p>检验和：将d比特数据看成k比特的整数的序列处理，将这k比特整数加起来当做校验和</p><p>循环冗余检测(CRC)编码(目前主流)：使用多项式算数进行操作</p><h5 id="5-3-多路访问协议"><a href="#5-3-多路访问协议" class="headerlink" title="5.3 多路访问协议"></a>5.3 多路访问协议</h5><p>主要是在广播链路中的多路访问问题的解决</p><p>划分为：信道划分协议，随机接入协议，轮流协议</p><p>理想的多路访问协议：<br>（1）当仅有一个节点发送数据时，该节点具有R bps的吞吐量；<br>（2）当有M个节点发送数据时，每个节点吞吐量为R/M bps；（每个节点在一定时间间隔内应有R/M的平均速率）<br>（3）协议是分散的；（不会因某个主节点故障而使整个系统崩溃）<br>（4）协议是简单的，实现不昂贵。</p><p>纯ALOHA（非时隙、高度分散）：<br>最大效率为 <strong>1/(2e)=0.185</strong>。</p><p>时隙ALOHA（高度分散的）：</p><ul><li>当只有一个节点时可以全速R连续传输；</li><li>一个给定节点传输的概率为p，节点成功传送的概率为 <strong>p(1-p)^(N-1)</strong>，N个节点任意一个发送成功的概率 <strong>Np(1-p)^(N-1)</strong>。（这个协议最大效率为 <strong>1/e=0.37</strong>，是纯ALOHA两倍）</li></ul><hr><h5 id="5-4-交换局域网"><a href="#5-4-交换局域网" class="headerlink" title="5.4 交换局域网"></a>5.4 交换局域网</h5><p>使用链路层地址而不是IP地址来转发链路层帧通过交换机</p><h5 id="5-4-2-链路层寻址和ARP"><a href="#5-4-2-链路层寻址和ARP" class="headerlink" title="5.4-2 链路层寻址和ARP"></a>5.4-2 链路层寻址和ARP</h5><p>1.链路层地址也称<strong>MAC</strong>地址</p><ul><li>不是主机或路由器具有链路层地址，而是它们的适配器（即网络接口）具有链路层地址。</li><li>MAC地址长度为6字节，共有2^48可能的MAC地址。</li><li>MAC地址通常被设计为永久。</li><li>MAC广播地址为 <strong>FF-FF-FF-FF-FF-FF</strong>。</li></ul><p>2.地址解析协议<strong>ARP</strong></p><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，<strong>IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</strong></p><p>因为ARP包含链路层和分组层的地址，可能最认为ARP是跨越链路层和网络层的协议</p><ul><li>作用：将一个IP地址解析为一个MAC地址。</li><li>工作方式：每台主机和路由器在其内存中具有一个ARP表，这张表包含IP地址到MAC地址的映射关系。</li><li>ARP分组有四个字段：源IP、MAC，目的IP、MAC。</li><li>查询ARP报文在广播帧中发送，而响应ARP报文在一个标准帧中发送。</li><li>ARP表是自动建立的，不需要管理员配置。</li></ul><p>每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。</p><p>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8006a450-6c2f-498c-a928-c927f758b1d0.png" width="700" style="zoom:50%;" /><p>3.以太网</p><p>以太网是一种星型拓扑结构局域网</p><p>目前以太网使用交换机替代了集线器，交换机是一种链路层设备，它不会发生碰撞，能根据 MAC 地址进行存储转发。</p><p>以太网帧格式：最前面还有一个前同步码</p><ul><li><strong>类型</strong>  ：标记上层使用的协议；</li><li><strong>目的地址</strong>：目的适配器的MAC地址</li><li><strong>数据</strong>  ：承载IP数据报，长度在 46-1500 之间，如果太小则需要填充；</li><li><strong>FCS</strong>  ：帧检验序列，使用的是 CRC 检验方法；</li><li><strong>前同步码</strong>：8字节，前7个字节用来“唤醒”接收适配器，第8个字节是为了提醒有内容来了</li></ul><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/164944d3-bbd2-4bb2-924b-e62199c51b90.png" width="500"/><p>4.链路层交换机</p><p>交换机借助交换机表，实现过滤和转发。</p><p>交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。</p><p>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。</p><p>下图中，交换机有 4 个接口，主机 A 向主机 B 发送数据帧时，交换机把主机 A 到接口 1 的映射写入交换表中。为了发送数据帧到 B，先查交换表，此时没有主机 B 的表项，那么主机 A 就发送广播帧，主机 C 和主机 D 会丢弃该帧，主机 B 回应该帧向主机 A 发送数据包时，交换机查找交换表得到主机 A 映射的接口为 1，就发送数据帧到接口 1，同时交换机添加主机 B 到接口 2 的映射。</p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a4444545-0d68-4015-9a3d-19209dc436b3.png" width="800" style="zoom:67%;" /><p>5.虚拟局域网</p><p>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。</p><p>使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。</p><h4 id="5-1-回顾web页面请求的历程"><a href="#5-1-回顾web页面请求的历程" class="headerlink" title="5-1 回顾web页面请求的历程"></a>5-1 回顾web页面请求的历程</h4><p>1.准备：DHCP,UDP,IP和以太网</p><p>2.仍在准备：DNS和ARP</p><p>3.仍在准备：域内路由选择到DNS服务器</p><p>4.web客户-服务器交互：TCP,HTTP</p><hr><h4 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h4><p>其实这本书后面还有无线网络与移动网络、网络中的安全、多媒体网络三章，但应该不学了，前面还有一些特定协议的算法没有去搞清楚，后面看能不能补上去。</p><p>后面还有一个我比较感兴趣的一个点：TCP的连接安全    SSL。还要记录一下</p><h5 id="1-SSL（安全套接字层）"><a href="#1-SSL（安全套接字层）" class="headerlink" title="1.SSL（安全套接字层）"></a>1.SSL（安全套接字层）</h5><p>SSL通过机密性、数据完整性、服务器鉴别和客户鉴别来强化TCP</p><h5 id="宏观描述"><a href="#宏观描述" class="headerlink" title="宏观描述"></a>宏观描述</h5><p><strong>1.握手</strong>：使用了非对称加密和对称加密，就速度而言，对称加密解密的速度更快。</p><p>1.客户与服务器建立TCP连接</p><p>2.验证服务器是真实正确的服务器，服务器会发送一个被某CA公证过的公钥。</p><p>3.客户发送给服务器一个主密钥（使用服务器的公钥加密），客户和服务器使用该主密钥生成SSL会话所需的所有对称密钥</p><p><strong>2.密钥导出</strong>：双方使用不同的密钥，为了更安全</p><p>会根据前面的主密钥生成4个密钥，两个加密密钥用来解密数据，两个MAC密钥用来验证数据的完整性，双方各两个</p><p><strong>3.数据传输</strong>：为了方便将MAC完整性检测传过去，<strong>其将数据分割成一个个记录</strong>，给每个记录附加一个MAC用于完整性检测，然后加密“记录+MAC”，进行传输</p><p><strong>4.SSL记录</strong>：</p><img src="https://img-blog.csdn.net/20180523150500822?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoaXBmc2hfc2g=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" style="zoom: 67%;" /><p><strong>连接关闭</strong>：一个方法是直接TCP发送一个FIN报文进行关闭TCP连接而终止SSL会话，但有可能这个FIN是别人伪造，服务器接收数据不完整，所以ssl在类型字段中指出该记录手否用于终止SSL会话。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yarn和npm</title>
      <link href="/2020/09/07/yarn%E5%92%8Cnpm/"/>
      <url>/2020/09/07/yarn%E5%92%8Cnpm/</url>
      
        <content type="html"><![CDATA[<p>对yarn和npm的一些命令的简单学习和对比，还有一些其他的可能会用的东西在里面</p><h5 id="1-快速删除node-modules"><a href="#1-快速删除node-modules" class="headerlink" title="1.快速删除node_modules"></a>1.快速删除node_modules</h5><p>手动删除真的很慢：</p><ul><li>安装： <code>npm install rimraf -g</code></li><li>使用：<code>rimraf node_modules</code></li></ul><p>实测2分钟之内就能删除，比手动快多了</p><h5 id="2-yarn的安装"><a href="#2-yarn的安装" class="headerlink" title="2.yarn的安装:"></a>2.yarn的安装:</h5><ol><li>下载node.js，使用npm安装<br><code>npm install -g yarn</code><br>`查看版本：yarn –version</li><li>Yarn 淘宝源安装，分别复制粘贴以下代码行到黑窗口运行即可<br>yarn config set registry <code>https://registry.npm.taobao.org -g</code><br>yarn config set sass_binary_site <code>http://cdn.npm.taobao.org/dist/node-sass -g</code></li></ol><h5 id="3-常用"><a href="#3-常用" class="headerlink" title="3.常用"></a>3.常用</h5><pre class=" language-bash"><code class="language-bash">安装yarn <span class="token function">npm</span> <span class="token function">install</span> -g yarn安装成功后，查看版本号： yarn --version创建文件夹 yarn md yarn进入yarn文件夹 <span class="token function">cd</span> yarn初始化项目 yarn init // 同npm init，执行输入信息后，会生成package.json文件yarn的配置项： yarn config list // 显示所有配置项yarn config get <span class="token operator">&lt;</span>key<span class="token operator">></span> //显示某配置项yarn config delete <span class="token operator">&lt;</span>key<span class="token operator">></span> //删除某配置项yarn config <span class="token keyword">set</span> <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">[</span>-g<span class="token operator">|</span>--global<span class="token punctuation">]</span> //设置配置项安装包： yarn <span class="token function">install</span> //安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lockyarn <span class="token function">install</span> --flat //安装一个包的单一版本yarn <span class="token function">install</span> --force //强制重新下载所有包yarn <span class="token function">install</span> --production //只安装dependencies里的包yarn <span class="token function">install</span> --no-lockfile //不读取或生成yarn.lockyarn <span class="token function">install</span> --pure-lockfile //不生成yarn.lock添加包（会更新package.json和yarn.lock）：yarn add <span class="token punctuation">[</span>package<span class="token punctuation">]</span> // 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中yarn add <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span> // 安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数yarn add <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> // 安装某个tag（比如beta,next或者latest）//不指定依赖类型默认安装到dependencies里，你也可以指定依赖类型：yarn add --dev/-D // 加到 devDependenciesyarn add --peer/-P // 加到 peerDependenciesyarn add --optional/-O // 加到 optionalDependencies//默认安装包的主要版本里的最新版本，下面两个命令可以指定版本：yarn add --exact/-E // 安装包的精确版本。例如yarn add foo@1.2.3会接受1.9.1版，但是yarn add foo@1.2.3 --exact只会接受1.2.3版yarn add --tilde/-T // 安装包的次要版本里的最新版。例如yarn add foo@1.2.3 --tilde会接受1.2.9，但不接受1.3.0发布包yarn publish移除一个包 yarn remove <span class="token operator">&lt;</span>packageName<span class="token operator">></span>：移除一个包，会自动更新package.json和yarn.lock更新一个依赖 yarn upgrade 用于更新包到基于规范范围的最新版本运行脚本 yarn run 用来执行在 package.json 中 scripts 属性下定义的脚本显示某个包的信息 yarn info <span class="token operator">&lt;</span>packageName<span class="token operator">></span> 可以用来查看某个模块的最新版本信息缓存 yarn cache yarn cache list <span class="token comment" spellcheck="true"># 列出已缓存的每个包 </span>yarn cache <span class="token function">dir</span> <span class="token comment" spellcheck="true"># 返回 全局缓存位置 </span>yarn cache clean <span class="token comment" spellcheck="true"># 清除缓存</span></code></pre><p><img src="https://img-blog.csdn.net/20180802111644352?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3MDB5dw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="对比"></p><p>在vue项目里面，</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run dev <span class="token operator">==</span> yarn run dev <span class="token operator">==</span> yarn dev<span class="token function">npm</span> run build  <span class="token operator">==</span> yarn run build <span class="token operator">==</span> yarn build</code></pre><p>这是另一个网址的记录，看着好像还行</p><pre class=" language-bash"><code class="language-bash">1. 开始一个新工程yarn init 与 <span class="token function">npm</span> init 一样通过交互式会话创建一个 package.jsonyarn init <span class="token comment" spellcheck="true"># yarn</span><span class="token function">npm</span> init <span class="token comment" spellcheck="true"># npm</span><span class="token comment" spellcheck="true"># 跳过会话，直接通过默认值生成 package.json</span>yarn init --yes <span class="token comment" spellcheck="true"># 简写 -y</span><span class="token function">npm</span> init -y2. 添加一个依赖通过 yarn add 添加依赖会更新 package.json 以及 yarn.lock 文件1<span class="token punctuation">)</span>.开发环境yarn add <span class="token operator">&lt;</span>packageName<span class="token operator">></span> 依赖会记录在 package.json 的 dependencies 下 开发环境yarn add webpack@2.3.3 <span class="token comment" spellcheck="true"># yarn --save 是 yarn 默认的，默认记录在 package.json 中</span><span class="token function">npm</span> <span class="token function">install</span> webpack@2.3.3 --save <span class="token comment" spellcheck="true"># npm</span>2<span class="token punctuation">)</span>.生产环境yarn add <span class="token operator">&lt;</span>packageName<span class="token operator">></span> --dev 依赖会记录在 package.json 的 devDependencies 下 生产环境yarn add webpack --dev <span class="token comment" spellcheck="true"># yarn 简写 -D</span><span class="token function">npm</span> <span class="token function">install</span> webpack --save-dev <span class="token comment" spellcheck="true"># npm</span>3<span class="token punctuation">)</span>.全局yarn global add <span class="token operator">&lt;</span>packageName<span class="token operator">></span> 全局安装依赖yarn global add webpack <span class="token comment" spellcheck="true"># yarn</span><span class="token function">npm</span> <span class="token function">install</span> webpack -g <span class="token comment" spellcheck="true"># npm</span>3. 更新一个依赖yarn upgrade 用于更新包到基于规范范围的最新版本yarn upgrade <span class="token comment" spellcheck="true"># 升级所有依赖项，不记录在 package.json 中</span><span class="token function">npm</span> update <span class="token comment" spellcheck="true"># npm 可以通过 ‘--save|--save-dev’ 指定升级哪类依赖</span>yarn upgrade webpack <span class="token comment" spellcheck="true"># 升级指定包</span><span class="token function">npm</span> update webpack --save-dev <span class="token comment" spellcheck="true"># npm</span>yarn upgrade --latest <span class="token comment" spellcheck="true"># 忽略版本规则，升级到最新版本，并且更新 package.json</span>4. 移除一个依赖yarn remove <span class="token operator">&lt;</span>packageName<span class="token operator">></span>yarn remove webpack <span class="token comment" spellcheck="true"># yarn</span><span class="token function">npm</span> uninstall webpack --save <span class="token comment" spellcheck="true"># npm 可以指定 --save | --save-dev</span>5. 安装 package.json 中的所有文件yarn 或者 yarn <span class="token function">install</span>yarn <span class="token function">install</span> <span class="token comment" spellcheck="true"># 或者 yarn 在 node_modules 目录安装 package.json 中列出的所有依赖</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment" spellcheck="true"># npm</span>yarn <span class="token function">install</span> 安装时，如果 node_modules 中有相应的包则不会重新下载 --force 可以强制重新下载安装yarn <span class="token function">install</span> --force <span class="token comment" spellcheck="true"># 强制下载安装</span><span class="token function">npm</span> <span class="token function">install</span> --force <span class="token comment" spellcheck="true"># npm</span>6. 运行脚本yarn run 用来执行在 package.json 中 scripts 属性下定义的脚本// package.json<span class="token punctuation">{</span>    <span class="token string">"scripts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token keyword">:</span> <span class="token string">"node app.js"</span>,    <span class="token string">"start"</span><span class="token keyword">:</span> <span class="token string">"node app.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>yarn run dev <span class="token comment" spellcheck="true"># yarn 执行 dev 对应的脚本 node app.js</span><span class="token function">npm</span> run <span class="token comment" spellcheck="true"># npm</span>yarn start <span class="token comment" spellcheck="true"># yarn</span><span class="token function">npm</span> start <span class="token comment" spellcheck="true"># npm</span>与 <span class="token function">npm</span> 一样 可以有 yarn start 和 yarn <span class="token function">test</span> 两个简写的运行脚本方式7. 显示某个包信息yarn info <span class="token operator">&lt;</span>packageName<span class="token operator">></span> 可以用来查看某个模块的最新版本信息yarn info webpack <span class="token comment" spellcheck="true"># yarn</span><span class="token function">npm</span> info webpack <span class="token comment" spellcheck="true"># npm</span>yarn info webpack --json <span class="token comment" spellcheck="true"># 输出 json 格式</span><span class="token function">npm</span> info webpack --json <span class="token comment" spellcheck="true"># npm</span>yarn info webpack readme <span class="token comment" spellcheck="true"># 输出 README 部分</span><span class="token function">npm</span> info webpack readme8. 列出项目的所有依赖yarn listyarn list <span class="token comment" spellcheck="true"># 列出当前项目的依赖</span><span class="token function">npm</span> list <span class="token comment" spellcheck="true"># npm</span>yarn list --depth<span class="token operator">=</span>0 <span class="token comment" spellcheck="true"># 限制依赖的深度</span><span class="token function">sudo</span> yarn global list <span class="token comment" spellcheck="true"># 列出全局安装的模块</span>9. 管理 yarn 配置文件yarn coinfigyarn config <span class="token keyword">set</span> key value <span class="token comment" spellcheck="true"># 设置</span><span class="token function">npm</span> config <span class="token keyword">set</span> key valueyarn config get key <span class="token comment" spellcheck="true"># 读取值</span><span class="token function">npm</span> config get keyyarn config delete key <span class="token comment" spellcheck="true"># 删除</span><span class="token function">npm</span> config delete keyyarn config list <span class="token comment" spellcheck="true"># 显示当前配置</span><span class="token function">npm</span> config listyarn config <span class="token keyword">set</span> registry https://registry.npm.taobao.org <span class="token comment" spellcheck="true"># 设置淘宝镜像</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org <span class="token comment" spellcheck="true"># npm</span>10. 缓存yarn cache<span class="token function">sudo</span> yarn cache list <span class="token comment" spellcheck="true"># 列出已缓存的每个包</span><span class="token function">sudo</span> yarn cache <span class="token function">dir</span> <span class="token comment" spellcheck="true"># 返回 全局缓存位置</span><span class="token function">sudo</span> yarn cache clean <span class="token comment" spellcheck="true"># 清除缓存</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> yarn npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack简单使用</title>
      <link href="/2020/09/07/webpack%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/07/webpack%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>就是在菜鸟的一个简单学习和使用，并没有深入</p><h5 id="1-首先进行一个webpack的安装"><a href="#1-首先进行一个webpack的安装" class="headerlink" title="1.首先进行一个webpack的安装"></a>1.首先进行一个webpack的安装</h5><pre class=" language-shell"><code class="language-shell">cnpm install webpack webpack-cli -g</code></pre><p>打包使用</p><pre class=" language-shell"><code class="language-shell">webpack filename -o targetname --mode=developmention/production  webpack ./src/index.js -o ./dist/bundle.js --mode=production //例</code></pre><p>开发环境里面会包含注释这些，会更详细。生产环境或对代码进行压缩，删除注释，代码混淆这些，大小也更小。</p><h5 id="2-webpack-config-js"><a href="#2-webpack-config-js" class="headerlink" title="2.webpack.config.js"></a>2.webpack.config.js</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入node的path</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过 npm 安装，生成一个html文件，包含bundle.js</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用于访问内置插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">"./main.js"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//入口文件</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//输出路径，默认为dist文件夹</span>        filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">//输出文件名</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mode<span class="token punctuation">:</span><span class="token string">'develpoment'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//模式</span>    <span class="token comment" spellcheck="true">//loader配置</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先进行文件匹配，在进行处理</span>        loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>              use<span class="token punctuation">:</span><span class="token punctuation">[</span>                  <span class="token comment" spellcheck="true">//use的数组内容loader是从下到上，逆序执行</span>                  <span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//将js的样式内容插入到style标签里面</span>                  <span class="token string">"css.loader"</span> <span class="token comment" spellcheck="true">//将css文件转换成js文件</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//插件配置</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>        contentBase<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__pathname<span class="token punctuation">,</span><span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//目标路径</span>        compress<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//自动刷新</span>        port<span class="token punctuation">:</span><span class="token number">3000</span>  <span class="token comment" spellcheck="true">//端口号</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>之后直接在命令行使用</p><pre class=" language-shell"><code class="language-shell">webpack</code></pre><p>就可以进行打包</p><h5 id="3-loader"><a href="#3-loader" class="headerlink" title="3.loader"></a>3.loader</h5><p><em>loader</em> 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。</p><h5 id="4-plugins"><a href="#4-plugins" class="headerlink" title="4.plugins"></a>4.plugins</h5><p>使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中.在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建它的一个实例</p><h5 id="5-热更新"><a href="#5-热更新" class="headerlink" title="5.热更新"></a>5.热更新</h5><p>可以在进行修改之后，马上看见webpack后的效果，不需要再进行webpack命令。使用devServe，需要安装依赖。</p><pre class=" language-js"><code class="language-js">cnpm install webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span>gwebpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token comment" spellcheck="true">//进行打开</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js promise复习</title>
      <link href="/2020/08/25/js%20promise%20prototype%E5%A4%8D%E4%B9%A0/"/>
      <url>/2020/08/25/js%20promise%20prototype%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p> 之前对js只是在菜鸟上面简单的看了一遍，并没有进行一个熟练地使用，后面发现需要补一些基础原理方面的，特在这里对前面的js进行一个复习</p><h5 id="1-js组成"><a href="#1-js组成" class="headerlink" title="1.js组成"></a>1.js组成</h5><blockquote><p><strong>js = ECMAScript + DOM + BOM + 高级</strong></p></blockquote><p><strong>ECMAScript</strong>（前身为欧洲计算机制造商协会）：JavaScript的语法规范</p><p><strong>DOM</strong>（Document Object Model 的文档对象模型简称）：JavaScript操作网页上元素的API</p><p><strong>BOM</strong>（Browser Object Model 的浏览器对象模型简称）：JavaScript操作浏览器部分功能的API</p><h5 id="2-记录一些常用的方法"><a href="#2-记录一些常用的方法" class="headerlink" title="2.记录一些常用的方法"></a>2.记录一些常用的方法</h5><p>字符串：</p><table><thead><tr><th>名</th><th></th></tr></thead><tbody><tr><td>trim()</td><td>去除字符串的左右空格，不包括在中间的空格</td></tr><tr><td>indexOf()</td><td>返回一个字符在字符串的位置</td></tr><tr><td>split()</td><td>把字符串分割成字符串数组</td></tr><tr><td>slice()</td><td>得到一个字符串的一部分</td></tr></tbody></table><p>json：</p><table><thead><tr><th>名</th><th></th></tr></thead><tbody><tr><td>JSON.parse(json name)</td><td>json<strong>字符串</strong>转成js对象  //json格式是一个字符串</td></tr><tr><td>JSON.stringify(object name)</td><td>js值(对象或数组)转成json字符串</td></tr></tbody></table><p>算了，用的时候还不如直接查参考手册</p><h5 id="3-js-promise"><a href="#3-js-promise" class="headerlink" title="3.js promise"></a>3.js promise</h5><p>之前一直听说promise，但不知道是何，现在才来进行一个理解。</p><p>promise是es6新增的一个类，专门为了简单化异步编程而进行。避免了层层的回调函数，将回调函数转换成一条执行链。</p><p>Promise 构造函数只有一个参数，是一个函数，这个函数在构造之后会直接被异步运行，所以我们称之为起始函数。起始函数包含两个参数 <strong>resolve 和 reject</strong>。resolve表示函数正常运行，reject表示出现错误时运行</p><p><strong>在初始化Promise实例对象的时候，Promise的状态为pending；在调用resolve回调函数的时候，Promise的状态为fullfilled，表示成功状态；在调用reject回调函数的时候，Promise的状态为rejected，表示失败状态；</strong></p><p>Promise 类有 .then() .catch() 和 .finally() 三个方法，这三个方法的参数都是一个函数，<strong>.then()</strong> 可以将参数中的函数添加到当前 Promise 的正常执行序列，.catch() 则是设定 Promise 的异常处理序列，.finally() 是在 Promise 执行的最后一定会执行的序列。 .then() 传入的函数会按顺序依次执行，有任何异常都会直接跳到 catch 序列。<strong>then()方法指定的回调函数将在当前脚本所有同步任务执行完后才会执行</strong></p><p>如果 then 中返回的是一个 Promise 对象，那么<strong>下一个 then</strong> 将相当于对这个返回的 Promise 进行操作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 执行异步操作</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行异步操作成功,此时修改promise的状态fullfilled</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行异步操作成功,此时修改promise的状态rejected</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// promise的状态fullfilled的操作</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// promise的状态rejected的操作</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//111 222 成功 success</span></code></pre><p>一般来说，调用resolve或reject以后，Promise 的使命就完成了，后继操作应该放到then方法里面，而不应该直接写在resolve或reject的后面。<strong>resolve或reject总是在本轮事件循环的末尾执行</strong>，所以最后才打印success。当调用resolve()函数将promise状态改变成fullfilled时，后面的reject()就不会执行</p><p><strong>使用 promise 的经验法则</strong></p><ol><li>使用异步或阻塞代码时，请使用 promise。</li><li>为了代码的可读性，resolve 方法对待 then, reject 对应 catch 。</li><li>确保同时写入.catch 和 .then 方法来实现所有的 promise。</li><li>如果在这两种情况下都需要做一些事情，请使用 .finally。</li><li>我们只有一次改变每个promise (单一原则)。</li><li>我们可以在一个promise 中添加多个处理程序。</li><li>Promise对象中所有方法的返回类型，无论是静态方法还是原型方法，都是Promise。</li><li>在Promise.all中，无论哪个promise 首先未完成，promise 的顺序都保持在值变量中。</li></ol><hr><p><strong>重点异步函数</strong>：async 和 await。方便，简洁.但await 指令后必须跟着一个 Promise，异步函数会在这个 Promise 运行中暂停，直到其运行结束再继续运行。</p><p>例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"First"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span> <span class="token string">"Second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token string">"Third"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="4-DOM文档对象模型"><a href="#4-DOM文档对象模型" class="headerlink" title="4.DOM文档对象模型"></a>4.DOM文档对象模型</h5><p>通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。</p><p>改变 <strong>HTML</strong> 元素的属性，请使用这个语法：</p><p>document.getElementById(<em>id</em>).<em>attribute=新属性值</em></p><hr><p>改变 HTML 元素的<strong>样式</strong>，请使用这个语法：</p><p>document.getElementById(<em>id</em>).style.<em>property</em>=<em>新样式</em></p><hr><p>添加<strong>监听</strong>事件。addEventListener() 方法允许向同一个元素添加多个事件，且不会覆盖已存在的事件。不论是同一种类型，还是不同的类型</p><p><em>element</em>.addEventListener(<em>event, function, useCapture</em>);</p><p>第一个参数是事件的类型 (如 “click” 或 “mousedown”).</p><p>第二个参数是事件触发后调用的函数。</p><p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p><hr><p><strong>冒泡，捕获</strong>定义了事件触发的顺序</p><p>在 <em>冒泡</em> 中，<strong>内部</strong>元素的事件会先被触发，然后再触发外部元素</p><p>在 <em>捕获</em> 中，<strong>外部</strong>元素的事件会先被触发，然后才会触发内部元素的事件</p><h5 id="5-BOM浏览器对象模型"><a href="#5-BOM浏览器对象模型" class="headerlink" title="5.BOM浏览器对象模型"></a>5.BOM浏览器对象模型</h5><p>所有 JavaScript 全局对象、函数以及变量均自动成为 <strong>window 对象</strong>的成员。</p><p>window的常用方法：</p><ul><li>window.innerHeight - 浏览器窗口的内部高度(包括滚动条)</li><li>window.innerWidth - 浏览器窗口的内部宽度(包括滚动条)</li><li>window.open() - 打开新窗口</li><li>window.close() - 关闭当前窗口</li><li>window.moveTo() - 移动当前窗口</li><li>window.resizeTo() - 调整当前窗口的尺寸</li></ul><hr><p>window.<strong>location</strong> 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。使用时可省略window。</p><ul><li>location.href 属性返回当前页面的 URL。// <a href="https://www.runoob.com/js/js-window-location.html" target="_blank" rel="noopener">https://www.runoob.com/js/js-window-location.html</a></li><li>location.pathname 属性返回 URL 的路径名。 // /js/js-window-location.html</li><li>location.assign() 方法加载新的文档，打开新的网页。// window.location.assign(“<a href="https://www.runoob.com&quot;" target="_blank" rel="noopener">https://www.runoob.com&quot;</a>)</li></ul><hr><ul><li>history.back() - 与在浏览器点击后退按钮相同</li><li>history.forward() - 与在浏览器中点击向前按钮相同</li></ul><hr><p><strong>计时事件</strong></p><ul><li>setInterval(fucntion,time) - 间隔指定的毫秒数<strong>不停地执行</strong>指定的代码。</li><li>setTimeout(function,time) - 在指定的毫秒数后执行指定代码。</li><li>clearInterval() 方法用于停止 setInterval() 方法执行的函数代码。</li><li>clearTimeout() 方法用于停止执行setTimeout()方法的函数代码。</li></ul><hr><p><strong>cookie</strong></p><p>Cookie 的作用就是用于解决 “如何记录客户端的用户信息”.当用户访问 web 页面时，他的名字可以记录在 cookie 中.下一次访问就可以通过cookie读取用户访问记录。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建 cookie 如下所示：</span>document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">"username=John Doe"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取 cookie：</span><span class="token keyword">var</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span></code></pre><h5 id="6-this"><a href="#6-this" class="headerlink" title="6.this"></a>6.this</h5><p>根据函数的调用方式的不同，this会指向不同的对象：【重要】</p><ul><li>1.以函数的形式调用时，this永远都是window。比如<code>fun();</code>相当于<code>window.fun();</code></li><li>2.以方法的形式调用时，this是调用方法的那个对象</li><li>3.以构造函数的形式调用时，this是新创建的那个对象</li><li>4.使用call和apply调用时，this是指定的那个对象</li></ul><h5 id="7-原型对象-原型链"><a href="#7-原型对象-原型链" class="headerlink" title="7.原型对象(原型链)"></a>7.原型对象(原型链)</h5><p><a href="http://www.cpengx.cn/p/357.html" target="_blank" rel="noopener">具体细节查看</a></p><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><p>我们所创建的每一个函数，解析器都会向函数中添加一个属性 prototype。这个属性对应着一个对象，这个对象就是我们所谓的原型对象。每个原型都有一个 constructor 属性指向关联的构造函数 实例原型指向构造函数</p><p>当函数以<strong>构造函数</strong>的形式调用时，它所创建的实例对象中都会有一个隐含的属性，指向该构造函数的原型，我们可以通过<strong>proto</strong>来访问该属性</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印结果：[object object]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per1<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意后面是构造函数的prototype，前面为实例的__proto__</span><span class="token comment" spellcheck="true">// 打印结果：true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p><code>实例.__proto__</code> 和 <code>构造函数.prototype</code>都指的是原型对象。</p><img src="https://upload-images.jianshu.io/upload_images/1490251-e7476a8697e97aab.png?imageMogr2/auto-orient/strip|imageView2/2/w/567/format/webp" alt="图解" style="zoom:80%;" /><p>原型对象就相当于一个<strong>公共</strong>的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中。</p><h6 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h6><p>原型对象也是对象，所以它也有原型，当我们使用或访问一个对象的属性或方法时：</p><ul><li>它会先在对象自身中寻找，如果有则直接使用；</li><li>如果没有则会去原型对象中寻找，如果找到则直接使用；</li><li>如果没有则去原型的原型中寻找，直到找到Object对象的原型。</li><li>Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回 null</li></ul><img src="https://upload-images.jianshu.io/upload_images/1490251-3089c135df71c956.png?imageMogr2/auto-orient/strip|imageView2/2/w/604/format/webp" alt="原型链" style="zoom:60%;" />]]></content>
      
      
      
        <tags>
            
            <tag> js promise prototype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则入门笔记</title>
      <link href="/2020/08/24/%E6%AD%A3%E5%88%99%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/24/%E6%AD%A3%E5%88%99%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>大概就是网上的30分钟入门正则表达的一个个人总结。<a href="https://www.runoob.com/w3cnote/regular-expression-30-minutes-tutorial.html" target="_blank" rel="noopener">链接</a></p><p>不过就只是进行一个简单的学习和简单实用。<a href="https://blog.csdn.net/ZYC88888/article/details/98479629" target="_blank" rel="noopener">一些方便常用的正则早有人进行了总结</a></p><h5 id="1-元字符"><a href="#1-元字符" class="headerlink" title="1.元字符"></a>1.元字符</h5><p>(\b)，代表单词的开头或者结尾，并不匹配任何字符，只表明是匹配这个位置。</p><p>(.)元字符，匹配除了换行符以外的任意字符。(*)同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定(*)前边的内容可以连续重复使用任意次(可以是0次)以使整个表达式得到匹配。因此，(.*)连在一起就意味着任意数量的不包含换行的字符。如果是(+),这表示至少匹配一次或更多次</p><table><thead><tr><th align="left">代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">匹配除换行符以外的任意字符</td></tr><tr><td align="left">\w</td><td align="left">匹配字母或数字或下划线或汉字</td></tr><tr><td align="left">\s</td><td align="left">匹配任意的空白符</td></tr><tr><td align="left">\d</td><td align="left">匹配数字</td></tr><tr><td align="left">\b</td><td align="left">匹配单词的开始或结束</td></tr><tr><td align="left">^</td><td align="left">匹配字符串的开始</td></tr><tr><td align="left">$</td><td align="left">匹配字符串的结束</td></tr></tbody></table><h5 id="2-匹配重复"><a href="#2-匹配重复" class="headerlink" title="2.匹配重复"></a>2.匹配重复</h5><p>就是进行多少次重复的匹配。一般是为了减少正则表达式的长度。</p><table><thead><tr><th align="left">代码/语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">重复零次或更多次</td></tr><tr><td align="left">+</td><td align="left">重复一次或更多次</td></tr><tr><td align="left">?</td><td align="left">重复零次或一次</td></tr><tr><td align="left">{n}</td><td align="left">重复n次</td></tr><tr><td align="left">{n,}</td><td align="left">重复n次或更多次</td></tr><tr><td align="left">{n,m}</td><td align="left">重复n到m次</td></tr></tbody></table><p>例：^\w+匹配一行的第一个单词或整个字符串的第一个单词</p><h5 id="3-字符类"><a href="#3-字符类" class="headerlink" title="3.字符类"></a>3.字符类</h5><p>为了解决一些特定的字符没有专门的匹配元字符，使用<strong>[]</strong>方括号包含这些特殊字符就行。</p><p>例：[.?!]匹配标点符号(.或?或!)。[0-9]代表的含意与\d就是完全一致的</p><p>\(?0\d{2}[) -]?\d{8}  首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个(方括号中间有一个<strong>空格</strong>)，它出现1次或不出现(?)，最后是8个数字(\d{8})。匹配例如(010)88886666，或022-22334455，或02912345678。</p><h5 id="4-分枝条件"><a href="#4-分枝条件" class="headerlink" title="4.分枝条件"></a>4.分枝条件</h5><p><strong>|</strong>，就是当成多个匹配式进行匹配。</p><p>例：0\d{2}-\d{8}|0\d{3}-\d{7}这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。但要注意顺序，从左往右进行匹配，当匹配成功之后，后面的就不会再进行匹配了，有时候会出现一些奇怪的问题</p><h5 id="5-分组"><a href="#5-分组" class="headerlink" title="5.分组"></a>5.分组</h5><p>重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号<strong>()</strong>来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了</p><h5 id="6-反义"><a href="#6-反义" class="headerlink" title="6.反义"></a>6.反义</h5><p>查找不属于某个能简单定义的字符类的字符</p><table><thead><tr><th align="left">代码/语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">\W</td><td align="left">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td align="left">\S</td><td align="left">匹配任意不是空白符的字符</td></tr><tr><td align="left">\D</td><td align="left">匹配任意非数字的字符</td></tr><tr><td align="left">\B</td><td align="left">匹配不是单词开头或结束的位置</td></tr><tr><td align="left">[^x]</td><td align="left">匹配除了x以外的任意字符</td></tr><tr><td align="left">[^aeiou]</td><td align="left">匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><p>例：\S+匹配不包含空白符的字符串。&lt;a[^&gt;]+&gt;匹配用尖括号括起来的以a开头的字符串。</p><h5 id="7-后向引用"><a href="#7-后向引用" class="headerlink" title="7.后向引用"></a>7.后向引用</h5><p>大概就是在后面的正则使用前面的正则匹配出来的分组结果。具体查看文章开头链接</p><table><thead><tr><th align="left">分类</th><th align="left">代码/语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">捕获</td><td align="left">(exp)</td><td align="left">匹配exp,并捕获文本到自动命名的组里。exp为表达式</td></tr><tr><td align="left">(?<name>exp)</td><td align="left">匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td><td align="left"></td></tr><tr><td align="left">(?:exp)</td><td align="left">匹配exp,不捕获匹配的文本，也不给此分组分配组号</td><td align="left"></td></tr><tr><td align="left">零宽断言</td><td align="left">(?=exp)</td><td align="left">匹配exp前面的位置</td></tr><tr><td align="left">(?&lt;=exp)</td><td align="left">匹配exp后面的位置</td><td align="left"></td></tr><tr><td align="left">(?!exp)</td><td align="left">匹配后面跟的不是exp的位置</td><td align="left"></td></tr><tr><td align="left">(?&lt;!exp)</td><td align="left">匹配前面不是exp的位置</td><td align="left"></td></tr><tr><td align="left">注释</td><td align="left">(?#comment)</td><td align="left">这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td></tr></tbody></table><p>例：\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)</p><h5 id="8-零宽断言"><a href="#8-零宽断言" class="headerlink" title="8.零宽断言"></a>8.零宽断言</h5><p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。</p><p>例：(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。</p><p>(?&lt;=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</p><p>同理也有负向零宽断言</p><p>例：零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</p><p>同理，我们可以用(?&lt;!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字</p><h5 id="9-注释"><a href="#9-注释" class="headerlink" title="9.注释"></a>9.注释</h5><p>小括号通过语法(?#comment)来包含注释。例如：2[0-4]\d(?#200-249)|25<a href="?#250-255">0-5</a>|[01]?\d\d?(?#0-199)</p><h5 id="10-贪婪匹配和懒惰匹配"><a href="#10-贪婪匹配和懒惰匹配" class="headerlink" title="10.贪婪匹配和懒惰匹配"></a>10.贪婪匹配和懒惰匹配</h5><p>就是在匹配的时候，其结果是匹配竟可能长的字符串，还是竟可能短短的字符串</p><table><thead><tr><th align="left">代码/语法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">*?</td><td align="left">重复任意次，但尽可能少重复</td></tr><tr><td align="left">+?</td><td align="left">重复1次或更多次，但尽可能少重复</td></tr><tr><td align="left">??</td><td align="left">重复0次或1次，但尽可能少重复</td></tr><tr><td align="left">{n,m}?</td><td align="left">重复n到m次，但尽可能少重复</td></tr><tr><td align="left">{n,}?</td><td align="left">重复n次以上，但尽可能少重复</td></tr></tbody></table><p>例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。</p><p>a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）</p><h4 id="特别"><a href="#特别" class="headerlink" title="特别"></a>特别</h4><p>在js里面的正则似乎跟前面的正则有些不同</p><p>其语法为：</p><pre class=" language-js"><code class="language-js"><span class="token operator">/</span>正则表达式主体<span class="token operator">/</span><span class="token function">修饰符</span><span class="token punctuation">(</span>可选<span class="token punctuation">)</span>例：<span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex">/^\d+\.\d+$/g</span>  <span class="token comment" spellcheck="true">//匹配是否带有小数</span></code></pre><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">执行对大小写不敏感的匹配。</td></tr><tr><td align="left">g</td><td align="left">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td align="left">m</td><td align="left">执行多行匹配。</td></tr></tbody></table><h5 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h5><p>方括号用于查找某个范围内的字符：</p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[abc]</td><td align="left">查找方括号之间的任何字符。</td></tr><tr><td align="left">[0-9]</td><td align="left">查找任何从 0 至 9 的数字。</td></tr><tr><td align="left">(x|y)</td><td align="left">查找任何以 | 分隔的选项。</td></tr></tbody></table><p>元字符是拥有特殊含义的字符：</p><table><thead><tr><th align="left">元字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\d</td><td align="left">查找数字。</td></tr><tr><td align="left">\s</td><td align="left">查找空白字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配单词边界。</td></tr><tr><td align="left">\uxxxx</td><td align="left">查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><p>量词:</p><table><thead><tr><th align="left">量词</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">n+</td><td align="left">匹配任何包含至少一个 <em>n</em> 的字符串。</td></tr><tr><td align="left">n*</td><td align="left">匹配任何包含零个或多个 <em>n</em> 的字符串。</td></tr><tr><td align="left">n?</td><td align="left">匹配任何包含零个或一个 <em>n</em> 的字符串。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> regexp 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目axios封装与mock等使用</title>
      <link href="/2020/08/22/vue%E9%A1%B9%E7%9B%AEaxios%E5%B0%81%E8%A3%85%E4%B8%8Emock%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/22/vue%E9%A1%B9%E7%9B%AEaxios%E5%B0%81%E8%A3%85%E4%B8%8Emock%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>大概就是对B站老陈的一个vue企业项目视频的细节抄写</p><h5 id="1-axios封装和请求响应劫持"><a href="#1-axios封装和请求响应劫持" class="headerlink" title="1.axios封装和请求响应劫持"></a>1.axios封装和请求响应劫持</h5><p>对将后端传回的数据，前端需要自己对数据进行一个拦截检查，看数据是否正确。</p><pre class=" language-js"><code class="language-js"><span class="token function">interceptors</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>        instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//处理config</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'拦截和处理请求'</span><span class="token punctuation">)</span>            config<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span><span class="token string">"helloworld"</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>            <span class="token keyword">return</span> config        <span class="token punctuation">}</span><span class="token punctuation">)</span>        instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//处理响应</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"处理响应"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//console.log(res)</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span>data        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//请求出问题，处理问题</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>error<span class="token punctuation">:</span><span class="token string">"网络出错了"</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>跨域的处理，一般是在后端设置一个中间件，允许进行跨域请求</p><pre class=" language-js"><code class="language-js"> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-headers'</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>或者设置一个代理服务，使用8080的本地端口作为代理去进行后端数据请求，之后再通过8080端口将数据返回。</p><p>设置代理服务器，使用vue-cli的自带配置vue.config.js。在vue-cli官网配置指南里面有专门的文档</p><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//设置代理服务器跨域请求</span>        proxy<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'/api'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                target<span class="token punctuation">:</span><span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>                pathRewrite<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//重写访问路径，这里是变为空</span>                    <span class="token string">'^/api'</span><span class="token punctuation">:</span><span class="token string">""</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="2-mock-js模拟后端数据"><a href="#2-mock-js模拟后端数据" class="headerlink" title="2.mock.js模拟后端数据"></a>2.mock.js模拟后端数据</h5><p>通过劫持axios请求，将数据返回。路径可使用正则表达式</p><p>首先需要在main.js里面进行引入，如果是在开发模式。需要npm安装。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token punctuation">;</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/api/posi'</span><span class="token punctuation">,</span>position<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//position和index_entry是数据。需要自己定义数据export dedfault导出</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/api/index_entry'</span><span class="token punctuation">,</span>index_entry<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//或者</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'/api/user'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token string">"老陈"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    gender<span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span><span class="token string">"帅"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>特别的重点是mock可进行随机数据生成，不用自己去想这些随机数据</p><pre class=" language-js"><code class="language-js"><span class="token string">'name|min-max'</span><span class="token punctuation">:</span> stringMock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"string|1-10"</span><span class="token punctuation">:</span> <span class="token string">"★"</span><span class="token comment" spellcheck="true">//结果为1-10颗★</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token string">'name|min-max'</span><span class="token punctuation">:</span> numberMock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"number|1-100"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token comment" spellcheck="true">//结果为1-100里的一个数字</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a href="http://mockjs.com/examples.html#Image" target="_blank" rel="noopener">具体详细操作查看官方文档</a></p><h5 id="3-布局"><a href="#3-布局" class="headerlink" title="3.布局"></a>3.布局</h5><p>对于一个项目来说，需要响应式的进行布局，可以在任何常用设备上的布局比例不变，一般使用响应式进行操作布局。此项目使用rem布局，大概就是可根据屏幕的大小进行字体的大小调整。</p><p>相当于先确定一个px大小，例如100px为一个标准1rem。后面都通过这个标准1rem进行调整大小。</p><h5 id="4-图标使用"><a href="#4-图标使用" class="headerlink" title="4.图标使用"></a>4.图标使用</h5><p>一般可在iconfont里面找到想要的图标并添加进购物车，选择fontclass方式进行下载到本地，之后里面会有一个html文件教你怎么进行使用，一般是将图标文件放入到项目里的public文件夹里面的一个样式文件夹。之后在public里面的index.html里面进行css文件引入。</p><p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200823102646390.png" alt="image-20200823102646390"></p><h5 id="5-组件"><a href="#5-组件" class="headerlink" title="5.组件"></a>5.组件</h5><p>全部导入一般是用在开发环境之下，真正的使用都是按需使用，具体查看官方文档</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全部导入</span><span class="token comment" spellcheck="true">//main.js</span><span class="token keyword">import</span> Vant <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'vant/lib/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vant<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//xxx.vue</span><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'vant/lib/button'</span><span class="token punctuation">;</span>components<span class="token punctuation">:</span> <span class="token punctuation">{</span>Button<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//需要注册</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//按需导入，需要npm安装一个babel-plugin-import插件，并在babel.config.js里面进行一些修改，具体查看官方文档</span><span class="token comment" spellcheck="true">//xxx.vue</span><span class="token keyword">import</span> <span class="token punctuation">{</span> NavBar<span class="token punctuation">,</span>Icon <span class="token punctuation">,</span>Swipe<span class="token punctuation">,</span> SwipeItem<span class="token punctuation">,</span>Grid<span class="token punctuation">,</span> GridItem<span class="token punctuation">,</span>Image <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span>components<span class="token punctuation">:</span> <span class="token punctuation">{</span>NavBar<span class="token punctuation">,</span>Icon <span class="token punctuation">,</span>Swipe<span class="token punctuation">,</span> SwipeItem<span class="token punctuation">,</span>Grid<span class="token punctuation">,</span> GridItem<span class="token punctuation">,</span>Image <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//依旧需要注册</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js初学习</title>
      <link href="/2020/08/04/node-js%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/08/04/node-js%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>多个地方的node学习，<a href="https://www.runoob.com/nodejs/nodejs-http-server.html" target="_blank" rel="noopener">包括菜鸟教程</a>，B站，<a href="http://www.cpengx.cn/p/386.html" target="_blank" rel="noopener">老陈这些</a>。</p><p>1.介绍</p><p>主要用于编写服务端程序，类似于javaweb里面的jsp这些。</p><p><strong>二、Node.js与javaScript</strong></p><table><thead><tr><th align="left">javaScript</th><th align="left">Node.js</th></tr></thead><tbody><tr><td align="left">客户端技术，运行于浏览器中</td><td align="left">服务器端技术 ，与php,jsp等是类似的技术</td></tr><tr><td align="left">有多种解释器可以使用，如IE的Chakra,FF的猴子系列，Chrome的V8等等</td><td align="left">只能运行于基于V8引擎改进而来的运行时环境</td></tr><tr><td align="left">因为解释器有多种，所以存在代码兼容性问题</td><td align="left">只有一种解释器，所以不存在代码兼容性问题</td></tr><tr><td align="left">支持ES对象，自定义对象，BOM&amp;DOM对象</td><td align="left">支持ES对象，自定义对象，Node.js扩展对象（大量）</td></tr><tr><td align="left">主要用于网页DOM元素的操作，实现用户交互效果</td><td align="left">主要用于实现服务器端运行逻辑，如文件系统操作，数据库访问，其他服务器调用等</td></tr></tbody></table><p>3.Node.js 应用是由哪几部分组成的：</p><ol><li><p><strong>引入 required 模块：</strong>我们可以使用 <strong>require</strong> 指令来载入 Node.js 模块。当需要导入一个文件，在被导入的文件里需要通过module.exports导出</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//http是内置的模块</span><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./fs.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入一个fs.js文件</span></code></pre></li><li><p><strong>创建服务器：</strong>服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。</p><pre class=" language-js"><code class="language-js">http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 发送 HTTP 头部 </span>    <span class="token comment" spellcheck="true">// HTTP 状态值: 200 : OK</span>    <span class="token comment" spellcheck="true">// 内容类型: text/plain</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/plain'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送响应数据 "Hello World"</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello World\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//端口号</span></code></pre></li><li><p><strong>接收请求与响应请求</strong> 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p></li></ol><p>4.NPM</p><p>是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题</p><p>​    1.使用npm安装模块</p><pre class=" language-powershell"><code class="language-powershell">$ npm install &lt;Module Name><span class="token keyword">var</span> express = require<span class="token punctuation">(</span><span class="token string">'modele name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>使用require引用</code></pre><pre class=" language-powershell"><code class="language-powershell">npm install express          <span class="token comment" spellcheck="true"># 本地安装</span>npm install express <span class="token operator">-</span>g   <span class="token comment" spellcheck="true"># 全局安装</span></code></pre><h6 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h6><ul><li>\1. 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li><li>\2. 可以通过 require() 来引入本地安装的包。</li></ul><h6 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h6><ul><li>\1. 将安装包放在 /usr/local 下或者你 node 的安装目录。</li><li>\2. 可以直接在命令行里使用</li></ul><p>2.packag.json</p><p>package.json 位于模块的目录下，用于定义包的属性。位于 node_modules/modules name/package.json </p><p>在里面的最直观的是<strong>dependencies</strong> - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</p><p>5.回调函数，为了提高并发请求的处理，可不阻塞的执行代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"程序执行结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果</span>$ node main<span class="token punctuation">.</span>js程序执行结束<span class="token operator">!</span>菜鸟教程官网地址：www<span class="token punctuation">.</span>runoob<span class="token punctuation">.</span>com</code></pre><p>6.EventEmitter</p><p>一个对事件的处理函数，类似于之前的sokect</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 引入 events 模块</span><span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建 eventEmitter 对象</span><span class="token keyword">var</span> EventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//监听事件</span>event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'arg1'</span><span class="token punctuation">,</span><span class="token string">'arg2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//触发事件,可带参数</span></code></pre><p>7.buffer缓冲区</p><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。但在<strong>处理像TCP流或文件流</strong>时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。有自己的特定编码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建一个长度为 10、且用 0 填充的 Buffer。</span><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>、<span class="token comment" spellcheck="true">//写入缓冲区,如果 buffer 空间不足， 则只会写入部分字符串</span>len <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"www.runoob.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"写入字节数 : "</span><span class="token operator">+</span>  len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写入字节数：14</span><span class="token comment" spellcheck="true">//从缓冲区读数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//使用 'ascii' 编码, 并输出: www.r，后面两个参数为起始位置和结束位置</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 'utf8' 编码, 并输出: www.r</span><span class="token comment" spellcheck="true">//将buffer转换为json,当字符串化一个 Buffer 实例时，JSON.stringify() 会隐式地调用该 toJSON()。返回json对象</span><span class="token keyword">const</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>后面还有一些方法，在<a href="https://www.runoob.com/nodejs/nodejs-buffer.html" target="_blank" rel="noopener">菜鸟</a>那里需要的时候看吧。</p><p>8.stream</p><p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）</p><p>所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：</p><ul><li><strong>data</strong> - 当有数据可读时触发。</li><li><strong>end</strong> - 没有更多的数据可读时触发。</li><li><strong>error</strong> - 在接收和写入过程中发生错误时触发。</li><li><strong>finish</strong> - 所有数据已被写入到底层系统时触发。</li></ul><p><a href="https://www.runoob.com/nodejs/nodejs-stream.html" target="_blank" rel="noopener">具体看菜鸟</a></p><p>9.模块化</p><p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。</p><p>Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>thyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>         name <span class="token operator">=</span> thyName<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello '</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Hello<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行导出</span><span class="token keyword">var</span> Hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行引入 </span>hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hello<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'BYVoid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>10.函数</p><p>一个函数可以作为另一个函数的参数,也可以在传递参数的地方直接定义函数.</p><p>11.路由</p><p>结合之下vue的路由来看基本没太大的变化，更多的是多了些关于相对底层的原理实现。</p><p><strong>setTimeout(cb, ms)</strong> 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：setTimeout() 只执行一次指定函数。</p><p><strong>setInterval(cb, ms)</strong> 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。</p><p>12.node常用工具<strong>util</strong> </p><p>util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心 JavaScript 的功能 过于精简的不足。</p><p>使用方法如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://www.runoob.com/nodejs/nodejs-util.html" target="_blank" rel="noopener">具体函数看菜鸟</a></p><p>13.文件系统</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//fileSystem</span></code></pre><h6 id="异步和同步"><a href="#异步和同步" class="headerlink" title="异步和同步"></a>异步和同步</h6><p>Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。</p><p>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。建议使用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。就是可以直接执行读写文件后面的代码指令，而不需要等待文件读写完成。</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//回调错误函数</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"异步读取: "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同步读取，主要看那sync</span><span class="token keyword">var</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="打开文件等"><a href="#打开文件等" class="headerlink" title="打开文件等"></a>打开文件等</h6><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> flags<span class="token punctuation">[</span><span class="token punctuation">,</span> mode<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//flags为文件打开行为</span>fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取文件信息，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性</span>fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">'/Users/liuht/code/itbilu/demo/fs.js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//类似如此</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><a href="https://www.runoob.com/nodejs/nodejs-fs.html" target="_blank" rel="noopener">具体参数参考菜鸟</a></p><h6 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h6><pre class=" language-java"><code class="language-java">fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span></code></pre><ul><li><strong>file</strong> - 文件名或文件描述符。</li><li><strong>data</strong> - 要写入文件的数据，可以是 String(字符串) 或 Buffer(缓冲) 对象。</li><li><strong>options</strong> - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8, 模式为 0666 ， flag 为 ‘w’,该方法写入的内容会覆盖旧的文件内容。</li><li><strong>callback</strong> - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回。</li></ul><h6 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h6><pre><code>fs.read(fd, buffer, offset, length, position, callback);//示例var buf = new Buffer.alloc(1024);fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){      if (err){         console.log(err);      }      console.log(bytes + &quot;  字节被读取&quot;);      // 仅输出读取的字节      if(bytes &gt; 0){         console.log(buf.slice(0, bytes).toString());      }   });</code></pre><ul><li><strong>fd</strong> - 通过 fs.open() 方法返回的文件描述符。</li><li><strong>buffer</strong> - 数据写入的缓冲区。</li><li><strong>offset</strong> - 缓冲区写入的写入偏移量。</li><li><strong>length</strong> - 要从文件中读取的字节数。</li><li><strong>position</strong> - 文件读取的起始位置，如果 position 的值为 null，则会从当前文件指针的位置读取。</li><li><strong>callback</strong> - 回调函数，有三个参数err, bytesRead, buffer，err 为错误信息， bytesRead 表示读取的字节数，buffer 为缓冲区对象。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript初学习</title>
      <link href="/2020/07/29/typescript%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/29/typescript%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>typescript学习,下面简称ts.有些语法类似于java</p><p>typescript是js的一个超集，添加了一些新的扩展.主要目的是为了开发大型应用。</p><ul><li>类型批注和编译时类型检查</li><li>类型推断</li><li>类型擦除</li><li>接口</li><li>枚举</li><li>Mixin</li><li>泛型编程</li><li>名字空间</li><li>元组</li><li>Await</li></ul><p>2.使用<strong>npm install -g typescript</strong>安装进行使用，<strong>tsc</strong>是使用的标识，<strong>.ts</strong>是typescript文件扩展名。执行以下命令将 TypeScript 转换为 JavaScript 代码：</p><pre class=" language-powershell"><code class="language-powershell">tsc test<span class="token punctuation">.</span>ts</code></pre><p>3.TypeScript 程序由以下几个部分组成：</p><ul><li>模块</li><li>函数</li><li>变量</li><li>语句和表达式</li><li>注释</li></ul><p>每一行指令都是一段语句，可使用分号进行语句隔开，使合理。</p><p>4.TypeScript 面向对象编程实例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Site</span> <span class="token punctuation">{</span>    <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> obj<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 函数定义</span><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 返回一个字符串，需要写明返回类型</span>    <span class="token keyword">return</span> <span class="token string">"Hello World"</span> <span class="token punctuation">}</span> </code></pre><p>编译后生成的 JavaScript 代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Site <span class="token operator">=</span> <span class="token comment" spellcheck="true">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">Site</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    Site<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Site<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h5 id="1-基础类型"><a href="#1-基础类型" class="headerlink" title="1.基础类型"></a>1.基础类型</h5><p>any,number,string,boolean,</p><p>数组（let arr: number[] = [1, 2];），</p><p>元组（let x: [string, number];），</p><p>枚举（enum Color {Red, Green, Blue};）</p><p>void，null，undefined，never</p><p><strong>类型断言</strong>：用来手动指定一个值的类型，即允许变量从一种类型更改为另一种类型。</p><p>语法格式：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//&lt;类型>值 或 值 as 类型</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token keyword">var</span> str2<span class="token punctuation">:</span>number <span class="token operator">=</span> <span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">&lt;</span>any<span class="token operator">></span> str   <span class="token comment" spellcheck="true">//str、str2 是 string 类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span></code></pre><p>ts有些特殊的变量类型，如<strong>any</strong>，一般用于用户的输入，不确定会输入什么。下面定义了存储各种类型的数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arrayList<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'fine'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ts的变量声明格式</span><span class="token keyword">let</span> myts<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> uname<span class="token punctuation">:</span>string <span class="token operator">=</span> <span class="token string">"Runoob"</span><span class="token punctuation">;</span> arrayList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></code></pre><p>ts里定义函数的参数可设置<strong>可选</strong>(通过?)，在参数后面需要指明参数类型。还有默认参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//可设置默认值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span>        <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Adams"</span><span class="token punctuation">,</span> <span class="token string">"Sr."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 错误，</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Adams"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 正确</span></code></pre><p>ts的剩余参数，指我们不知道需要传入多少参数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">:</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//一般是数组</span>    <span class="token keyword">var</span> i<span class="token punctuation">;</span>       <span class="token keyword">var</span> sum<span class="token punctuation">:</span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ts的变量声明格式</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"和为："</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> </code></pre><p>ts也可使用函数重载(函数名相同，参数不同)</p><p>ts数组可解构(将数组元素赋值给变量)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"Runoob"</span><span class="token punctuation">]</span> <span class="token keyword">var</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token comment" spellcheck="true">//解构，es6好像有新的解构方式(...)</span></code></pre><p>有一些常用数组方法</p><ul><li>contact(),链接两个数组元素</li><li>forEach(),对每个元素进行一次回调函数</li><li>pop(),删除最后一个元素</li><li>push(),在末尾添加一个元素</li><li>slice(),选取数组的一部分</li></ul><p>ts元组，就是一个数组，但里面的元素类型不同。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mytuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"Runoob"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建元组</span></code></pre><p>ts联合类型，就是一个变量可以有多个类型，以（|）分开。还可形成联合类型数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> val<span class="token punctuation">:</span>string<span class="token operator">|</span>number val <span class="token operator">=</span> <span class="token number">12</span> val <span class="token operator">=</span> <span class="token string">"Runoob"</span> </code></pre><p>ts接口，还是interface定义一个抽象接口，当做一个类型进行使用。也可使用extend继承多个接口进行扩展</p><pre class=" language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>     firstName<span class="token punctuation">:</span>string<span class="token punctuation">,</span>     lastName<span class="token punctuation">:</span>string<span class="token punctuation">,</span>     sayHi<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>string <span class="token punctuation">}</span> <span class="token keyword">var</span> customer<span class="token punctuation">:</span>IPerson <span class="token operator">=</span> <span class="token punctuation">{</span>     firstName<span class="token punctuation">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span><span class="token string">"Hanks"</span><span class="token punctuation">,</span>     sayHi<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Hi there"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>ts类，面向对象编程,也可extend继承,不能继承父类的私有成员(方法和属性)和构造函数，不支持多继承，支持多重继承，可进行重写，和super调用父类属性和方法类可使用接口，使用关键字 implements，并将接口的属性作为类的属性使用。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">car</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 类作用域,可包含以下几个模块</span><span class="token comment" spellcheck="true">//字段 - 是类里面声明的变量。字段表示对象的有关数据。</span><span class="token comment" spellcheck="true">//构造函数 − 类实例化时调用，可以为类的对象分配内存。</span><span class="token comment" spellcheck="true">//方法 − 方法为对象要执行的操作。</span>    engine<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 构造函数 </span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>engine<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine     <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 方法 </span>    <span class="token function">disp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发动机为 :   "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>engine<span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token comment" spellcheck="true">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//js代码</span>    <span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方法 </span>    Car<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>disp <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发动机为 :   "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Car<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ts命名空间，为了解决重名问题。命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的，命名空间可嵌套。使用 <strong>namespace</strong> 来定义，</p><pre class=" language-typescript"><code class="language-typescript">namespace SomeNameSpaceName <span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ISomeInterfaceName</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SomeClassName</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//export导出表示可外部调用 </span><span class="token punctuation">}</span></code></pre><p>5.ts模块</p><p>模块是在其自身的作用域里执行，在外部不可见，除非使用 export进行导出，在其他需要使用的地方通过import进行导入。模块使用模块加载器去导入其它的模块，如服务于 Web 应用的 Require.js</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SomeInterface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代码部分</span><span class="token punctuation">}</span><span class="token keyword">import</span> someInterfaceRef <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./SomeInterface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6初学习</title>
      <link href="/2020/07/24/ES6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/24/ES6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>js的一种版本标准，只是为了学一些重点的新语法。进行一点记录，更细致的还是查看教程吧</p><p><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰的es6教程</a></p><p><a href="https://juejin.im/post/6844903959283367950" target="_blank" rel="noopener">掘金的总结</a></p><h4 id="1-箭头函数"><a href="#1-箭头函数" class="headerlink" title="1.箭头函数"></a>1.箭头函数</h4><p><strong>箭头函数的作用主要是定义匿名函数</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 转换成箭头函数</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>基本语法<strong>（参数）</strong>：</p><ul><li>匿名函数没有参数：() 不能省略，占位作用。<code>let foo = () =&gt; {};</code></li><li>只有一个参数：() 可以省略，也可以不省略。<code>let foo = a =&gt; {};</code></li><li>多个参数，() 不能省略。<code>let foo = (a,b) =&gt; {};</code></li></ul><p><strong>箭头函数的特点：</strong></p><p>1、不能做构造函数（不能实例化）</p><p>2、没有 arguments。 arguments就是函数带的实参，类似linux的argv，可用arguments获取调用的参数。</p><p><strong>3、箭头函数没有自己的this，箭头函数的this不是调用的时候决定的，this指向上下文环境。（意思：箭头函数的外层的是否有函数，如果有，箭头函数的this就是外层函数的this，如果没有，则为 window）。是由其定义的时候的上下文决定的，是固定的</strong></p><hr><h4 id="2-let-与-const"><a href="#2-let-与-const" class="headerlink" title="2.let 与 const"></a>2.let 与 const</h4><p>let 声明的变量只在 let 命令所在的代码块内有效。</p><p>const 声明一个只读的常量，一旦声明，常量的值就不能改变。const其实是让这个变量指向的地址数据不能发生变化，当变量是普通类型的时候，就不能变。当变量是数组，对象这些<strong>引用类型</strong>的时候，因为这个地址只是指向实际数据的指针，所以可以改变这些引用类型里面的数据，只是const定义的变量不能改变。</p><hr><h4 id="3-解构赋值"><a href="#3-解构赋值" class="headerlink" title="3.解构赋值"></a>3.解构赋值</h4><p>解构赋值是对赋值运算符的扩展，他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</p><p>可进行嵌套解构。</p><p><strong>从对象或数组中提取数据, 并赋值给变量(多个)</strong>。</p><p>注意当对对象进行解构的时候，<strong>在{}里面的变量名需要与被解构的对象key名相同</strong>，不然不能被解构。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">'kobe'</span><span class="token punctuation">,</span> age <span class="token punctuation">:</span> <span class="token number">39</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> name <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解构</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意这种方式，是对常见等号赋值的一种对称形式    source --> target</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span>x<span class="token punctuation">,</span>age<span class="token punctuation">:</span>y<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//referrence error</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//‘kobe’ 39</span></code></pre><hr><h4 id="4-展开符-三点运算符-…-rest参数"><a href="#4-展开符-三点运算符-…-rest参数" class="headerlink" title="4.展开符/三点运算符(…)/rest参数"></a>4.展开符/三点运算符(…)/rest参数</h4><p>用来取代 arguments 但比 arguments 灵活.里面的value是一个真正的数组，而不是像argument一样的伪数组</p><p>而且只能是函数参数的最后一个位置，即后面不能有其他的参数</p><p><img src="https://gitee.com/xxgw1997/Web-2/raw/master/12-ES6/images/9.png" alt="img"></p><p>或者可用来对数组进行扩展</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">...</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,2,3,4,5,6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 2 3 4 5 6</span></code></pre><hr><h4 id="5-async-函数"><a href="#5-async-函数" class="headerlink" title="5.async 函数"></a>5.async 函数</h4><p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token string">"helloAsync"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Promise {&lt;resolved>: "helloAsync"}</span><span class="token function">helloAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// helloAsync。async里的return返回会成为then()回调函数的参数。</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。</p><h4 id="6-class类"><a href="#6-class类" class="headerlink" title="6.class类"></a>6.class类</h4><p>为了方便创建对象。形似java里面的class类</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义类</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> newclass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建</span></code></pre><p><code>constructor</code>方法是类的默认方法，通过<code>new</code>命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p><hr><p>class可以继承。<strong>extends</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父类的constructor(x,y)，子类必须在constructor方法中调用super方法，主要构建父类的this对象。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父类的toString()</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p> <strong>现在对es6进行一个更细致的学习，主要是对阮一峰的es6教程的学习</strong></p><img src="https://user-gold-cdn.xitu.io/2020/3/15/170de4be1318de5e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="ES6ç¼©ç¥" style="zoom: 50%;" /><h4 id="1-模板字符串"><a href="#1-模板字符串" class="headerlink" title="1.模板字符串"></a>1.模板字符串</h4><p>使用 <strong>``</strong> 这两个反引号字符里面包围的字符串称为模板字符串，使用 <strong>${}</strong> 可使用正常作用域里面可使用的变量，函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x <span class="token operator">+</span> y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token comment" spellcheck="true">// "1 + 2 = 3"</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token comment" spellcheck="true">// "1 + 4 = 5"</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span>x <span class="token operator">+</span> obj<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span></code></pre><h4 id="2-尾调用，尾递归"><a href="#2-尾调用，尾递归" class="headerlink" title="2.尾调用，尾递归"></a>2.尾调用，尾递归</h4><p>在函数的<strong>return</strong>后面加一个函数，可以优化调用栈，在严格模式下启用</p>]]></content>
      
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vant,插件,混入,自定义指令</title>
      <link href="/2020/07/23/vant,%E6%8F%92%E4%BB%B6,%E6%B7%B7%E5%85%A5,%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/07/23/vant,%E6%8F%92%E4%BB%B6,%E6%B7%B7%E5%85%A5,%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h5 id="1-vuex插件"><a href="#1-vuex插件" class="headerlink" title="1.vuex插件"></a><strong>1.vuex插件</strong></h5><p>Vuex 的 store 接受 <code>plugins</code> 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接收 store 作为唯一参数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> myPlugin <span class="token operator">=</span> store <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当 store 初始化后调用</span>  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 每次 mutation 之后调用</span>    <span class="token comment" spellcheck="true">// mutation 的格式为 { type, payload }</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>然后像这样使用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>myPlugin<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在插件中不允许直接修改状态——类似于组件，只能通过提交 mutation 来触发变化,通过提交 mutation，插件可以用来同步数据源到 store</p><h5 id="2-混入-mixins"><a href="#2-混入-mixins" class="headerlink" title="2.混入(mixins:[])"></a><strong>2.混入</strong>(<strong>mixins:[]</strong>)</h5><p>相当于将各个部分分开，使其可复用，混在一起使用，与合在一起写的效果相同</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mixin <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定义需要混入的部分</span>  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>      foo<span class="token punctuation">:</span> <span class="token string">'abc'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//使用mixins使用混入</span>  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'goodbye'</span><span class="token punctuation">,</span>      bar<span class="token punctuation">:</span> <span class="token string">'def'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// => { message: "goodbye", foo: "abc", bar: "def" }</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>当出现同名属性，数据的时候，以组件中的为主，如果是<strong>钩子函数</strong>，则都会调用，但混入的会先被调用。</p><p>值为对象的选项，例如 <code>methods</code>、<code>components</code> 和 <code>directives</code>，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。</p><p>也可使用<strong>Vue.mixin({……})</strong>进行<strong>全局混入</strong></p><h5 id="3-自定义指令"><a href="#3-自定义指令" class="headerlink" title="3.自定义指令"></a><strong>3.自定义指令</strong></h5><p>使用Vue.directive进行指令创建</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注册一个全局自定义指令 `v-focus`</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当被绑定的元素插入到 DOM 中时……</span>  inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 聚焦元素，el表示的是使用这个指令的标签的html代码</span>    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//局部指令，使用directives定义</span>directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>  focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 指令的定义</span>    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在模板任何标签都可以使用</span><span class="token operator">&lt;</span>input v<span class="token operator">-</span>focus<span class="token operator">></span></code></pre><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#钩子函数" target="_blank" rel="noopener">钩子函数</a></p><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li><p><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p></li><li><p><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</p></li><li><p><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</p></li><li><p><code>componentUpdated</code>：指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</p></li><li><p><code>unbind</code>：只调用一次，指令与元素解绑时调用。</p></li></ul><p>接下来我们来看一下钩子函数的参数 (即 <code>el</code>、<code>binding</code>、<code>vnode</code> 和 <code>oldVnode</code>)。</p><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#钩子函数参数" target="_blank" rel="noopener">钩子函数参数</a></p><p>指令钩子函数会被传入以下参数：</p><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</li><li><code>binding</code>：一个对象，包含以下 property：<ul><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li><li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li><li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，表达式为 <code>&quot;1 + 1&quot;</code>。</li><li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>{ foo: true, bar: true }</code>。</li></ul></li><li><code>vnode</code>：Vue 编译生成的虚拟节点。移步 <a href="https://cn.vuejs.org/v2/api/#VNode-接口" target="_blank" rel="noopener">VNode API</a> 来了解更多详情。</li><li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li></ul><p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。</p><p>一般在函数中只需要传入<strong>el</strong>和<strong>binding</strong>两个参数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//例</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  bind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> JSON<span class="token punctuation">.</span>stringify    el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>      <span class="token string">'name: '</span>       <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'value: '</span>      <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'expression: '</span> <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'argument: '</span>   <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>arg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'modifiers: '</span>  <span class="token operator">+</span> <span class="token function">s</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span>      <span class="token string">'vnode keys: '</span> <span class="token operator">+</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>动态指令参数</strong>：在 <code>v-mydirective:[argument]=&quot;value&quot;</code> 中，<code>argument</code> 参数可以根据组件实例数据进行更新！这使得自定义指令可以在应用中被灵活使用</p><pre class=" language-vue"><code class="language-vue">//例，这里的direction就是动态的<div id="dynamicexample">  <h3>Scroll down inside this section ↓</h3>  <p v-pin:[direction]="200">I am pinned onto the page at 200px to the left.</p></div></code></pre><h5 id="渲染函数-render"><a href="#渲染函数-render" class="headerlink" title="渲染函数(render)"></a><strong>渲染函数(render)</strong></h5><p>Vue 推荐在绝大多数情况下使用模板来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力。这时你可以用<strong>渲染函数</strong>，它比模板更接近编译器。</p><p>向组件中传递不带 <code>v-slot</code> 指令的子节点时，比如自定义组件标签里面的数据，这些子节点被存储在组件实例中的 <code>$slots.default</code> 中。</p><p>可通过一个babel插件使用<strong>jsx</strong>简化render函数的书写复杂度</p><hr><h5 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a><a href="https://cn.vuejs.org/v2/guide/render-function.html#虚拟-DOM" target="_blank" rel="noopener">虚拟 DOM</a></h5><p>Vue 通过建立一个<strong>虚拟 DOM</strong> 来追踪自己要如何改变真实 DOM。请仔细看这行代码：</p><pre><code>return createElement(&#39;h1&#39;, this.blogTitle)</code></pre><p><code>createElement</code> 到底会返回什么呢？其实不是一个<em>实际的</em> DOM 元素。它更准确的名字可能是 <code>createNodeDescription</code>，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，包括及其子节点的描述信息。我们把这样的节点描述为“虚拟节点 (virtual node)”，也常简写它为“<strong>VNode</strong>”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。</p><p><strong>函数式组件</strong>：实际上，之前出创建的组件只是一个接受一些 prop 的函数。在这样的场景下，我们可以将组件标记为 <code>functional</code>，这意味它无状态 (没有<a href="https://cn.vuejs.org/v2/api/#选项-数据" target="_blank" rel="noopener">响应式数据</a>)，也没有实例 (没有 <code>this</code> 上下文)</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  functional<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Props 是可选的</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 为了弥补缺少的实例</span>  <span class="token comment" spellcheck="true">// 提供第二个参数作为上下文</span>  render<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>createElement<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在 2.3.0 或以上的版本中，你可以省略 <code>props</code> 选项，所有组件上的 <strong>attribute</strong> 都会被自动隐式解析为 prop。</p><p>组件需要的一切都是通过 <code>context</code> 参数传递，它是一个包括如下字段的对象：</p><ul><li><code>props</code>：提供所有 prop 的对象</li><li><code>children</code>：VNode 子节点的数组</li><li><code>slots</code>：一个函数，返回了包含所有插槽的对象</li><li><code>scopedSlots</code>：(2.6.0+) 一个暴露传入的作用域插槽的对象。也以函数形式暴露普通插槽。</li><li><code>data</code>：传递给组件的整个<a href="https://cn.vuejs.org/v2/guide/render-function.html#深入数据对象" target="_blank" rel="noopener">数据对象</a>，作为 <code>createElement</code> 的第二个参数传入组件</li><li><code>parent</code>：对父组件的引用</li><li><code>listeners</code>：(2.3.0+) 一个包含了所有父组件为当前组件注册的事件监听器的对象。这是 <code>data.on</code> 的一个别名。</li><li><code>injections</code>：(2.3.0+) 如果使用了 <a href="https://cn.vuejs.org/v2/api/#provide-inject" target="_blank" rel="noopener"><code>inject</code></a> 选项，则该对象包含了应当被注入的 property。</li></ul><p>在添加 <code>functional: true</code> 之后，需要更新我们的锚点标题组件的渲染函数，为其增加 <code>context</code>参数，并将 <code>this.$slots.default</code> 更新为 <code>context.children</code>，然后将 <code>this.level</code> 更新为 <code>context.props.level</code>。</p><p>因为函数式组件只是函数，所以渲染开销也低很多。</p><p>在普通组件中，没有被定义为 prop 的 attribute 会自动添加到组件的根元素上，将已有的同名 attribute 进行替换或与其进行<a href="https://cn.vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="noopener">智能合并</a>，函数式组件要求你显式定义该行为，通过向 <code>createElement</code> 传入 <code>context.data</code> 作为第二个参数进行定义。</p><p><strong>Vue 的模板实际上被编译成了渲染函数</strong></p><p>在双大括号和v-bind里面可使用过滤器对传入的数据进行过滤</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//前面是数据，后面是过滤器</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 在双花括号中 <span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token operator">|</span> capitalize <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 在 <span class="token template-string"><span class="token string">`v-bind`</span></span> 中 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token punctuation">:</span>id<span class="token operator">=</span><span class="token string">"rawId | formatId"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//在组件里面定义filters</span>filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>  capitalize<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>    value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="4-vue插件"><a href="#4-vue插件" class="headerlink" title="4.vue插件"></a>4.vue插件</h5><p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p><ol><li>添加全局方法或者 property。如：<a href="https://github.com/karol-f/vue-custom-element" target="_blank" rel="noopener">vue-custom-element</a></li><li>添加全局资源：指令/过滤器/过渡等。如 <a href="https://github.com/vuejs/vue-touch" target="_blank" rel="noopener">vue-touch</a></li><li>通过全局混入来添加一些组件选项。如 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a></li><li>添加 Vue 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li><li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a></li></ol><p><strong>使用插件</strong>：通过全局方法 <code>Vue.use()</code> ，它需要在你调用 <code>new Vue()</code> 启动应用之前完成</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 调用 `MyPlugin.install(Vue)`</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>MyPlugin<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...组件选项</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>开发插件</strong>：Vue.js 的插件应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象：</p><pre class=" language-js"><code class="language-js">MyPlugin<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 添加全局方法或 property</span>  Vue<span class="token punctuation">.</span>myGlobalMethod <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 逻辑...</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2. 添加全局资源，指令</span>  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'my-directive'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    bind <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 逻辑...</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 3. 注入组件选项</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 逻辑...</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 4. 添加实例方法</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myMethod <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>methodOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 逻辑...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="5-vant"><a href="#5-vant" class="headerlink" title="5.vant"></a>5.vant</h5><p>参考官网<a href="https://youzan.github.io/vant/?source=vuejsorg#/zh-CN/button" target="_blank" rel="noopener">vant</a></p><p>ui组件。先<code>npm i vant -S</code>安装，之后</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vant <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局导入，不推荐</span><span class="token keyword">import</span> <span class="token string">'vant/lib/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vant<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按需导入，推荐</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>导入vant包和样式，并使用vue.use进行使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>默认按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信息按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-button</span><span class="token punctuation">></span></span></code></pre><p>具体使用和参数参考vant官网。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vuex vue vant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-vuex</title>
      <link href="/2020/07/19/vue-vuex/"/>
      <url>/2020/07/19/vue-vuex/</url>
      
        <content type="html"><![CDATA[<p>Vuex 是一个专为 大型Vue.js 应用程序开发的<strong>状态管理模式</strong></p><p>1.简单来说，vuex就是用来集中管理组件的数据的(多组件共享的数据)。</p><p><strong>数据驱动视图，动作(action)更改数据</strong>，是一个环形单向数据流。</p><p>每一个 Vuex 应用的核心就是 store(数据仓库)。</p><p>2.vuex需要安装</p><pre><code>npm install vuex -S</code></pre><p>3.在vue应用的下面会多出来一个store的文件夹，在里面使用vuex。首先会在里面的index.js里面创建仓库对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//data</span>state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span><span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> getters<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//methods,在mutation里处理状态</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addnum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//异步方法</span> actions<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//模块</span> modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>  buyCar <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在state里面添加全局数据，在mutation里面添加全局方法，修改数据。组件想要调用此方法，需要使用this.$store.<strong>commit</strong>(‘addnum’);进行调用。通过$store.state.num获得数据。</p><p>Vuex 通过 <code>store</code> 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 <code>Vue.use(Vuex)</code>）：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span>  store<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//es6的property简化写法</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> Counter <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;div class="app">      &lt;counter>&lt;/counter>    &lt;/div>  `</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>通过在根实例中注册 <code>store</code> 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 <code>this.$store</code> 访问到。不需要每次都导入store</p><h5 id="4-state"><a href="#4-state" class="headerlink" title="4.state"></a><strong>4.state</strong></h5><p>在组件里的应用，一般放在computed里面当做一个函数，返回一个在state里面的数据，如</p><pre class=" language-js"><code class="language-js">msg<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> $store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="4-1-mapState"><a href="#4-1-mapState" class="headerlink" title="4.1 mapState"></a>4.1 mapState</h6><p>简化我们获取数据的方式，mapState的作用就是返回一个对象，这个对象可以直接丢给computed</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//需要引用</span>   <span class="token comment" spellcheck="true">// computed: {//旧方法</span>    <span class="token comment" spellcheck="true">//     userList: function() {</span>    <span class="token comment" spellcheck="true">//         return this.$store.state.userList;</span>    <span class="token comment" spellcheck="true">//     },</span>    <span class="token comment" spellcheck="true">//     goodsList: function() {</span>    <span class="token comment" spellcheck="true">//         return this.$store.state.goodsList;</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">// }</span>computed<span class="token punctuation">:</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>tital<span class="token punctuation">,</span>        <span class="token function">userList</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>userList<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">goodsList</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>goodsList<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>如果state上有某个属性，可以直接赋值：</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'title'</span><span class="token punctuation">,</span>    userList<span class="token punctuation">:</span> <span class="token string">'userList'</span><span class="token punctuation">,</span>    goodsList<span class="token punctuation">:</span> <span class="token string">'goodsList'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>如果mapState属性的名字和state中属性的名字相同的话，就可以采用下面更简单的写法：</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'goodsList'</span><span class="token punctuation">,</span> <span class="token string">'userList'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>有些复杂数据还是推荐使用第一种。</p><p>或者如果你是用了模块的话，需要在mapState的第一个参数里面传入这个模块文件，在第二个参数里面获取这个模块的state</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'some/nested/module'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>a<span class="token punctuation">,</span>    b<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>b  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h5 id="5-getter"><a href="#5-getter" class="headerlink" title="5.getter"></a><strong>5.getter</strong></h5><p>相当于store的一个计算属性，就是对state的数据进行计算，当组件需要取到state的属性然后进行计算得到想要的结果的时候，计算的过程可以在<code>getters</code> 中进行，组件从getters中就可以直接拿到计算好的值。如果所有组件都需要这个计算的话，那就方便多了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    todos<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//也可接收第二参数为其他的getter</span>    doneTodos<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Getter 会暴露为 <code>store.getters</code> 对象，你可以以属性的形式访问这些值</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'userList'</span><span class="token punctuation">,</span> <span class="token string">'goodsList'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 直接调用getters的doneTodos属性即可</span>    <span class="token function">allAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>doneTodos    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>你也可以通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p><pre class=" language-js"><code class="language-js">getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  getTodoById<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">getTodoById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -> { id: 2, text: '...', done: false }</span></code></pre><p>注意，getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</p><h6 id="5-1-mapgetter"><a href="#5-1-mapgetter" class="headerlink" title="5.1 mapgetter"></a>5.1 mapgetter</h6><p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p><pre class=" language-js"><code class="language-js"> <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span>  doneCount<span class="token punctuation">:</span> <span class="token string">'doneTodosCount'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用对象展开运算符将 getter 混入 computed 对象中</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'doneTodosCount'</span><span class="token punctuation">,</span>      <span class="token string">'anotherGetter'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="6-mutation"><a href="#6-mutation" class="headerlink" title="6.mutation"></a><strong>6.mutation</strong></h5><p>更改 Vuex 的 store 中的状态的唯一方法是提交(<strong>commit</strong>)     <strong>mutation</strong></p><p>当需要在store里面操作数据的增删的时候，需要使用mutation属性。</p><p>可以在mutation里面添加方法，进行修改数据</p><pre class=" language-js"><code class="language-js">mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">addUser</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            state<span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> userName<span class="token punctuation">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在组件里也使用进行调用。</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用commit的方式调用</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addUser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><strong>我们在commit的第二个参数传递数据。这里有个专业的术语叫做【载荷】，只能有一个</strong></p><pre class=" language-js"><code class="language-js">mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// data接收commit的载荷</span>    <span class="token function">addUser</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span>userList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            userName<span class="token punctuation">:</span> data<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            age<span class="token punctuation">:</span> data<span class="token punctuation">.</span>age        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//组件里面</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// commit的第二个参数填写传递的载荷</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addUser'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>​    整个应用程序，只有mutations才可以操作state状态。</p><p>​    但是注意：</p><p>​    <strong>mutations中的属性，必须为纯函数，必须为同步代码。</strong></p><p>​    纯函数就是传入相同的参数，得到相同的结果。</p><p>​    同步代码就不能是异步的，比如ajax，比如setTimeout等。</p><p><strong>在组件中提交 Mutation</strong></p><p>你可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 mutation，或者使用 <code>mapMutations</code> 辅助函数将组件中的 methods 映射为 <code>store.commit</code> 调用（需要在根节点注入 <code>store</code>）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span>      <span class="token comment" spellcheck="true">// `mapMutations` 也支持载荷：</span>      <span class="token string">'incrementBy'</span> <span class="token comment" spellcheck="true">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      add<span class="token punctuation">:</span> <span class="token string">'increment'</span> <span class="token comment" spellcheck="true">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><p><strong>Mutation 需遵守 Vue 的响应规则</strong></p><p>既然 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：</p><ol><li>最好提前在你的 store 中初始化好所有所需属性。</li><li>当需要在对象上添加新属性时，你应该</li></ol><ul><li><p>使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code>, 或者</p></li><li><p>以新对象替换老对象。例如，利用<a href="https://github.com/tc39/proposal-object-rest-spread" target="_blank" rel="noopener">对象展开运算符</a>我们可以这样写：</p><pre class=" language-js"><code class="language-js">state<span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>obj<span class="token punctuation">,</span> newProp<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span></code></pre></li></ul><h5 id="7-action"><a href="#7-action" class="headerlink" title="7.action"></a><strong>7.action</strong></h5><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><p><strong><em>能操作state的只有mutations，actions也不行。只能调用mutations去操作state。</em></strong></p><p>在<strong>action里面</strong>可通过<strong>commit</strong>调用mutation你的数据操纵方法，在组件里的methods里面使用<strong>dispatch</strong>调用action里的方法</p><pre class=" language-js"><code class="language-js"><span class="token function">addUserTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用dispatch调用actions的属性</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'addUserTimeout'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。当我们在之后介绍到 <a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="noopener">Modules</a> 时，你就知道 context 对象为什么不是 store 实例本身了。</p><p>实践中，我们会经常用到 ES2015 的 <a href="https://github.com/lukehoban/es6features#destructuring" target="_blank" rel="noopener">参数解构</a> 来简化代码（特别是我们需要调用 <code>commit</code> 很多次的时候）：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//原来的action</span>actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increment <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里的context就是上下文，相当于store</span>      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//解构的action</span>actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  increment <span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这个commit就相当于前面的mutation的commit调用</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//action也可以带参数</span>actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这里的commit和state就是store里面的，products就是带的参数</span>  checkout <span class="token punctuation">(</span><span class="token punctuation">{</span> commit<span class="token punctuation">,</span> state <span class="token punctuation">}</span><span class="token punctuation">,</span> products<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把当前购物车的物品备份起来</span>    <span class="token keyword">const</span> savedCartItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>cart<span class="token punctuation">.</span>added<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 发出结账请求，然后乐观地清空购物车</span>    <span class="token function">commit</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>CHECKOUT_REQUEST<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 购物 API 接受一个成功回调和一个失败回调</span>    shop<span class="token punctuation">.</span><span class="token function">buyProducts</span><span class="token punctuation">(</span>      products<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 成功操作</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">commit</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>CHECKOUT_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 失败操作</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">commit</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>CHECKOUT_FAILURE<span class="token punctuation">,</span> savedCartItems<span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>同时也可以使用mapAction进行分发action，使用async、await组合action</p><p><strong>总结mutations与actiosn的区别：</strong></p><p>​    1、commit方法用于调用mutation；dispatch 方法用于调用action；</p><p>​    2、mutation 函数必须是纯函数，而且不能有异步代码；action 可以不是纯函数，也可以有异步代码；</p><p>​    3、按照上述规则，可以用mutation完成的事情，可以直接调用mutation，mutation不能实现的事情丢给action来完成。</p><p>​    4、在action中，当完成异步操作，最终需要修改数据模型时，还是需要通过mutation来完成对数据模型的操作。action不允许直接操作数据模型。</p><h5 id="8-module"><a href="#8-module" class="headerlink" title="8.module"></a><strong>8.module</strong></h5><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//需要在index.js里导入，上面两个是一个各自单独的文件</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token punctuation">:</span> moduleB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// -> moduleA 的状态</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token comment" spellcheck="true">// -> moduleB 的状态</span></code></pre><p>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。</p><h6 id="8-1命名空间"><a href="#8-1命名空间" class="headerlink" title="8.1命名空间"></a>8.1命名空间</h6><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名，使用的时候会使用这个命名</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开启命名空间</span>    namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'我是首页'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>state就是存数据的</li><li>mutation就是改变state里面的数据的同步方法</li><li>getter就是方便多个组件获取state里面经过进一步计算后的数据</li><li>action就是异步调用mutation间接改变state里面的数据</li><li>module就是解决store管理整个项目太大了，数据、方法太臃肿的问题</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由</title>
      <link href="/2020/07/15/vue-router/"/>
      <url>/2020/07/15/vue-router/</url>
      
        <content type="html"><![CDATA[<p><strong>B站老陈</strong></p><p>前面都没啥用，router路由才是核心</p><h3 id="router路由"><a href="#router路由" class="headerlink" title="router路由"></a>router路由</h3><p>根据不同的路径显示不同的页面。在router里面的index.js里面配置不同的路径显示的不同的组件或者页面。</p><p>根据选择的<router-link to ='/foo'>替换<router-view>标签来显示内容。在本质上还是一个页面。</p><p>所有的核心配置都在index.js里面</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//component: Home</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>      nav<span class="token punctuation">:</span>navView<span class="token punctuation">,</span>      aside<span class="token punctuation">:</span>asideView<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>Home    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//redirect:"/about"</span>    redirect<span class="token punctuation">:</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>query<span class="token punctuation">.</span>go<span class="token operator">==</span><span class="token string">'about'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"about"</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"news"</span><span class="token punctuation">,</span>params<span class="token punctuation">:</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">456789</span><span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>通过path，name，component设置。</p><p>我们可以在任何组件内通过 <code>this.$router</code> 访问路由器，也可以通过 <code>this.$route</code> 访问当前路由</p><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a><strong>动态路由</strong></h4><p>把某种模式匹配到的所有路由，全都映射到同个组件。在path里面可使用通配符 <code>*</code>进行匹配任意路径，一般用于404页面。当使用一个通配符时，<code>$route.params</code> 内会自动添加一个名为 <code>pathMatch</code> 参数，它包含了 URL 通过通配符被匹配的部分。当使用<em>通配符</em>路由时，请确保路由的顺序是正确的，也就是说含有<em>通配符</em>的路由应该放在最后。</p><p>有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。</p><pre class=" language-js"><code class="language-js">routes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token comment" spellcheck="true">// 动态路径参数 以冒号开头</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//通过$route.params.id可获得路径后的id参数值</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>template<span class="token punctuation">:</span> <span class="token string">'&lt;div>User {{ $route.params.id }}&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 会匹配以 `/user-` 开头的任意路径</span>path<span class="token punctuation">:</span> <span class="token string">'/user-*'</span><span class="token punctuation">}</span>    </code></pre><p>可使用watch进行监听路由发生的变化</p><pre class=" language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">$route</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 对路由变化作出响应...</span>    <span class="token punctuation">}</span></code></pre><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a><strong>嵌套路由</strong></h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 当 /user/:id/profile 匹配成功，</span>          <span class="token comment" spellcheck="true">// UserProfile 会被渲染在 User 的 &lt;router-view> 中</span>          path<span class="token punctuation">:</span> <span class="token string">'profile'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> UserProfile        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 当 /user/:id/posts 匹配成功</span>          <span class="token comment" spellcheck="true">// UserPosts 会被渲染在 User 的 &lt;router-view> 中</span>          path<span class="token punctuation">:</span> <span class="token string">'posts'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> UserPosts        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//此时，基于上面的配置，当你访问 /user/foo 时，User 的出口是不会渲染任何东西，这是因为没有匹配到合适的子路由。如果你想要渲染点什么，可以提供一个 空的 子路由</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> UserHome <span class="token punctuation">}</span></code></pre><p>使用children属性进行嵌套的配置。还可以继续进行嵌套。</p><p><strong>要注意，以 <code>/</code> 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径</strong></p><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a><strong>编程式导航</strong></h4><p>(使用点击事件在js的mehtods里面使用)。除了使用 <code>&lt;router-link to=&quot;...&quot;&gt;</code>，<br>还可使用<code>router.push(location, onComplete?, onAbort?)</code>进行导航。</p><p>使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p><p>注意使用时的参数需要匹配：<strong>name params</strong>         <strong>path query</strong></p><p><strong>注意：在 Vue 实例内部，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code></strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 字符串</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 对象</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'home'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 命名路由</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> <span class="token string">'123'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 带查询参数，变成 /register?plan=private</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'register'</span><span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token punctuation">{</span> plan<span class="token punctuation">:</span> <span class="token string">'private'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> userId <span class="token operator">=</span> <span class="token string">'123'</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> userId <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -> /user/123</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -> /user/123</span><span class="token comment" spellcheck="true">// 这里的 params 不生效</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> userId <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -> /user</span></code></pre><p><strong>注意：如果提供了 <code>path</code>，<code>params</code> 会被忽略，params将以path里面的为准</strong></p><p>router.replace()类似于push，只是替换掉history里面的当前记录</p><p>router.go(n)这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步</p><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a><strong>命名路由</strong></h4><p>通过一个名称来标识一个路由</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/user/:userId'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> User    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"{ name: 'user', params: { userId: 123 }}"</span><span class="token operator">></span>User<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span><span class="token comment" spellcheck="true">//这跟代码调用 router.push() 是一回事：</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>命名视图</strong></p><p>同时 (同级) 展示多个视图，而不是嵌套展示，你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。之前router-link时，只有一个router-view进行替换，只会有一个视图，现在可通过命名视图将几个视图合在一个页面上。</p><p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。需要使用components进行配置，默认为default。也可配合嵌套路由，在childern里面使用命名视图。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>router<span class="token operator">-</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"view one"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"view two"</span> name<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span>router<span class="token operator">-</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"view three"</span> name<span class="token operator">=</span><span class="token string">"b"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> Foo<span class="token punctuation">,</span>        a<span class="token punctuation">:</span> Bar<span class="token punctuation">,</span>        b<span class="token punctuation">:</span> Baz      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="重定向和别名"><a href="#重定向和别名" class="headerlink" title="重定向和别名"></a><strong>重定向和别名</strong></h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/a'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">'/b'</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>重定向的目标也可以是一个命名的路由：<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/a'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'foo'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>甚至是一个方法，动态返回重定向目标：<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/a'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> to <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 方法接收 目标路由 作为参数</span>      <span class="token comment" spellcheck="true">// return 重定向的 字符串路径/路径对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>​    <code>/a</code> 的别名是 <code>/b</code>，意味着，当用户访问 <code>/b</code> 时，URL 会保持为 <code>/b</code>，但是路由匹配则为 <code>/a</code>，就像用户访问 <code>/a</code> 一样。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/a'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> A<span class="token punctuation">,</span> alias<span class="token punctuation">:</span> <span class="token string">'/b'</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>“别名”的功能让你可以自由地将 UI 结构映射到任意的 URL，而不是受限于配置的嵌套路由结构。</p><h4 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a><strong>路由组件传参</strong></h4><p>在组件中使用 <code>$route</code> 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。使用 <code>props</code> 将组件和路由解耦：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>User {{ $route.params.id }}&lt;/div>'</span><span class="token punctuation">}</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//组件传参props</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>User {{ id }}&lt;/div>'</span><span class="token punctuation">}</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> User<span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 对于包含命名视图的路由，你必须分别为每个命名视图添加 `props` 选项：</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/user/:id'</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> User<span class="token punctuation">,</span> sidebar<span class="token punctuation">:</span> Sidebar <span class="token punctuation">}</span><span class="token punctuation">,</span>      props<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> sidebar<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在组件里也使用props将传入的数据拿到，进行数据显示。</p><h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a><strong>路由守卫</strong></h4><p>简单来说就是路由在跳转之前的验证，当满足条件时才会进行跳转。分为<code>全局守卫</code>，<code>路由守卫</code>和<code>组件守卫</code></p><p>1.注册全局守卫应该在路由模块暴露出去之前定义，所有的路由跳转都会被调用使用<code>router.beforeEach(function(to,from,next){})</code>来注册一个全局守卫。</p><p>参数：</p><ul><li><p>to：代表目标路径对象</p></li><li><p>from：来源路径对象</p></li><li><p>next：用于决定是否继续进行跳转。</p><p>当next()函数不传参数或者传入true的时候 则允许正常跳转；</p><p>当next()函数传入false时 会中断跳转(阻止跳转)；</p><p>当next()函数中<strong>传入路径</strong>时或者<strong>对象</strong>时(比如:{name:’xxx’})则会重定向到指定路径。</p></li></ul><p>2.路由守卫就是针对单个路由对象配置的守卫。<strong>beforeEnter</strong></p><p>假如我在users组件配置路由守卫，那么只有跳转到users路由时才会触发该守卫，跳转到其他路由时不会触发该守卫。</p><p>路由守卫的注册写在路由匹配规则数组里面：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//...        </span>    <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/users'</span><span class="token punctuation">,</span>                 component<span class="token punctuation">:</span> Users<span class="token punctuation">,</span>                 name<span class="token punctuation">:</span> <span class="token string">'u'</span><span class="token punctuation">,</span>                 beforeEnter<span class="token punctuation">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                                             <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'Entey Users?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.组件守卫是针对单个组件进行监听，在访问到该组件时才会触发。</p><p>写在组件里</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">let</span> Home <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>            &lt;h1>首页&lt;/h1>            &lt;router-view>&lt;/router-view>            &lt;router-view name="b">&lt;/router-view>        &lt;/div>    `</span></span><span class="token punctuation">,</span>    beforeRouteEnter <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在渲染该组件的对应路由被 confirm 前调用</span>    <span class="token comment" spellcheck="true">// 不！能！获取组件实例 `this`</span>    <span class="token comment" spellcheck="true">// 因为当守卫执行前，组件实例还没被创建</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   beforeRouteUpdate <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在当前路由改变，但是该组件被复用时调用</span>    <span class="token comment" spellcheck="true">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>    <span class="token comment" spellcheck="true">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>    <span class="token comment" spellcheck="true">// 可以访问组件实例 `this`</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   beforeRouteLeave <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 导航离开该组件的对应路由时调用</span>    <span class="token comment" spellcheck="true">// 可以访问组件实例 `this`</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h4 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h4><ol><li><p>导航被触发。</p></li><li><p>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</p></li><li><p>调用全局的 <code>beforeEach</code> 守卫。</p></li><li><p>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</p></li><li><p>在路由配置里调用 <code>beforeEnter</code>。</p></li><li><p>解析异步路由组件。</p></li><li><p>在被激活的组件里调用 <code>beforeRouteEnter</code>。</p></li><li><p>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</p></li><li><p>导航被确认。</p></li><li><p>调用全局的 <code>afterEach</code> 钩子。</p></li><li><p>触发 DOM 更新。</p></li><li><p>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</p><hr></li></ol><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a><strong>路由元信息</strong></h5><p>路由的特有属性，写在meta:{ }里面，为后面的组件提供一些特定信息进行逻辑判断。</p><p>一个路由匹配到的所有路由记录会暴露为 <code>$route</code> 对象 (还有在导航守卫中的路由对象) 的 <code>$route.matched</code> 数组。因此，我们需要遍历 <code>$route.matched</code> 来检查路由记录中的 <code>meta</code> 字段。</p><h5 id="过渡动效"><a href="#过渡动效" class="headerlink" title="过渡动效"></a><strong>过渡动效</strong></h5><p>用 <code>&lt;transition&gt;</code> 组件给它添加一些过渡效果</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>transition name<span class="token operator">=</span><span class="token string">"slide"</span> mode<span class="token operator">=</span><span class="token string">"out-in"</span> enter<span class="token operator">-</span>active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"animated bounceInLeft"</span> leave<span class="token operator">-</span>active<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"animated bounceOutRight"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>        <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">></span></code></pre><h5 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a><strong>数据获取</strong></h5><p>我们可以通过两种方式来实现：</p><ul><li><strong>导航完成之后获取</strong>：先完成导航，然后在接下来的组件生命周期created钩子中获取数据。在数据获取期间显示“加载中”之类的指示。</li><li><strong>导航完成之前获取</strong>：导航完成前，在路由进入的守卫中获取数据，在数据获取成功后执行导航。在为后面的视图获取数据时，用户会停留在当前的界面，因此建议在数据获取期间，显示一些进度条或者别的指示。如果数据获取失败，同样有必要展示一些全局的错误提醒。</li></ul><p>从技术角度讲，两种方式都不错 —— 就看你想要的用户体验是哪种。</p><h5 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a><strong>滚动行为</strong></h5><p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 <code>vue-router</code> 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。</p><p>当创建一个 Router 实例，你可以提供一个 <code>scrollBehavior</code> 方法</p><pre class=" language-js"><code class="language-js">scrollBehavior <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>savedPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> savedPosition  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a><strong>路由懒加载</strong></h5><p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue less route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue进一步学习</title>
      <link href="/2020/07/13/vue%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/13/vue%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="vue的B站老陈学习"><a href="#vue的B站老陈学习" class="headerlink" title="vue的B站老陈学习"></a>vue的B站老陈学习</h4><p>那些基本的在vue初学习大多都说了，这一篇记一些没说到的。</p><h5 id="1-过渡动画，一般使用transition完成。"><a href="#1-过渡动画，一般使用transition完成。" class="headerlink" title="1.过渡动画，一般使用transition完成。"></a>1.过渡动画，一般使用transition完成。</h5><pre class=" language-html"><code class="language-html">&lt;transition name = "nameoftransition">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><p>需要指定这个动画的名字(这里是fade)。</p><p><strong>重点是css里面的css类名和css动画效果</strong></p><p>一般是动画名(例如fade)再加一些特定标识，如</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.fade-enter-active</span>, <span class="token class">.fade-leave-active</span> </span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">2</span>s<span class="token punctuation">}</span><span class="token selector"><span class="token class">.fade-enter</span>, <span class="token class">.fade-leave-to</span>  </span><span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token comment" spellcheck="true">/*opacity表示透明效果*/</span><span class="token punctuation">}</span></code></pre><p>active表示动画的进行时间，enter和leave-to表示刚进入的效果和最终离开时的效果。还有enter-to和leave这两个表示动画最后的效果和离开开始的过渡状态。</p><img src="https://www.runoob.com/wp-content/uploads/2018/06/transition.png" alt="img" style="zoom:50%;" /><p>还可以使用自定义的类名，可以和<strong>第三方css类插件库</strong>(如:animate.css)进行配合。</p><p>如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom-classes-transition<span class="token punctuation">"</span></span>    <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animated tada<span class="token punctuation">"</span></span>    <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animated bounceOutRight<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><p>此外还有enter-class,leave-class,enter-to-class,leave-to-class.与上面相对应。</p><p>过渡时间你也可以在transition里面是绑定duration进行设置。如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">:duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ enter: 500, leave: 800 }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><p><strong>过渡模式</strong>：<strong>mode</strong>，在transition标签里面，值为<strong>in-out</strong>和<strong>out-in</strong></p><p><strong>多组件过渡</strong>：使用动态组件(is的值来进行切换组件)，在这上面变换css动画</p><p><strong>列表过渡</strong>：使用 <code>&lt;transition-group&gt;</code> 组件。</p><pre class=" language-vue"><code class="language-vue"><transition-group name="list-complete" tag="p">    <span      v-for="item in items"      v-bind:key="item"      class="list-complete-item"    >      {{ item }}    </span>  </transition-group>//flip方法移动列表    shuffle: function () {      this.items = _.shuffle(this.items)    }</code></pre><p><strong><code>v-move</code> class</strong>，它会在元素的改变定位的过程中应用。像之前的类名一样，可以通过 <code>name</code> attribute 来自定义前缀，也可以通过 <code>move-class</code> attribute 手动设置。例如：<strong>_.shuffle()</strong> 函数，在切换时会进行平滑移动</p><p><strong>状态过渡</strong>：使用watch查看这些变化。也可将过渡放在组件里面复用</p><h5 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2.生命周期"></a>2.生命周期</h5><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue å®ä¾çå½å¨æ" style="zoom:33%;" /><p>我们能拿到的只有红色框里面的东西，中间的都是vue自动完成，我们无法控制。一般直接在vue实例里面添加这些东西进行控制。如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//进行控制.</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a is: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在beforeCreate里面输出this和vue里面的data会有不同，this表示vue实例刚创建，但data里面的数据还没有绑定，会输出undefined，同时methods这些也没有绑定</p><p>在beforeCreate和created这中间就是绑定data和methods这些。</p><p>created之后就是渲染页面，在渲染之前绑定的一些数据在vue实例里面不会拿到，虽然在浏览器html里面有了。在渲染之后(mounted)就可以拿到这些dom对象。</p><p>当数据被修改，也会有两个阶段，在before阶段，虽然数据修改了，但内容还没渲染修改，在updated后，就会重新渲染，内容也改变了。</p><p>销毁一般很少调用。</p><h5 id="3-组件感觉还有一些东西要写。"><a href="#3-组件感觉还有一些东西要写。" class="headerlink" title="3.组件感觉还有一些东西要写。"></a>3.组件感觉还有一些东西要写。</h5><p>prop传递数据（子组件用来接受父组件传递过来的数据的一个自定义属性）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello!<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parentMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//动态prop传递数据      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>message1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parentMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token comment" spellcheck="true">// 注册</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明 props</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token string">'message1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//props也可以这样，可进行简单的验证</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span>    propA<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 多个可能的类型</span>    propB<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 必填的字符串</span>    propC<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 带有默认值的数字</span>    propD<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">100</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 带有默认值的对象</span>    propE<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 对象或数组默认值必须从一个工厂函数获取</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'hello'</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 自定义验证函数</span>    propF<span class="token punctuation">:</span> <span class="token punctuation">{</span>      validator<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个值必须匹配下列字符串中的一个</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'warning'</span><span class="token punctuation">,</span> <span class="token string">'danger'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;span>{{ message }}+{{message1}}&lt;/span>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>自定义事件（子组件要把数据传递回去，就需要使用自定义事件）</p><pre class=" language-vue"><code class="language-vue"><div id="app">    <div id="counter-event-example">      <p>{{ total }}</p>      <button-counter v-on:increment="incrementTotal"></button-counter>      <button-counter v-on:increment="incrementTotal"></button-counter>    </div></div><script>Vue.component('button-counter', {  template: '<button v-on:click="incrementHandler">{{ counter }}</button>',  data: function () {    return {      counter: 0    }  },  methods: {    incrementHandler: function () {      this.counter += 1      this.$emit('increment')//触发increment事件,在v-on监听里面触发，调用vue实例里面的函数    }  },})new Vue({  el: '#counter-event-example',  data: {    total: 0  },  methods: {    incrementTotal: function () {      this.total += 1    }  }})</script></code></pre><p>component里面的data必须是一个函数，为了保证每个组件的数据不共用。注意驼峰命名法在html里面需要转换成横线格式。</p><p>同时有$parent,$children,$root属性，可以在组件中找到父元素的vue对象，子元素的，根(最外层对象)的这些，之后就可以当做vue对象进行调用方法之类的。</p><p>v-model也可以绑定到组件上，默认会利用名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件，需要在组件的template里面添加相应监听和$emit()调用。</p><p><strong>一般使用.vue分开使用组件的话(父组件就是使用组件的，子组件就是定义组件的)</strong></p><p><strong>父组件给子组件传递数据：在父组件的子组件标签里面通过v-bind绑定一个<u>特定名</u>和数据。在子组件里使用props声明这个<u>特定名</u>，然后就可以使用这个特定名进行数据使用。</strong></p><p><strong>子组件给父组件传递数据和使用父组件的方法：</strong></p><p>​    <strong>1.在父组件的子组件标签里面通过v-on监听一个<u>特定名</u>和一个在父组件里面的methods的方法名，在子组件里面自定义一个点击事件之类的，触发在子组件里面自定义的方法，在这个方法里面通过this.$emit(‘<u>特定名</u>‘,’数据’)，就会通过这个特定名调用父组件里面的方法，数据也作为参数传递了过去。</strong></p><p>​    <strong>2.在父组件里通过v-bind绑定一个<u>特定名</u>和<u>父组件方法</u>，在子组件里通过props声明这个特定名，然后就可以把这个<u>特定名</u>当做一个方法进行使用</strong></p><h5 id="4-插槽。"><a href="#4-插槽。" class="headerlink" title="4.插槽。"></a>4.插槽。</h5><p>整体结构不变，但要插入一些内容。<slot></slot>,新版本(2.6.0)可使用v-slot。一般来说，在自定义组件的标签里面添加内容，是不会被渲染到页面上去的，但slot解决了这个问题。<slot>在组件的<strong>template里面添加</strong>使用，添加之后，当在组件标签里面添加内容时，slot将会被替换掉，内容可被渲染到页面上。一个组件的template最外层只会有一个标签，一般可使用一个div将所有元素进行包裹。</p><p><strong>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</strong></p><p>还有<strong>具名插槽</strong>，通过父组件<template v-slot:footer>和子组件<slot name="footer"></slot>使用。v-slot只能在template里面使用</p><p><strong>作用域插槽</strong>，访问子组件的内容，将v-slot直接在组件标签上面使用</p><pre class=" language-vue"><code class="language-vue"><current-user v-slot="slotProps">  {{ slotProps.user.firstName }}</current-user></code></pre><p>v-slot后面有参数的话，可缩写为 <strong>‘#’</strong>，v-slot:header 可以被重写为  #header</p><h5 id="5-动态组件。"><a href="#5-动态组件。" class="headerlink" title="5.动态组件。"></a>5.动态组件。</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span></code></pre><p>可使用is属性切换不同的组件。</p><p>is用法。其中currentTabComponent是在vue实例里面进行数据定义的，然后在局部定义<strong>组件</strong>和方法进行切换currentTabComponent，在this.$options.components[id]，this表示vue实例，获取到组件实例，之后将component标签替换成这个组件。</p><p>一般切换的时候，都会重新渲染组件。当我们不想让其重新渲染的时候，就可以使用<keep-alive>标签。如</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span></code></pre><p> keep-alive要求被切换到的组件都有自己的名字，不论是通过组件的 <code>name</code>选项还是局部/全局注册。</p><p>因为一些标签 有一些限制出现的地方，如<li>，为了避免这些情况，在组件中的template使用<strong>单文件组件(.vue文件)</strong>就不会存在这些限制，这也是重点。</p><hr><p>在每个 <code>new Vue</code> 实例的子组件中，其根实例可以通过 <code>$root</code> property 进行访问其data、methods、computed里面的数据方法</p><p>和 <code>$root</code> 类似，<code>$parent</code> property 可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。</p><hr><p>可在子组件标签里面使用<strong>ref</strong>，方便在js里面进行访问。只会在组件渲染完成之后生效，并且它们不是响应式的。</p><pre class=" language-vue"><code class="language-vue"><base-input ref="usernameInput"></base-input>//js使用this.$refs.usernameInput</code></pre><hr><p><strong>依赖注入</strong> ：用到了两个新的实例选项：<code>provide</code> 和 <code>inject</code>。<code>provide</code> 选项允许我们指定我们想要<strong>提供</strong>给后代组件的数据/方法，简化了$parent获取父组件方法的方式</p><pre class=" language-vue"><code class="language-vue">//父组件provide: function () {  return {    getMap: this.getMap,//组件里的method  }}//子组件inject: ["getMap"],//或去父组件的provide</code></pre><hr><h5 id="6-单文件组件-vue文件"><a href="#6-单文件组件-vue文件" class="headerlink" title="6.单文件组件(.vue文件)"></a>6.<strong>单文件组件(.vue文件)</strong></h5><p>脚手架。.vue文件解决了<strong>全局定义</strong> <strong>字符串模板</strong> <strong>不支持组件 CSS</strong>  <strong>没有构建步骤</strong>这些缺点</p><p>1.解决了<strong>全局定义</strong> <strong>字符串模板</strong> <strong>不支持组件 CSS</strong>  <strong>没有构建步骤</strong>这些缺点，使关注点分离，模块化开发。</p><p>2.vue-cli    vue.js的<a href="https://cli.vuejs.org/zh/guide/prototyping.html" target="_blank" rel="noopener">标准开发工具</a></p><p>3.安装vue-cli按照官方文档的命令进行就可以了，不要其他的不加@符号的命令，在vscode终端里面目前是需要3版本以上。推荐使用git-bash进行npm下载或者cnpm下载。如果出现了什么命令没找到，注意添加安装路径到环境变量。如果安装好了，在bash里面vue –version没有问题，但在vscode终端里无法使用，将vscode设置成管理员打开。<strong>vue create xxx</strong>可以创建一个项目，同时<strong>vue ui</strong>可以进行更简易化的创建配置操作。</p><p>4.在src目录里面开发，使用npm run serve看效果，npm run build打包到dist文件夹，可将dist文件夹部署到服务器，当做平常网站。注意绝对路径(/)，和相对路径(./)</p><p>5.将文件模块化，明确文件关系</p><p><strong>6.app.vue文件</strong>。核心文件，在template里面写html代码，script里面写js，style里面写css。注意全局使用驼峰命名，防止一些奇怪错误，注意在使用组件时，需要将驼峰命名变为横线。</p><pre class=" language-vue"><code class="language-vue"><template>  <div id="app">    <chat-com></chat-com>    <userlist-com></userlist-com>  </div></template><script>import chatCom from './components/chatcom'import userlistCom from './components/userlistcom'export default {  name: 'App',  components: {    chatCom,    userlistCom  }}</script><style scoped>#app {  font-family: Avenir, Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;}</style></code></pre><p>使用import引入自定义组件，并在export default的component里面声明，里面的<strong>数据data是返回一个对象</strong>.</p><hr><p>报错和解决方法：</p><p>1.Newline required at end of file but not found eol-last</p><p>在.vue文件的最后一行后面加一个空行，还只能加一个空行，多了不行</p><p>2.miss什么什么的，在miss的地方加空格。好吧，这是最考试创建的时候开启了eclint选项，是一个严格语法结构。不能使用tab，空格多了两个。</p><p>3.推荐使用vscode的格式化文档(代码格式化为：alt+shift+f)，再对照错误进行修改，字符串使用单引号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue laochen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue初学习</title>
      <link href="/2020/07/08/vue%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/08/vue%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="关于自己对Vue初学习的一些知识点和理解，基本无用"><a href="#关于自己对Vue初学习的一些知识点和理解，基本无用" class="headerlink" title="关于自己对Vue初学习的一些知识点和理解，基本无用"></a>关于自己对Vue初学习的一些知识点和理解，基本无用</h4><p>学习的地方包括Vue自己的网站，菜鸟教程，B站等。主要是在vue.js里面看的一些知识点，有些不清，需要修改。</p><h5 id="1-vue对象中会有两个重要的属性，el和data，表示绑定的属性和数据。"><a href="#1-vue对象中会有两个重要的属性，el和data，表示绑定的属性和数据。" class="headerlink" title="1.vue对象中会有两个重要的属性，el和data，表示绑定的属性和数据。"></a>1.vue对象中会有两个重要的属性，el和data，表示绑定的属性和数据。</h5><h5 id="2-模板语法"><a href="#2-模板语法" class="headerlink" title="2.模板语法"></a>2.模板语法</h5><p>插值：数据绑定：文本：, v-once；原始html：v-html，将html文本转换为html样式；作用于html 的attribute：v-bind,</p><p>指令：指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute,一些指令可以带参数。</p><p>动态参数：可以用方括号括起来的 JavaScript 表达式作为一个指令的参数。可以使用null字符串显式的移除此属性。</p><p><strong><code>v-bind</code> 指令可以用于响应式地更新 HTML attribute，</strong></p><p><strong><code>v-on</code> 指令，它用于监听 DOM 事件,</strong>进行事件处理</p><h5 id="3-计算属性和侦听器"><a href="#3-计算属性和侦听器" class="headerlink" title="3.计算属性和侦听器"></a>3.计算属性和侦听器</h5><p>​    1.对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>computed。</p><p>​    2.我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。只要值没有发生变化，就不会再次计算属性，直接返回上一次的计算结果。而方法会每一次重新渲染时都重新计算。</p><p>​    3.Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：<strong>侦听属性</strong> </p><h5 id="4-class和style绑定"><a href="#4-class和style绑定" class="headerlink" title="4.class和style绑定"></a>4.class和style绑定</h5><p>​    1.对象语法，使用v-bind:class指令。</p><p>​    2.绑定内联样式，v-bind:style指令。是一个js对象</p><h5 id="5-条件渲染"><a href="#5-条件渲染" class="headerlink" title="5.条件渲染"></a>5.条件渲染</h5><p>​    1.v-if条件性的渲染一部分内容，一般使用<template>进行包裹，根据if的条件看是否显示，再使用v-if可以渲染多个内容。还有配套的 v-else,还有v-else-if进行连续使用。</p><p>​    2.v-show的使用与v-if差不多，但没有v-else这些。同时因为各自特性，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h5 id="6-列表渲染"><a href="#6-列表渲染" class="headerlink" title="6.列表渲染"></a>6.列表渲染</h5><p>​    1.v-for，使用(item,index) in items的格式执行。其中items需要在vue里面的data里指定数据。也可使用value in object进行对象循环，也可使用(value, name, index)进行对象里面的数据，键名，索引访问。也可以使用n in 10进行循环。类似于 <code>v-if</code>，你也可以利用带有 <code>v-for</code> 的 <code>&lt;template&gt;</code> 来循环渲染一段包含多个元素的内容。</p><h5 id="7-事件处理"><a href="#7-事件处理" class="headerlink" title="7.事件处理"></a>7.事件处理</h5><p>​    1.v-on监听dom事件，并执行一些js代码。还可以接收一个需要调用的方法名称。在vue的methods里面添加方法。</p><p>​    Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><pre class=" language-vue"><code class="language-vue"><!-- 阻止单击事件继续传播 --><a v-on:click.stop="doThis"></a><!-- 提交事件不再重载页面 --><form v-on:submit.prevent="onSubmit"></form><!-- 修饰符可以串联 --><a v-on:click.stop.prevent="doThat"></a><!-- 只有修饰符 --><form v-on:submit.prevent></form><!-- 添加事件监听器时使用事件捕获模式 --><!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --><div v-on:click.capture="doThis">...</div><!-- 只当在 event.target 是当前元素自身时触发处理函数 --><!-- 即事件不是从内部元素触发的 --><div v-on:click.self="doThat">...</div><!-- 点击事件将只会触发一次 --><a v-on:click.once="doThis"></a></code></pre><p>​    使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。</p><p>​    2.监听按键事件时，可以使用按键修饰符，如：v-on:keyup.enter，只有enter键可以触发事件。</p><h5 id="8-表单输入绑定"><a href="#8-表单输入绑定" class="headerlink" title="8.表单输入绑定"></a>8.表单输入绑定</h5><p>​    1.v-model，创建双向数据绑定，一处数据发生变化，另一处也会发生变化。</p><p>​    <code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li><li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li><li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li></ul><p>​    2.文本，多行文本，复选框，单选按钮，选择框。</p><p>​    3.值绑定</p><p>​    4.修饰符，.lazy;.number;.trim</p><h5 id="9-组件"><a href="#9-组件" class="headerlink" title="9.组件"></a>9.组件</h5><p>​    1.组件可以扩展 HTML 元素，封装可重用的代码，是可复用的vue实例。组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树。<strong>每个组件都只有一个根元素</strong></p><p>​    2.Vue.component创建组件，第一个参数是组件名称，第二个参数是以对象的实例描述一个组件。通过将组件名作为标签进行调用。<strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，多个组件的使用，其数据都是分开的，不会互相影响。</p><p>​    3.组件需要注册，Vue.component全局注册，先在js里定义组件，再在vue实例中通过component定义想使用的组件局部注册。</p><p>​    4.组件里使用prop向子组件传递数据，当做自定义的attribute传递数据。也可使用v-bind动态传递prop，且是单向的。</p><p>​    5.监听子组件事件，父级组件可以像处理 native DOM 事件一样通过 <code>v-on</code> 监听子组件实例的任意事件：</p><pre class=" language-vue"><code class="language-vue"><blog-post  ...  v-on:enlarge-text="postFontSize += 0.1"></blog-post></code></pre><p>同时子组件可以通过调用内建的 <a href="https://cn.vuejs.org/v2/api/#vm-emit" target="_blank" rel="noopener"><strong><code>$emit</code></strong> 方法</a>并传入事件名称来触发一个事件：</p><pre class=" language-vue"><code class="language-vue"><button v-on:click="$emit('enlarge-text')">  Enlarge text</button></code></pre><p>​    6.<slot>内容</slot>，在组件里面通过vue自定义的slot可以实现插槽效果。</p><p>​    7.动态组件，通过 Vue 的 <code>&lt;component&gt;</code> 元素加一个特殊的 <code>is</code> attribute 来实现。</p><h5 id="10-自定义事件"><a href="#10-自定义事件" class="headerlink" title="10.自定义事件"></a>10.自定义事件</h5><p>​    1.Vue.directive自定义指令，第一个参数是名字，或在vue实例中通过directives局部注册。会有几个钩子函数bind,inserted,update,componentUpdated,unbind.</p><p>差不多这篇文章就不想写了，看其他的吧,基本无用。</p><h4 id="vue的黑马学习，就是一些简单指令的使用"><a href="#vue的黑马学习，就是一些简单指令的使用" class="headerlink" title="vue的黑马学习，就是一些简单指令的使用"></a>vue的黑马学习，就是一些简单指令的使用</h4><p>1.vue作用范围，只有在vue实例的el挂载点里面及其后代元素才会进行这个vue实例的操作。不仅可以使用id选择器，class选择器也行，使用.class进行el挂载。其他的选择器也都能行。可以使用其他的双标签，但不能是body和html标签。</p><p>2.Vue中用到的数据定义在data中，data中可以写复杂类型的数据，渲染复杂类型数据时,遵守js的语法即可</p><p>3.dom操作是获取元素，操作它们。vue使用指令操作</p><p>4.v-text指令。直接替换标签里面的所有文字和数据。跟两个大括号没什么差别。</p><p>5.v-html，设置标签的innerHTML，就是将纯html文本解析成html效果。</p><p>6.v-on，为元素绑定事件，类似onclick等。v-on:click=”函数名”,函数在vue实例的methods里面定义，methods:{click:function(){ }, other:{ } }。同时，在函数名后面可以传递参数，相应在定义函数时也要添加这个参数。还可以使用(.)表示的指令后缀调用修饰符。如@click.once=””,只会调用一次，@keyup.enter=””这些。</p><p>7.v-show,根据表达值的真假，切换元素的显示和隐藏。本质就是切换display属性。</p><p>8.v-if,v-if=”值”,根据值的真假，判断是否显示，但不是操纵display，而是直接操纵dom元素。</p><p>9.v-bind,设置元素的属性。v-bind:属性名=”属性值”，一般属性值在data里面进行定义。</p><p>10.v-for,生成列表。格式v-for=”item in items”，在data里面对items进行数据设置，一般是数组或者对象或者对象数组。使用对象时，可使用(value,key,index) in object 对对象进行数据访问。</p><p>11.v-model，获取和设置表单元素的值(进行双向数据绑定)。就是表单中的数据发生改变时，另一个绑定的数据元素也会发生改变。一般用来获取输入文本框中的输入数据.</p><p>12.网络请求(axios).一般使用get和post</p><p>例如：</p><pre class=" language-js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"https://autumnfish.cn/api/joke/list?num=1"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>                        that<span class="token punctuation">.</span>joke<span class="token operator">=</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jokes<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里不能通过this访问joke，this的范围已经发生了变化</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jokes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猎奇作品(以后有新的会更新)</title>
      <link href="/2020/07/08/%E7%8C%8E%E5%A5%87%E4%BD%9C%E5%93%81/"/>
      <url>/2020/07/08/%E7%8C%8E%E5%A5%87%E4%BD%9C%E5%93%81/</url>
      
        <content type="html"><![CDATA[<h4 id="就是记录一下一些看过的作品"><a href="#就是记录一下一些看过的作品" class="headerlink" title="就是记录一下一些看过的作品"></a>就是记录一下一些看过的作品</h4><p>1.鱼毛骨悚然的蠕动</p><p>​        动漫观感一般，后遗感2小时以内，留的坑有些多，不讨论其内涵，就画面来说对于猎奇这点还是有一些诠释，就是有些地方密恐慎入。</p><p>2.芽衣恶虐，恶梦轮回</p><p>​        这两部作品着实有些血腥，生理性有些不适。都是漫画，大概50页左右，后遗感1小时左右吧，血腥，色情，生理性不适，<strong>慎看</strong> 。</p><p>3.阿修罗</p><p>​        是一部动漫，主要关于哲学意义思考这方面，在画面表现手法上片猎奇，血腥，R-21，慎看</p><p>4.一些小说</p>]]></content>
      
      
      
        <tags>
            
            <tag> 猎奇,记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的建立</title>
      <link href="/2020/07/07/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BB%BA%E7%AB%8B/"/>
      <url>/2020/07/07/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BB%BA%E7%AB%8B/</url>
      
        <content type="html"><![CDATA[<p>对这个博客，确实有很多的问题，自己都删了好几次文件，从新来搞，才搞成这样，可能还有一些的问题在里面，等后面发现了，就继续改进。现在就有一些问题就很烦，就是github.io过一段时间就不能进行访问了，相当于这个网页就没了，就是这个问题搞了好久，最后只能重新重头开始再搞一次。在网上也没找到什么解决办法，看后面怎么搞。下一个就是关于这个github和自己的域名的链接，上次一搞就崩了，希望这次不崩。</p><h4 id="首先感谢这几位大佬的参考资料，不然有许多的问题都不知道怎么搞。"><a href="#首先感谢这几位大佬的参考资料，不然有许多的问题都不知道怎么搞。" class="headerlink" title="首先感谢这几位大佬的参考资料，不然有许多的问题都不知道怎么搞。"></a>首先感谢这几位大佬的参考资料，不然有许多的问题都不知道怎么搞。</h4><p>1.<a href="https://yafine-blog.cn/posts/4ab2.html#1-%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%88%B0Github-Pages" target="_blank" rel="noopener">过客～励む</a></p><p>2.<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">遇见西门</a></p><p>3.<a href="https://space.bilibili.com/384068749/" target="_blank" rel="noopener">B站codesheep</a></p><h5 id="后面再说一下一些我碰见的问题和解决方法。"><a href="#后面再说一下一些我碰见的问题和解决方法。" class="headerlink" title="后面再说一下一些我碰见的问题和解决方法。"></a>后面再说一下一些我碰见的问题和解决方法。</h5><p>首先是域名的问题，这里参考遇见西门的博客的域名方法就行，记住不要直接在github建立CNAME文件，需要在本地建立CNAME文件，再上传，之后在github链接域名。</p><p>后面的一个问题是新建博客，使用的命令是<strong>hexo n “新建的博客名”</strong>,因为是md文件，所以需要你自己下一个md文件格式的编辑器，例如typora等，最后，你的文件写的时候，一般会添加tag，一定要tag:后面加一个空格，再加你的tag，不然会出现错误。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客建立 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
